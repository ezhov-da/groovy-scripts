<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<tree-objects>
    <object>
        <name>root</name>
        <description></description>
        <list>
            <object>
                <name>basic</name>
                <description></description>
                <list>
                    <object>
                        <name>add</name>
                        <description>void Array::add(elements)
                            To add elements to an Array
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>break-continue</name>
                        <description>break|continue]
                            To break/continue from a loop
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>for</name>
                        <description>for(init-statement; cond; each-statement) { t-statements }
                            Equivalent to doing init-statement; while(cond) {t-statements; each-statement;}
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStringValueForClassMember</name>
                        <description>String getStringValueForClassMember(String className, String memberName)
                            This operation uses java reflection mechanisms to return the value of the specified
                            static member for the named class as a string. className needs to be the fully
                            qualified name of the class, e.g. java.lang.String
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>if-else</name>
                        <description>if(Boolean cond) { t-statements } [else { f-statements }]
                            If cond is true t-statements are executed, otherwise f-statements are executed
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>remove</name>
                        <description>void Array::remove(int i)
                            To remove the element at the specified position
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>return</name>
                        <description>return e
                            Used in functions: returns e to the caller
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>runQuery</name>
                        <description>void runQuery(String qryString)
                            run query in qryString against default db
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>while</name>
                        <description>while(Boolean cond) { t-statements }
                            As long as cond is true, t-statements are executed
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>bidi</name>
                <description></description>
                <list>
                    <object>
                        <name>bidiTransform</name>
                        <description>public String bidiTransform(String srcStr, String direction, String typeOfText,
                            String orientation, String swap, String numShapes, String textShapes)
                            If direction is "IMPORT", using the BiDi attributes specified in the parameters to
                            create a BiDiText and then tranform it to BiDiText with default attributes. If direction is
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>"EXPORT", create a BiDiText using default attribute then tranform it to BiDiText with
                        </name>
                        <description>attributes specified in the parameters. typeOfText can be : "IMPLICIT", "VISUAL".
                            orientation can be : "LTR", "RTL", "CONTEXTUAL_LTR", "CONTEXTUAL_RTL".
                            swap can be : "YES", "NO". numShapes can be : "NOMINAL", "NATIONAL",
                            "CONTEXTUAL", "ANY". textShapes can be : "NOMINAL", "SHAPED", "INITIAL",
                            "MIDDLE", "FINAL", "ISOLATED". default value is: typeOfText:"IMPLICIT"
                            orientation:"LTR" swap:"YES" numShapes:NOMINAL textShapes:NOMINAL
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>currency</name>
                <description></description>
                <list>
                    <object>
                        <name>getAllCurrencies</name>
                        <description>String[] getAllCurrencies()
                            This operation return all currency codes that wpc support.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCompanyCurrencies</name>
                        <description>String[] getCompanyCurrencies()
                            This operation return currencies code selected in company attribute.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrencyDescByCode</name>
                        <description>String getCurrencyDescByCode(String code)
                            This operation return currency description from currency code
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrencySymbolByCode</name>
                        <description>String getCurrencySymbolByCode(String code)
                            This operation return currency symbol from currency code,such as input
                            "USD",currency symbol return will be "$".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCompanyCurrencies</name>
                        <description>void setCompanyCurrencies(String listOfCodes[])
                            This operation set the list of codes to the company datebase.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>date</name>
                <description></description>
                <list>
                    <object>
                        <name>addDate</name>
                        <description>Date Date::addDate(String field, Integer value)
                            Add the integer value given to the field specified. Allowed field values are : YEAR
                            MONTH DATE HOUR MINUTE
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>formatDate</name>
                        <description>String Date::formatDate(String newFormat[,Locale locale])
                            Use to format a date as a human readable format. The newFormat string is a pattern
                            whose format is identical to the format used by Java. Locale is optional, default is the
                            UI locale.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateField</name>
                        <description>Integer Date::getDateField(String field)
                            Get the value of the field specified. Allowed field values are : YEAR MONTH DATE
                            HOUR_OF_DAY MINUTE SECOND
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateInputFormat</name>
                        <description>String getDateInputFormat()
                            Returns the date input format set in my setting
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateOutputFormat</name>
                        <description>String getDateOutputFormat()
                            Returns the date output format set in my setting
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateTimeInUserTimeZone</name>
                        <description>Date getDateTimeInUserTimeZone()
                            Returns the number of seconds since January 1, 1970, 00:00:00 GMT represented by
                            this Date object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTime</name>
                        <description>Integer Date::getTime()
                            Returns the number of seconds since January 1, 1970, 00:00:00 GMT represented by
                            this Date object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isDateAfter</name>
                        <description>Boolean Date::isDateAfter(Date otherDate)
                            Returns true if and only if this date is after otherDate
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isDateBefore</name>
                        <description>Boolean Date::isDateBefore(Date otherDate)
                            Returns true, if and only if this date is before otherDate
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Date</name>
                        <description>new Date(String sFormat, String sDate[,Locale locale)
                            Builds a Date object from a String given a date format, if the locale is supplied that
                            locale will be used to apply the given format, else default_locale from
                            common.properties will be used
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseDate</name>
                        <description>Date parseDate(String value, String format[,Locale locale])
                            Use to parse a String value to a Date object. The format string is a pattern whose
                            format is identical to the format used by Java. Locale is optional, the default value is
                            the UI locale.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reformatDate</name>
                        <description>String reformatDate (String formattedDateString, String currentDateFormat,
                            Locale currentLocale [, String newDateFormat, Locale newLocale])
                            Takes a date string formatted according to the pattern indicated by
                            currentDateFormat and returns a new string formatted according to the
                            newDateFormat provided.If currentDateFormat is null the default format for the locale
                            is used. If currentLocale or newLocale is null the locale in the user setting is used. If
                            newDateFormat is null the standard default pattern "EEE MMM dd HH:mm:ss zzz
                            yyyy" is used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDateField</name>
                        <description>Date Date::setDateField(String field, Integer value)
                            Return a Date equal to the input Date, except that the specified field is set to the
                            given value. Allowed field values are : YEAR MONTH DATE HOUR_OF_DAY
                            MINUTE SECOND
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDateInputFormat</name>
                        <description>void setDateInputFormat(String format)
                            Set the Date input format
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDateOutputFormat</name>
                        <description>void setDateOutputFormat(String format)
                            Set the Date output format
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>today</name>
                        <description>Date today ()
                            Returns the current date and time
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>db</name>
                <description></description>
                <list>
                    <object>
                        <name>commit</name>
                        <description>void Connection::commit()
                            Commit a transaction using the DB connection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>executeBatchUpdate</name>
                        <description>void Connection::executeBatchUpdate(String sql, Object[][] batchValues)
                            Executes a prepared statement for a batch update using the connection object. The
                            Object[][] is a HashMap of HashMaps, each indexed by integer, whose value is the
                            replacement for a '?' in the prepared statement for a given batch.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>executeQuery</name>
                        <description>ResultSet Connection::executeQuery(String sql)
                            Execute the query using the Connection object. Returns the ResultSet.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>executeUpdate</name>
                        <description>int Connection::executeUpdate(String sql)
                            Execute the query using the Connection object. Returns the number of rows inserted,
                            updated, or deleted.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColumn</name>
                        <description>Object ResultSet::getColumn(String colName)
                            Get the entry for the current result at column colName. Returns an object of type
                            Integer, String, or Date (depending on the data type of the column).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColumnAt</name>
                        <description>Object ResultSet::getColumnAt(Number colNumber)
                            Get the entry for the current result at column position. Returns an object of type
                            Integer, String, or Date (depending on the data type of the column).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWPCDBConnection</name>
                        <description>Connection DBContext::getWPCDBConnection()
                            Get a non-auto commit connection using the DB context
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWPCDBContext</name>
                        <description>DBContext getWPCDBContext()
                            Get the database context object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loadJar</name>
                        <description>Boolean loadJar(String jarName)
                            loadJar dynamically adds the jar file of name jarName to the SystemClassLoader.
                            This allows subsequent script operations (such as createJavaMethod) to use those
                            class files within the jar file. The jarName is specified as the fully qualified file name
                            of the jar on the server. The operation returns false if the file cannot be accessed.
                            The operation returns true if the dynamic load was successful. If two loadJar calls are
                            issued with the same fully qualified jarName and the first was successful, then the
                            second call will return true and will not add the jar file again.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>next</name>
                        <description>boolean ResultSet::next()
                            Move the ResultSet iterator to the next result. Returns false if it has iterated past the
                            last result.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>openJDBCConnection</name>
                        <description>Connection openJDBCConnection(String driverName, String database, String
                            userid, String password)
                            Get an (autoCommit on) SQL connection using JDBC Drivers
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>releaseJDBCConnection</name>
                        <description>void releaseJDBCConnection(Connection conn)
                            Rollback and release an SQL connection retrieved using JDBC
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>releaseWPCDBConnection</name>
                        <description>void DBContext::releaseWPCDBConnection(Connection conn)
                            Rollback and release a connection retrieved using the DB context
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>rollback</name>
                        <description>void Connection::rollback()
                            Rollback a transaction using the DB connection
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>error</name>
                <description></description>
                <list>
                    <object>
                        <name>catchError</name>
                        <description>catchError(String errMsg) { statements }
                            Analogous to a try-catch in Java, all statements are executed and errMsg is set to
                            null in the absence of errors
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>logDebug</name>
                        <description>void logDebug (String message)
                            Logs the debug message with the debug log that is available from the schedule
                            profile details screens. Use with caution because the debug log is maintained in
                            memory.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>logError</name>
                        <description>void logError(String itemId, String message)
                            Logs the error message with the corresponding item id to the location specified in the
                            context
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>logWarning</name>
                        <description>void logWarning(String itemId, String message)
                            Logs the warning message with the corresponding item id to the location specified in
                            the context
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>throwError</name>
                        <description>void throwError (String rejectionCause)
                            Use to throw a Java-like exception. This operation is usually used in conjunction with
                            the catchError operation
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>excel</name>
                <description></description>
                <list>
                    <object>
                        <name>createExcelCell</name>
                        <description>IExcelCell ExcelRow::createExcelCell(index)
                            Returns am ExcelCell at the requested index within the ExcelRow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createExcelCellStyle</name>
                        <description>ExcelCellStyle ExcelBook::createExcelCellStyle()
                            Returns a cell style associated with this ExcelBook. A style constains characteristics
                            of a cell over and above the value such as the font and the fillPattern. A style is
                            applied to a cell using ExcelCell::setExcelStyle.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createExcelSheet</name>
                        <description>ExcelSheet ExcelBook::createExcelSheet([String sSheetName])
                            Creates a sheet from the workbook. If a sheet name is supplied then the sheet is
                            created with this name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createFont</name>
                        <description>ExcelCellFont ExcelBook::createFont()
                            Returns a ExcelCellFont associated with this ExcelBook, the ExcelFont set methods
                            should be used to setup the font as required. This font can then be used as the input
                            parameter to ExcelCellStyle::setFont(font). The ExcelCellStyle can then be seton an
                            cell using ExcelCell::setExcelStyle(cellStyle).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createRow</name>
                        <description>IExcelRow ExcelSheet::createRow(index)
                            Returns am ExcelRow at the requested index.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCellObj</name>
                        <description>ExcelCell ExcelRow::getCellObj(Integer columnIndex)
                            Returns the Excel Obj at the given column index for further investigation.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateCellValue</name>
                        <description>Date ExcelCell::getDateCellValue()
                            Returns the value of this date cell as a date. Use this function only if it is pre
                            determined using String ExcelCell::getExcelCellType() (unless known otherwise) that
                            the cell is a date type.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDateFromDoubleValue</name>
                        <description>Date getDateFromDoubleValue(Double dateAsDoubleValue)
                            Creates a Date Object from a given Double value.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelCell</name>
                        <description>String ExcelSheet::getExcelCell(Integer iRow, Integer iCol)
                            Returns the value of the cell at given row and column indexes as a String value.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelCellEncoding</name>
                        <description>String ExcelCell::getExcelCellEncoding()
                            Returns the encoding of the cell. Possible values can be COMPRESSED_UNICODE,
                            UTF-16, UNKNOWN.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelCellType</name>
                        <description>String ExcelCell::getExcelCellType()
                            Returns the type of this cell. Values can be NUMERIC, STRING, DATE, BLANK,
                            UNKNOWN.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelRow</name>
                        <description>ExcelRow ExcelSheet::getExcelRow(Integer iRow)
                            Returns the row at the specified index. Note: Rows are zero based.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelSheet</name>
                        <description>ExcelSheet ExcelBook::getExcelSheet(Integer iSheetNumber/String
                            sSheetName)
                            Returns a sheet from the workbook based on the arguments passed. If
                            iSheetNumber is passed, then the sheet having the index specified by this argument
                            is returned. If sSheetName is passed, then the sheet is retrieved by the name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExcelSheets</name>
                        <description>HashMap ExcelBook::getExcelSheets()
                            Returns a hashmap of excel sheets within the workbook. The hashmap is indexed by
                            the sheet name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFirstCellNum</name>
                        <description>Integer ExcelRow::getFirstCellNum()
                            Returns the index of the first physical cell in this row. Note that columns are zero
                            based.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFirstRowNum</name>
                        <description>Integer ExcelSheet::getFirstRowNum()
                            Returns the index of the first physical row
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLastCellNum</name>
                        <description>Integer ExcelRow::getLastCellNum()
                            Returns the index of the last physical cell in this row.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLastRowNum</name>
                        <description>Integer ExcelSheet::getLastRowNum()
                            Returns the index of the last physical row
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNbColumns</name>
                        <description>Integer ExcelSheet::getNbColumns()
                            Returns the number of physical columns in this sheet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNbRows</name>
                        <description>Integer ExcelSheet::getNbRows()
                            Returns the number of physical rows in this sheet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNumericCellValue</name>
                        <description>Double ExcelCell::getNumericCellValue()
                            Returns the value of this numeric cell as a double value. Use this function only if it is
                            pre determined using String ExcelCell::getExcelCellType() (unless known otherwise)
                            that the cell is a numeric type.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStringCellValue</name>
                        <description>String ExcelCell::getStringCellValue()
                            Returns the value of this text cell as a String. Use this function only if it is pre
                            determined using String ExcelCell::getExcelCellType() (unless known otherwise) that
                            the cell is a string type.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$ExcelBook</name>
                        <description>new ExcelBook([Doc docToRead])
                            This creates a new ExcelBook. ExcelBooks can be used in 2 ways, to read an
                            existing ExcelBook or to create a new ExcelBook. It is not supported to update an
                            existing ExcelBook. All the other Excel objects can be obtained either directly from
                            this ExcelBook or indirectly from the objects obtained from this ExcelBook (apart from
                            the ExcelParser object which has its own constructor). When the script op is used
                            within an import job, then an existing ExcelBook is read from the docstore (the default
                            import document or the one that is specified in the docToRead parameter). When an
                            existing ExcelBook is read, it should not be updated, as any changes will not be
                            written back to the docstore. To create an ExcelBook which will be updated, this
                            script operation should be called outside of an import job, without the docToRead
                            parameter; this creates an ExcelBook in memory which can then saved to the
                            docstore using the ExcelBook::saveToDocStore script operation.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$ExcelParser</name>
                        <description>new ExcelParser(ExcelSheet sheet)
                            Returns an excel parser to parse the given spreadsheet.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveToDocStore</name>
                        <description>void ExcelBook::saveToDocStore([[String docStorePath],Boolean
                            overwriteFlag]])
                            This saved an updated ExcelBook to the documentation store. If used in an export
                            script with no operands, then the excel file will be written into the standard export
                            directory with name CATALOG.XLS. If run with no operands outside of an export,
                            then this script operation will fail with an exception. When a docStorePath argument
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>is supplied, then this is absolute path including the file name where the excel book
                        </name>
                        <description>will be written in the doc store. When the overWriteFlag is set to true, then any
                            existing excel book at the supplied path will be overwritten, If the overWriteFlag is set
                            to false and excelbook existing in the docstore path, an exception will be thrown. If
                            the overwriteFlag is not supplied, then it will default to false. It is recommended that
                            you do not specify a docstore path in export scripts, as subsequent runs of the export
                            will attempt to write to the same file in the doc store (which will only succeed if the
                            overwrite flag is set to true)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAlignment</name>
                        <description>void ExcelCellStyle::setAlignment(String alignment)
                            Set the cell style alignment to that supplied. The valid alignments are
                            ALIGN_GENERAL, ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT, ALIGN_FILL,
                            ALIGN_JUSTIFY, ALIGN_CENTER_SELECTION.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBoldWeight</name>
                        <description>void ExcelCellFont::setBoldWeight(String weight)
                            Set the cell font bold weight. Valid Strings are BOLDWEIGHT_NORMAL and
                            BOLDWEIGHT_BOLD.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBorderBottom</name>
                        <description>void ExcelCellStyle::setBorderBottom(String border)
                            Set the Bottom Border to the supplied border. The valid borders are
                            BORDER_NONE, BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED,
                            BORDER_HAIR, BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
                            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
                            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
                            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBorderLeft</name>
                        <description>void ExcelCellStyle::setBorderLeft(String border)
                            Set the left Border to the supplied border. The valid borders are BORDER_NONE,
                            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
                            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
                            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
                            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
                            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBorderRight</name>
                        <description>void ExcelCellStyle::setBorderRight(String border)
                            Set the Right Border to the supplied border. The valid borders are BORDER_NONE,
                            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
                            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
                            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
                            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
                            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBorderTop</name>
                        <description>void ExcelCellStyle::setBorderTop(String border)
                            Set the Top Border to the supplied border. The valid borders are BORDER_NONE,
                            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
                            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
                            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
                            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
                            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBottomBorderColor</name>
                        <description>void ExcelCellStyle::setBottomBorderColor(String color)
                            Set the cell style Bottom border color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,</name>
                        <description>TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCellType</name>
                        <description>void ExcelCell::setCellType(String type)
                            Set the cell type. Valid values are BLANK, NUMERIC, STRING. Be aware that the
                            NUMERIC type will change to a DATE type of cell if the value of the cell is a Date.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setColor</name>
                        <description>void ExcelCellFont::setColor(String color)
                            Set the cell fonts color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
                            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDataFormat</name>
                        <description>void ExcelCellStyle::setDataFormat(String format)
                            Set the cell style Data Format to that supplied. The valid formats are General, 0, 0.00,
                            #, ##0, #, ##0.00, ($#, ##0_);($#, ##0), ($#, ##0_);[Red]($#, ##0), ($#, ##0.00);($#,
                            ##0.00), ($#, ##0.00_);[Red]($#, ##0.00), 0%, 0.00%, 0.00E+00, # ?/?, # ??/??,
                            m/d/yy, d-mmm-yy, d-mmm, mmm-yy, h:mm AM/PM, h:mm:ss AM/PM, h:mm,
                            h:mm:ss, m/d/yy h:mm.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDateCellValue</name>
                        <description>void ExcelCell::setDateCellValue(Date date)
                            Set a Date as the cell value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setExcelStyle</name>
                        <description>void ExcelCell::setExcelStyle(String cellStyle)
                            Set the cell style for this cell
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFillBackgroundColor</name>
                        <description>void ExcelCellStyle::setFillBackgroundColor(String color)
                            Set the cell style fill Background color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
                            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFillForegroundColor</name>
                        <description>void ExcelCellStyle::setFillForegroundColor(String color)
                            Set the cell style fill foreground color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,</name>
                        <description>TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFillPattern</name>
                        <description>void ExcelCellStyle::setFillPattern(String pattern)
                            Set the cell style fill pattern to that supplied. The valid patterns are NO_FILL,
                            SOLID_FOREGROUND, FINE_DOTS, ALT_BARS, SPARSE_DOTS,
                            THICK_HORZ_BANDS, THICK_VERT_BANDS, THICK_BACKWARD_DIAG,
                            THICK_FORWARD_DIAG, BIG_SPOTS, BRICKS, THIN_HORZ_BANDS,
                            THIN_VERT_BANDS, THIN_BACKWARD_DIAG, THIN_FORWARD_DIAG,
                            SQUARES, DIAMONDS.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFont</name>
                        <description>void ExcelCellStyle::setFont(ExcelCellFont font)
                            Set the cell style font to that supplied.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFontHeight</name>
                        <description>void ExcelCellFont::setFontHeight(Integer height)
                            Set the cell font height.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setFontName</name>
                        <description>void ExcelCellFont::setFontName(String fontName)
                            Set the font name in the ExcelCellFont. The font name is accepted if it is a non-null
                            String. The fonts names that are valid are those that are installed on the windows
                            system that the spreadsheet is opened on.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setIndention</name>
                        <description>void ExcelCellStyle::setIndention(indent)
                            Set the cell indent. The indent amount is the number of intented characters.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItalic</name>
                        <description>void ExcelCellFont::setItalic(Boolean flag)
                            Set the cell font to italic by passing true in, or non-italic by passing false in.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLeftBorderColor</name>
                        <description>void ExcelCellStyle::setLeftBorderColor(String color)
                            Set the cell style left border color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
                            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setNumericCellValue</name>
                        <description>void ExcelCell::setNumericCellValue(Double number)
                            Set a number as the cell value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setRightBorderColor</name>
                        <description>void ExcelCellStyle::setRightBorderColor(String color)
                            Set the cell style Right border color to that supplied. The valid colors are BROWN,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,</name>
                        <description>INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
                            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStrikeout</name>
                        <description>void ExcelCellFont::setStrikeout(Boolean flag)
                            Set the cell style text to strikeout by passing true in, or non-strikeout by passing false
                            in.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStringCellValue</name>
                        <description>void ExcelCell::setStringCellValue(String string)
                            Set a String as the cell value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setTopBorderColor</name>
                        <description>void ExcelCellStyle::setTopBorderColor(String color)
                            Set the cell style Top border color to that supplied. The valid colors are BROWN,
                            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
                            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
                            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
                            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
                            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
                            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
                            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
                            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
                            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUnderline</name>
                        <description>void ExcelCellFont::setUnderline(String underline)
                            Set the cell font underline. Valid Strings are U_NONE, U_SINGLE, U_DOUBLE,
                            U_SINGLE_ACCOUNTING and U_DOUBLE_ACCOUNTING.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setVerticalAlignment</name>
                        <description>void ExcelCellStyle::setVerticalAlignment(String valignment)
                            Set the cell style vertical alignment to that supplied. The valid vertical alignments are
                            VERTICAL_TOP, VERTICAL_CENTER, VERTICAL_BOTTOM,
                            VERTICAL_JUSTIFY .
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWrapText</name>
                        <description>void ExcelCellStyle::setWrapText(Boolean flag)
                            Set the cell style text to wrapping by passing true in , or non-wrapping by passing
                            false in.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>libxml</name>
                <description></description>
                <list>
                    <object>
                        <name>getXMLNode</name>
                        <description>XmlNode XMLNode::getXmlNode(String nodePath)
                            Returns the xmlnode selected by sPath relative to this node
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLNodeName</name>
                        <description>String XMLNode::getXMLNodeName()
                            Returns the name of the current XMLNode.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLNodePath</name>
                        <description>String XMLNode::getXMLNodePath()
                            Returns the path of the current XMLNode. This path is not an XPath - it is the
                            concatenation of all the names of the parent XMLNode's path, /, and the name of this
                            XMLNode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLNodes</name>
                        <description>XmlNode[] XMLNode::getXmlNodes(String sPath)
                            Returns the xmlnodes selected by sPath relative to this node
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLNodeValue</name>
                        <description>String XMLNode::getXMLNodeValue(String nodePath [, Boolean bRequired])
                            Returns the value of the current XMLNode. Default value of bRequired is false. It is
                            set to throw AustinException
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLNodeValues</name>
                        <description>String[] XMLNode::getXMLNodeValues(String nodePath [, Boolean bRequired])
                            Returns the values of the XMLNode given by path. Default value of bRequired is
                            false. It is set to throw AustinException
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$XmlDocument</name>
                        <description>new XmlDocument(Doc doc/String str)
                            Creates an XmlDocument from a docstore Doc instance or an xml string literal. If the
                            string starts with "file://" then the xml document will be loaded from the file system
                            according to the specified path.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setXMLNodeValue</name>
                        <description>void XMLNode::setXMLNodeValue(String sPath, String value)
                            Sets the value of the xmlNode given by sPath. Creates the node if it doesn't exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setXMLNodeValues</name>
                        <description>void XMLNode::setXMLNodeValue(String sPath, String[] values)
                            Sets the value of the xmlNode given by sPath. Creates the node if it doesn't exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>validateXML</name>
                        <description>String validateXML(String docPath)
                            Validates an XmlDocument from a docstore Doc instance. Returns "Success" if its a
                            valid XML Document. Returns "Document not found" if the XML Document not found
                            in DocStore. Returns "Document is empty" if the XML Document is empty. Returns
                            "Fatal Parsing Error" concatenated with the error description for a non-XML
                            Document. Returns "Error" for any other error.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>xmlDocToString</name>
                        <description>String XMLNode::xmlDocToString()
                            Returns the serialized xml document which this node is part of
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>math</name>
                <description></description>
                <list>
                    <object>
                        <name>max</name>
                        <description>Number max(Number a, Number b)
                            Return the max
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>min</name>
                        <description>Number min(Number a, Number b)
                            Return the min
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>rand</name>
                        <description>Integer rand(Integer max)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns a random integer that is between 0 and max</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>reformatDouble</name>
                        <description>String reformatDouble (Double origDouble, Integer minDigitsBeforeDecPoint,
                            Integer maxDigitsAfterDecPoint)
                            Returns a new String representing the number, reformatted to fit the criteria specified
                            by minDigitsBeforeDecPoint and maxDigitsAfterDecPoint
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>toDouble</name>
                        <description>Double toDouble(String str)
                            Parses str as a Double
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>toInteger</name>
                        <description>Integer toInteger(String str)
                            Parses str as an Integer
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>number</name>
                <description></description>
                <list>
                    <object>
                        <name>formatNumber</name>
                        <description>String Number::formatNumber(String numberFormat, Locale loc)
                            Use to format an Number to a human readable format according to the locale
                            specified in the parameter.If locale is null,it will use the locale of user setting. If
                            numberFormat is null, it will use the default format of the locale.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>formatNumberByLocPrecision</name>
                        <description>String formatNumberByLocPrecision(Double number, Locale loc, Integer
                            precision)
                            This operation returns a string format along with defined precision and locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>formatNumberByPrecision</name>
                        <description>String formatNumberByPrecision(Double number,Integer precision)
                            This operation returns a string format along with defined precision
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseDouble</name>
                        <description>Double parseDouble(String str, Locale loc)
                            Pass string to double value based on locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseNumber</name>
                        <description>Number parseNumber(String str, String numberFormat, Locale locale)
                            Use to parse a String to Number by numberFormat and locale. If locale is null, it will
                            use the locale of user setting .If numberFormat is null, it will use the default format of
                            the locale. The numberFormat string is a pattern whose format is identical to the
                            number format used by Java
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations</name>
                <description></description>
                <list>
                    <object>
                        <name>addLdapAttribute</name>
                        <description>void LdapEntry::addLdapAttribute(LdapAttribute attribute)
                            Adds an LdapAttribute Object to this LdapEntry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addLdapEntry</name>
                        <description>void LdapEntrySet::addLdapEntry(LdapEntry entry)
                            Create a new Ldap Entry Set
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addLdapObjectclass</name>
                        <description>void LdapEntry::addLdapObjectclass(LdapOperation objectClass)
                            Adds an LdapObjectclass Object to this LdapEntry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createLDIFFile</name>
                        <description>createLDIFFile(String docstore_filename, LdapEntrySet entrySet)
                            A static method that creates an LDIF formatted file based upon an input Ldap entry
                            set. The filename is a docstore reference
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapAttributes</name>
                        <description>LdapAttributes[] LdapEntry::getLdapAttributes()
                            Retrieves the LdapAttribute Objects for this LdapEntry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapAttributeType</name>
                        <description>String LdapAttribute::getLdapAttributeType()
                            Retrieves the attribute type or name of an LdapAttribute Object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapAttributeValue</name>
                        <description>Object LdapAttribute::getLdapAttributeValue()
                            Retrieves the attribute value of an LdapAttribute Object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapDistinguishedName</name>
                        <description>LdapAttribute LdapEntry::getLdapDistinguishedName()
                            Retrieves the distinguished name for an LdapEntry as an LdapAttribute Objects
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapEntries</name>
                        <description>LdapEntry[] LdapEntrySet::getLdapEntries()
                            Retrieves the LdapEntry Objects.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapObjectclass</name>
                        <description>String LdapObjectclass::getLdapObjectclass()
                            Retrieves the name of a LdapObjectclass Object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapObjectclasses</name>
                        <description>LdapObjectclass[] LdapEntry::getLdapObjectclasses()
                            Retrieves the LdapObjectclass Objects for this LdapEntry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapOperation</name>
                        <description>String[] LdapEntry::getLdapOperationDetails()
                            Retrieves the LdapOperation details strings for this LdapEntry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isBinary</name>
                        <description>Boolean LdapAttribute::isBinary()
                            Indicates if the attribute represents a binary value encoded as a BASE64 string.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isExternal</name>
                        <description>Boolean LdapAttribute::isExternal()
                            Indicates if the attribute is a reference to an external file. For example and jpeg image
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$LdapAttribute</name>
                        <description>new LdapAttribute(String attributeType, Object attributeValue [, Boolean
                            isBinary, Boolean isExternal)
                            Create a new Ldap Attribute. Optional parameters: isBinary represents a BASE64
                            encoded binary representation, default false; isExternal represents an external file
                            reference, default false
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$LdapEntry</name>
                        <description>new LdapEntry()
                            Create a new Ldap Entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$LdapEntrySet</name>
                        <description>new LdapEntrySet()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Create a new Ldap Entry Set</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>new$LdapObjectclass</name>
                        <description>new LdapObjectclass(String objclass)
                            Create a new Ldap objectclass object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseLDIFFile</name>
                        <description>LdapEntrySet parseLDIFFile(String filename)
                            A static method that reads an LDIF file and instantiates an Ldap entry set based on it.
                            The filename is a system reference
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLdapDistinguishedName</name>
                        <description>void LdapEntry::setLdapDistinguishedName(LdapAttribute dn)
                            Sets the single distinguished name for an LdapEntry as an LdapAttribute Objects
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLdapOperation</name>
                        <description>void LdapEntry::setLdapOperation(LdapOperation operation)
                            Adds an LdapOperation object to an LdapEntry.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_admin</name>
                <description></description>
                <list>
                    <object>
                        <name>flushScriptCache</name>
                        <description>::flushScriptCache()
                            Flushes the script cache on the local JVM. While this is normally done automatically,
                            this script operation is provided in case there are any techniques that would cause
                            the scripts to update in docstore, without properly updating the cache. This method
                            may also be used to test the caching behavior of scrpts.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>logActionableMessage</name>
                        <description>Integer logActionableMessage(String type, String action, String comment,
                            IMessage msg, String state)
                            Logs a message in the alerts console for a message "msg". the Actionable "type" is
                            primary heading or category under which an actionable is classified. Actionable
                            "action" is known as the actionable topic. The topic is essentially a more specific
                            version of the actionable type, it can be Accept or Reject. Actionable "comment" is
                            information about the actionable. Actionable "state" sets the priority level of this
                            actionable, the level can be set to either "INF" for informational, "ACT" for actionable
                            or "ERR" for any error. It returns a unique ID for the message logged
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SystemDB</name>
                        <description>new SystemDB()
                            Returns an object that represents the status of the current database
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reportAllTableIndexes</name>
                        <description>String SystemDB::reportAllTableIndexes()
                            Reports all the tables and their indexes
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reportChangedIndexes</name>
                        <description>String SystemDB::reportChangedIndexes()
                            Reports the list of indexes that have not been updated
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reportExtraIndexes</name>
                        <description>String SystemDB::reportExtraIndexes()
                            Reports the list of indexes that are extra in the current database that sould not be
                            there
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reportIndexStatistics</name>
                        <description>String SystemDB::reportIndexStatistics()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Reports all the indexes and their current statistics and whether or not they need to be
                        </name>
                        <description>rebuilt. Warning: This script op should not be used on a live sytems; using this
                            script
                            operation during normal WPC operations will have a detrimental effect on
                            performance.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reportMissingIndexes</name>
                        <description>String SystemDB::reportMissingIndexes()
                            Reports the list of indexes that are missing in the current database that sould be
                            there
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_assert</name>
                <description></description>
                <list>
                    <object>
                        <name>assertEquals</name>
                        <description>void ::assertEquals(Object expectedValue, Object actualValue, [String
                            message])
                            Throws a ScriptAssertException when the two object references do not refer to the
                            same 'simple' value. Therefore, note that a value of 1.0 (of type double) will NOT
                            equal a value of 1 (of type Integer). Note that 'complex' objects e.g. Catalog,
                            Hierarchy etc. are not supported currently.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>assertFalse</name>
                        <description>void ::assertFalse(Boolean condition, [String message])
                            Throws a ScriptAssertException unless condition is false
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>assertNotNull</name>
                        <description>void ::assertNotNull(Object obj, [String message])
                            Throws a ScriptAssertException unless the value is NOT null
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>assertNull</name>
                        <description>void ::assertNull(Object obj, [String message])
                            Throws a ScriptAssertException unless the value is null
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>assertTrue</name>
                        <description>void ::assertTrue(Boolean condition, [String message])
                            Throws a ScriptAssertException unless condition is true
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_attr_group</name>
                <description></description>
                <list>
                    <object>
                        <name>addAttributeToAttrGroup</name>
                        <description>void AttrGroup::addAttributeToAttrGroup(String attrPath [, boolean
                            throwError])
                            Adds an attribute to the attribute collection.Irrespective of throwError flag, throws an
                            exception if called on a default generated attribute collection. If throwError is true,
                            throws an exception for invalid attrPath. By default, value of throwError is false
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addLocalesToAttrGroup</name>
                        <description>void AttrGroup::addLocalesToAttrGroup(String localesCSVString)
                            Adds the locales to the Attribute Collection.Throws an exception if called on default
                            generated attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addLocalizedNodeToAttrGroup</name>
                        <description>void AttrGroup::addLocalizedNodeToAttrGroup(Node node)
                            Associates this localized node with this attribute collection. Throws an exception if
                            called on default generated attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addSpecToAttrGroup</name>
                        <description>void AttrGroup::addSpecToAttrGroup(Spec spec, [boolean bDynamic])</description>
                        <list/>
                    </object>
                    <object>
                        <name>Associates all the nodes of the spec with this attribute collection. If the bDynamic
                            flag
                        </name>
                        <description>is set to true then any additional nodes added to the spec, after the spec has been
                            associated to the Attribute Collection, will become part of the Attribute Collection. If
                            the bDynamic flag is set to false then only the nodes that are part of the spec at this
                            time only will be added to the Attribute Collection. By default, value for bDynamic is
                            true. Throws an exception if called on default generated attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteAttrGroup</name>
                        <description>void AttrGroup::deleteAttrGroup()
                            Deletes this attribute collection. Throws an exception if called on default generated
                            attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAllAttrGroupsForAttribute</name>
                        <description>AttrGroup[] getAllAttrGroupsForAttribute(String attrPath)
                            Returns an array of AttrGroups where the attrPath is included. Return null if attrPath
                            is not included in any Attribut Group.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAllAttributePathsFromAttrGroup</name>
                        <description>String[] AttrGroup::getAllAttributePathsFromAttrGroup()
                            Returns all the attribute paths associated with this attribute collection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAttrGroupByName</name>
                        <description>AttrGroup getAttrGroupByName(String name)
                            Returns the attribute collection with the given name. Otherwise it becomes null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAttrGroupName</name>
                        <description>String AttrGroup::getAttrGroupName()
                            Returns the name of this attribute collection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAttrGroupType</name>
                        <description>String AttrGroup::getAttrGroupType()
                            Returns the type of this attribute collection. Type can only be GENERAL.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocalesOfAttrGroup</name>
                        <description>String AttrGroup::getLocalesOfAttrGroup()
                            Returns the locales to the Attribute Collection as a single String of comma-separated
                            values.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$AttrGroup</name>
                        <description>new AttrGroup(String name, String type, [String desc])
                            Returns a new attribute collection with the given name, type and description. Type
                            can only be GENERAL.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeAttributeFromAttrGroup</name>
                        <description>void AttrGroup::removeAttributeFromAttrGroup(String attrPath)
                            Removes the attribute from the attribute collection.Throws an exception if called on
                            default generated attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeLocalesFromAttrGroup</name>
                        <description>void AttrGroup::removeLocalesFromAttrGroup(String localesCSVString)
                            Removes the locales from the Attribute Collection.Throws an exception if called on
                            default generated attribute collection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeSpecFromAttrGroup</name>
                        <description>void AttrGroup::removeSpecFromAttrGroup(Spec spec)
                            Disassociates all the nodes of the spec from this attribute collection.Throws an
                            exception if called on default generated attribute collection.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_catalog</name>
                <description></description>
                <list>
                    <object>
                        <name>addCtgItemToSelection</name>
                        <description>(deprecated) see addEntryToSelection
                            Add the item to the basic selection (does nothing for an advanced selection)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addEntryToSelection</name>
                        <description>void Selection::addEntryToSelection(Entry entry)
                            Add the entry to the basic selection - the entry can be an item or a hierarchy node
                            (does nothing for advanced selection).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addSecondaryCategoryTree</name>
                        <description>void Catalog::addSecondaryCategoryTree(CategoryTree categoryTree)
                            Add category tree as a secondary category tree
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>associateCategoryCacheToItemSet</name>
                        <description>void ItemSet::associateCategoryCacheToItemSet(CategoryCache catCache)
                            Associates the CategoryCache to the ItemSet so that when items are fetched, the
                            corresponding categories are also fetched in bulk
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildTestCatalogData</name>
                        <description>buildTestCatalogData(Spec fileSpec, String sDocStorePath, Integer nbRows [,
                            Integer firstSku])
                            Create a document at sDocStorePath for the file specification fileSpec with nbRows
                            of random data, with the primary key starting at firstSku
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>containsByPrimaryKey</name>
                        <description>boolean Catalog::containsByPrimaryKey(String sPrimaryKey) - boolean
                            ItemSet::containsByPrimaryKey(String sPrimaryKey)
                            Returns true, if the catalog or item set contains an item with the primary key
                            sPrimaryKey
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>defineLocationSpecificData</name>
                        <description>void Catalog::defineLocationSpecificData(CategoryTree ctr, Spec spc,
                            AttrGroup[] inhAttrGrps)
                            Sets up location specific data for a catalog. CTR is the category tree that contains the
                            locations. SPC is the spec of the locations. INHATTRBRPS is an array of attribute
                            groups containing the inheritable attributes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteCatalog</name>
                        <description>(deleteCatalog(Catalog ctg)
                            Delete the catalog ctg. WARNING: Transactional disruption will occur: This script
                            operation will roll back any existing transaction, and will leave the database
                            connection in auto-commit. This script operation should be used carefully; for
                            example, it should not be called in a catchError block.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteSelection</name>
                        <description>boolean Selection::deleteSelection()
                            Delete the selection. Return true if the deletion occured, false if selection was in use.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>disableContainerProcessingOptions</name>
                        <description>void Container::disableContainerProcessingOptions(String[] options)
                            Disable the specified processing options - possible values: PRE_SCRIPT,
                            POST_SCRIPT, POST_SAVE_SCRIPT, ENTRY_BUILD_SCRIPT, VALUE_RULES,
                            VALIDATION_RULES, DEFAULT_VALUES, DEFAULT_VALUE_RULES,
                            SEQUENCES, TYPE_VALIDATION, MERGE_WITH_OLD_VERSION,
                            MIN_MAX_OCCURANCE, MIN_MAX_LENGTH, POSSIBLE_VALUES,
                            PATTERN_VALIDATION, COL_AREA_LOCKS_VALIDATION,
                            LOCK_CATEGORIES_FOR_ITEM_SAVE, LOCKING, UNIQUE_VALIDATION, ALL
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>exportCatalog</name>
                        <description>void Catalog::exportCatalog(Spec mktplaceSpec, SpecMap specMap)
                            Use to syndicate a catalog using mktplaceSpec and specMap
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachCtgItem</name>
                        <description>forEachCtgItem([String sCatalogName, ], Item item) { statements }
                            Executes the statements for each item in the catalog called sCatalogName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachItemSetElement</name>
                        <description>forEachItemSetElement(ItemSet is, Object oItem) { statements }
                            Executes the statements for each (oItem) map in the ItemSet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAttributeGroupsToProcess</name>
                        <description>AttrGroup[] Container::getAttributeGroupsToProcess()
                            Return the list of attribute collections if any have been specified to restrict processing
                            an retrieval from the database. If a null is returned, it means that retrieval and
                            processing is not being restricted and all attributes are being processed
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogAccessControlGroupName</name>
                        <description>String Catalog::getCatalogAccessControlGroupName()
                            Returns the Access Control Group for this catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogAttribute</name>
                        <description>String[] Catalog::getCatalogAttribute(String sAttribName)
                            Returns a list of values for the attribute sAttribName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogAttributes</name>
                        <description>HashMap Catalog::getCatalogAttributes()
                            Returns a HashMap mapping attributes to their respective values. The attributes
                            returned are "SCRIPT_NAME", "PRE_SCRIPT_NAME",
                            "POST_SAVE_SCRIPT_NAME", "ENTRY_BUILD_SCRIPT",
                            "DISPLAY_ATTRIBUTE", "USER_DEFINED_CORE_ATTRIBUTE_GROUP" and
                            "SCRIPT_RESTRICT_LOCALES".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogCategoryTrees</name>
                        <description>HashMap Catalog::getCatalogCategoryTrees()
                            Return an array with category trees of this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogId</name>
                        <description>Integer Catalog::getCatalogId()
                            Returns the ID of this catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogItemCountInVersion</name>
                        <description>Integer Catalog::getCatalogItemCountInVersion(Version version)
                            Returns the number of items in the specified version of this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogNamesList</name>
                        <description>String[] getCatalogNamesList([String filterByPrivilege])
                            Return the list of names of available catalogs filtered by catalog privileges LIST (list
                            catalog), VIEW_ITEMS (view items in catalog), MODIFY_ITEMS (modify items in
                            catalog). By default the catalog names for the catalogs with LIST privilege access are
                            returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogsByAttributeValue</name>
                        <description>Catalog[] getCatalogsByAttributeValue(String attribute_name, String value)
                            Returns all catalogs that have the provided value for the attribute
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogSpec</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>Spec Catalog::getCatalogSpec([Boolean bGetImmutableSpec])</name>
                        <description>Returns the spec this catalog. If the optional boolean bGetImmutableSpec is set to
                            true, an immutable spec is retrieved (you can not modify the spec, but it is faster to
                            retrieve). By default you get a mutable spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogVersion</name>
                        <description>Version Catalog::getCatalogVersion()
                            Returns the version of this catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogVersionSummary</name>
                        <description>Versions[] Catalog::getCatalogVersionSummary()
                            Return an array with versions of this catalog - most recent first
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorizedItemCountInVersion</name>
                        <description>Integer Catalog::getCategorizedItemCountInVersion(Version version,
                            CategoryTree ctgtree)
                            Returns the number of items categorized in the specified category tree for the
                            specified version of this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCheckedOutEntryColAreasByPrimaryKey</name>
                        <description>String[] Container::getCheckedOutEntryColAreasByPrimaryKey(String
                            sPrimaryKey)
                            Return a list of collaboration area names in which the entry for the given primary key
                            is checked out. Returns empty list if entry is not checked out.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getContainerId</name>
                        <description>Integer Container::getContainerId()
                            Returns the ID of this container.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getContainerLocalesForRole</name>
                        <description>String Container::getContainerLocalesForRole(Role role)
                            Gets the locales that are allowed for this container specifically for the particular role.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getContainerType</name>
                        <description>String Container::getContainerType()
                            Returns the type of the container. Types can be one of the following: CATALOG,
                            CATEGORY_TREE
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgByName</name>
                        <description>Catalog getCtgByName([String name])
                            Returns the catalog object with the corresponding name. If no name is provided,
                            return the default catalog (if defined).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgCategorySpecs</name>
                        <description>HashMap Catalog::getCtgCategorySpecs()
                            Returns the category specs for this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemByAttributeValue</name>
                        <description>ItemSet Catalog::getCtgItemByAttributeValue(String sNodePath, String sValue)
                            Returns ItemSet of items from the catalog that have the provided value for the
                            attribute. Use "" or null value for searching EMPTY values. An excpetion is throw if
                            the attribute does not exist or it is not indexed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemByPrimaryKey</name>
                        <description>Item Catalog::getCtgItemByPrimaryKey(String sPrimaryKey)
                            Method deprecated. Use Container::getEntryByPrimaryKey. Returns the item from
                            the catalog with the given primary key - this method cannot be used to retrieve newly
                            created items that have not been saved yet.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemIdByPrimaryKey</name>
                        <description>Integer Catalog::getCtgItemIdByPrimaryKey(String sPrimaryKey)
                            Returns an item id by primary key
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgName</name>
                        <description>String Catalog::getCtgName()
                            Returns the name of this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgSpec</name>
                        <description>Spec Catalog::getCtgSpec([Boolean bGetImmutableSpec])
                            Returns the spec this catalog. If the optional boolean bGetImmutableSpec is set to
                            true, an immutable spec is retrieved (you can not modify the spec, but it is faster to
                            retrieve). By default you get a mutable spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultCatalogName</name>
                        <description>(deprecated) String getDefaultCatalogName()
                            See getCtgByName(). Returns the name of the catalog being used for an
                            aggregation/syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDestinationCatalog</name>
                        <description>Catalog getDestinationCatalog()
                            Returns the destination catalog for catalog to catalog exports.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDynamicSelectionQueryString</name>
                        <description>String DynamicSelection::getDynamicSelectionQueryString()
                            Returns the query string for this dynamic selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntrySetForPrimaryKeys</name>
                        <description>EntrySet Container::getEntrySetForPrimaryKeys(Array pkeys, Boolean
                            bOptimize)
                            Returns an EntrySet of the entries in this container for the given primary keys - set
                            bOptimize to true if you don't plan on changing the entries, the entry set is then
                            optimized but these entries don't keep track of changed attributes
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntrySetSize</name>
                        <description>Integer EntrySet::getEntrySetSize()
                            Returns the number of entries in an entry set
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExportItemsCount</name>
                        <description>Integer getExportItemsCount()
                            Returns the number of items being syndicated
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExportItemSets</name>
                        <description>ItemSet[] getExportItemSets()
                            Returns an array of ItemSets being syndicated
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHierarchyNodeSetForSelection</name>
                        <description>HierarchyNodeSet Selection::getHierarchyNodeSetForSelection()
                            Return the hierarchy nodes in that selection as a HierarchyNodeSet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemBySku</name>
                        <description>(deprecated) see getCtgItemByPrimaryKey</description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemPrimaryKeysForCategory</name>
                        <description>String[] Category::getItemPrimaryKeysForCategory(Catalog ctg [, Boolean
                            ordered])
                            Returns an array of Strings containing the primary keys of the items in this category.
                            The option Boolean 'ordered' being set to true makes the operation return the ordered
                            children of this category if the catalog is set up to use ordering
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetForCatalog</name>
                        <description>ItemSet Catalog::getItemSetForCatalog()
                            Returns an ItemSet of the items in this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetForCategory</name>
                        <description>ItemSet Category::getItemSetForCategory(Catalog ctg [, Boolean ordered])
                            Returns an ItemSet of the items in this category. The option Boolean 'ordered' being
                            set to true makes the operation return the ordered children of this category if the
                            catalog is set up to use ordering
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetForPrimaryKeys</name>
                        <description>ItemSet Catalog::getItemSetForPrimaryKeys(Array pkeys, Boolean bOptimize)
                            Returns an ItemSet of the items in this catalog for the given primary keys - set
                            bOptimize to true if you don't plan on changing the items, the item set is then
                            optimized but these items don't keep track of changed attributes
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetForSelection</name>
                        <description>ItemSet Selection::getItemSetForSelection()
                            Return the items in that selection as a ItemSet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetForUnassigned</name>
                        <description>ItemSet Catalog::getItemSetForUnassigned(CategoryTree ctr, boolean
                            readOnly)
                            Returns an ItemSet of the items in this catalog which are not assigned to any of the
                            categories of given category tree
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSetSize</name>
                        <description>Integer ItemSet::getItemSetSize()
                            Returns the number of items in an item set
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemsInCategory</name>
                        <description>Item[] Catalog::getItemsInCategory(Category [, Boolean ordered])
                            Returns an array of the items in this category. The option Boolean 'ordered' being set
                            to true makes the operation return the ordered children of this category if the catalog
                            is set up to use ordering
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPrimaryCategoryTree</name>
                        <description>CategoryTree Catalog::getPrimaryCategoryTree()
                            Returns the primary category tree of this catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionAccessControlGroupName</name>
                        <description>String Selection::getSelectionAccessControlGroupName()
                            Returns the Access Control Group for this selection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionByName</name>
                        <description>Selection getSelectionByName(String sName)
                            Return the selection called sName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionCatalog</name>
                        <description>Catalog Selection::getSelectionCatalog()
                            Returns the selection's catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionHierarchy</name>
                        <description>Hierarchy Selection::getSelectionHierarchy()
                            Returns the selection's hierarchy.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionHierarchyNodeCount</name>
                        <description>Integer Selection::getSelectionHierarchyNodeCount()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns the number of hierarchy nodes in a selection - returns 0 for advanced</name>
                        <description>selections.</description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionItemCount</name>
                        <description>Integer Selection::getSelectionItemCount()
                            Returns the number of items in a selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionName</name>
                        <description>String Selection::getSelectionName()
                            Returns the name of this selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSelectionNamesList</name>
                        <description>String[] getSelectionNamesList(Catalog catalog)
                            Return the list of names of available selections for catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSequenceByName</name>
                        <description>Sequence getSequenceByName(String name)
                            Gets the sequence object with the corresponding name where name is defined by the
                            name of the catalog/category tree + "_" + "CTG" / "CATTREE" + "_" + the path of the
                            node the sequence is defined for.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSequenceCurrentValue</name>
                        <description>String Sequence::getSequenceCurrentValue()
                            Returns the current value of this sequence. This number is less than or equal to the
                            last preallocated value stored in the DB. Note, because of sequence caching, this
                            number will vary depending on the JVM. If the JVM has not called getNextValue, then
                            this method will return the last allocated value in the JVM. If the sequence row does
                            not exist in the DB, this method will reuturn -1.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSequenceNextValue</name>
                        <description>String Sequence::getSequenceNextValue()
                            Returns the next value of this sequence
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSourceCatalog</name>
                        <description>Catalog getSourceCatalog()
                            Returns the source catalog for catalog to catalog exports.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getVersionDate</name>
                        <description>Date Version::getVersionDate()
                            Returns the date of this version
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getVersionName</name>
                        <description>String Version::getVersionName()
                            Returns the name of this version
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getVersionType</name>
                        <description>String Version::getVersionType()
                            Returns the type of this version
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>hasAccessToPrivilegeForEntry</name>
                        <description>boolean Entry::hasAccessToPrivilegeForEntry(String priv_name)
                            Checks if the entry has access to the given privilege.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>hasCtgListPermission</name>
                        <description>Boolean Catalog::hasCtgListPermission()
                            Returns true if the current user has permission to list this catalog, false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>hasCtrListPermission</name>
                        <description>Boolean CategoryTree::hasCtrListPermission()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns true if the current user has permission to list this category tree, false</name>
                        <description>otherwise</description>
                        <list/>
                    </object>
                    <object>
                        <name>insertNewVersion</name>
                        <description>Version Container::insertNewVersion(String sName)
                            Add a version called sName on this container.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isEntryCheckedOutForPrimaryKey</name>
                        <description>Boolean Container::isEntryCheckedOutForPrimaryKey(String sPrimaryKey)
                            Returns true if the entry for the given primary key is checked out into a collaboration
                            area otherwise it returns false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isOrdered</name>
                        <description>Boolean Catalog::isOrdered()
                            Returns the value of catalog's Use Ordering attribute.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>linkCatalog</name>
                        <description>void Catalog::linkCatalog(Catalog dstCatalog, INode srcAttribute[, INode
                            dstAttribute])
                            Links catalog to another using source and destination attributes. The dstAttribute is
                            optional
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loadCatalog</name>
                        <description>void Catalog/CategoryTree::loadCatalog(String docStorePathForFileToLoad,
                            Spec fileSpec, SpecMap specMap, String feedType [itm|icm|ctr])
                            (Deprecated) This script operation has been deprecated and should not be used, and
                            is scheduled to be removed. Use createImport() and startAggregationByName()
                            instead. Loads data from the specified File Spec and Spec Map, into the catalog or
                            category tree upon which this operation is called. The feedType must be "itm" for item
                            to catalog feeds, "ctr" for category to category tree feeds, and "icm" for item to
                            category mapping feeds. WARNING: Transactional disruption will occur: This script
                            operation will rollback any existing transaction, undoing prior operations, and will
                            leave the database connection in autocommit mode. This script operation should be
                            used with caution - it should not be called in a catchError block for example.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$BasicSelection</name>
                        <description>new BasicSelection(Catalog catalog, String name)
                            Returns an empty basic selection (Selection) on catalog
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Catalog</name>
                        <description>new Catalog(Spec catalogSpec, String name, CategoryTree categoryTree
                            [,Hashmap optionalArgs])
                            Returns a new catalog with the given spec and name. Pass optional args in the map
                            with these keys "displayAttribute" (path of node), "accessControlGroup" (pass the
                            ACG object), "isLookupTable" (default is false--set to true to create a lookup table
                            and the Default Lookup Table Hierarchy is used as the category tree). If the
                            displayAttribute is not set, the pk attribute is used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$DynamicSelection</name>
                        <description>new DynamicSelection(String selectionName, String queryString)
                            Returns a dynamic selection named selectionName and corresponding to the query
                            queryString
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$LookupTable</name>
                        <description>new LookupTable(Spec spec, String name)
                            Returns a new lookuptable with the given spec and name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeLocationSpecificData</name>
                        <description>void Catalog::removeLocationSpecificData(CategoryTree ctr)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Sets up location specific data for a catalog. CTR is the category tree that contains the
                        </name>
                        <description>locations.</description>
                        <list/>
                    </object>
                    <object>
                        <name>resetContainerLocalesForRole</name>
                        <description>void Container::resetContainerLocalesForRole(Role role)
                            Deletes the locales that are allowed for this container specifically for the particular
                            role. After this the default list of locales for this role will be applicable.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCatalog</name>
                        <description>void Catalog::saveCatalog()
                            Saves this catalog. This is used to save new attributes that have been set on the
                            catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveSelection</name>
                        <description>void Selection::saveSelection()
                            Save the basic or advanced selection to the database
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAttributeGroupsToProcess</name>
                        <description>void Container::setAttributeGroupsToProcess(AttrGroup[] aAttrGroups)
                            Only retrieve attributes that belong to one of the attribute collections specified in the
                            list aAttrGroups for the given container
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCatalogAccessControlGroupName</name>
                        <description>void Catalog::setCatalogAccessControlGroupName(String acgName)
                            Sets the Access Control Group to the given name for this catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setContainerAttribute</name>
                        <description>void Container::setContainerAttribute(String sAttribName, String[]
                            sAttribValues)
                            Sets the value for the container attribute with sAttribName to the array of values
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setContainerLocalesForRole</name>
                        <description>void Container::setContainerLocalesForRole(Role role, String
                            localesCSVString)
                            Sets the locales that are allowed for this container for the particular role
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setContainerProperties</name>
                        <description>void Container::setContainerProperties(HashMap properties)
                            The properties specified in the PROPERTIES hashmap are set for the container in
                            question. The hashmap keys can be one of "PRE_SCRIPT_NAME",
                            "POST_SCRIPT_NAME", "POST_SAVE_SCRIPT_NAME",
                            "ENTRY_BUILD_SCRIPT", "DISPLAY_ATTRIBUTE",
                            "USER_DEFINED_CORE_ATTRIBUTE_GROUP", "SCRIPT_RESTRICT_LOCALES"
                            or "SCRIPT_NAME"(Deprecated). The values are required to be string names. The
                            value for "SCRIPT_RESTRICT_LOCALES" must be "true" or "false". Enforcement of
                            locale restrictions on script operations is based on the value of
                            "SCRIPT_RESTRICT_LOCALES". "SCRIPT_NAME" is now deprecated and
                            "POST_SCRIPT_NAME" should be used in its place.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDynamicSelectionQueryString</name>
                        <description>void DynamicSelection::setDynamicSelectionQueryString(String queryString)
                            Sets the query string for this dynamic selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemSetFetchLinkedItems</name>
                        <description>void ItemSet::setItemSetFetchLinkedItems(Boolean b)
                            Sets the item set to fetch or not fetch master linked items
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemSetFetchSize</name>
                        <description>void ItemSet::setItemSetFetchSize(Integer i)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Sets the item set fetch size (i.e. the number of items gotten in bulk each time)</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>setOrdered</name>
                        <description>Boolean Catalog::setOrdered(Boolean bOrder)
                            Alters the catalog to allow ordering or not. Returns a flag on whether the update is
                            successful or not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setSelectionAccessControlGroupName</name>
                        <description>void Selection::setSelectionAccessControlGroupName(String acgName)
                            Sets the Access Control Group to the given name for this selection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setSelectionHierarchy</name>
                        <description>void Selection::setSelectionHierarchy(Hierarchy hier)
                            Sets the selection's hierarchy. Only applicable to basic selections
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setSelectionName</name>
                        <description>void Selection::setSelectionName(String name)
                            Returns the name of this selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setSequenceValueForMigration</name>
                        <description>void setSequenceValueForMigration(String sequenceName, String objName,
                            String objType, Integer newValue)
                            This operation is only there for migration of environments. Do not use for any other
                            purpose.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sortItemSet</name>
                        <description>void ItemSet::sortItemSet()
                            Sorts the ItemSet for performance
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_category</name>
                <description></description>
                <list>
                    <object>
                        <name>addCategoryTreeMapping</name>
                        <description>void CategoryTreeMap::addCategoryTreeMapping(Category cat1, Category
                            cat2)
                            Add a map between the two categories cat1 and cat2
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addChildCategory</name>
                        <description>Boolean Category::addChildCategory(Category childCategory)
                            Adds childCategory as a child of this category
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addItemSecondarySpecToCategory</name>
                        <description>void Category::addItemSecondarySpecToCategory(String sSpecName,
                            [Catalog[] ctgs])
                            Associates a secondary item spec to this Category - if ctgs are passed, only those
                            catalogs are affected by the spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addSecondarySpecToCategory</name>
                        <description>void Category::addSecondarySpecToCategory(String sSpecName, [Boolean
                            bAdd])
                            Associates a secondary spec defining this categories attrs. The optional parameters
                            allows for the Spec to be associated with the category but does not build out the
                            EntryNode structure, useful to improve performance on imports
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildCategory</name>
                        <description>Category CategoryTree::buildCategory(String path, [String delimiter], [String
                            primaryKey])
                            Returns a new category object when given the complete path of the new category
                            and the delimiter that separates the categories in the path. If the delimiter is not
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>specified, it defaults to '/' (except if a filespec is used during an import). If the
                            primary
                        </name>
                        <description>key is not specified, then it should either be automatically set via a sequence or
                            value
                            rule, or it should be set after creation. If used in workflows and the category path
                            already exists in the source category tree, the category will be checked out.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteCategory</name>
                        <description>Boolean Category::deleteCategory()
                            Deletes this category from it's category tree
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteCategoryTree</name>
                        <description>ValidationError[] deleteCategoryTree(CategoryTree ctr)
                            Delete the category tree ctr. Returns Validation Error array if any validation errors
                            occured. Null if successful. WARNING: Transactional disruption will occur: This script
                            operation will roll back any existing transaction, and will leave the database
                            connection in auto-commit. This script operation should be used carefully; for
                            example, it should not be called in a catchError block.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachCategorySetElement</name>
                        <description>forEachCategorySetElement(CategorySet categorySet, Object oCategory) {
                            statements }
                            Executes the statements for each (oCategory) in the categorySet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryAttrib</name>
                        <description>Object Category::getCategoryAttrib(String sAttribPath)
                            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
                            category
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryByPath</name>
                        <description>Category CategoryTree::getCategoryByPath (String sNamePath, String sDelim
                            [, boolean bLight, boolean bReadOnly])
                            Returns the category with a full name path equivalent to sNamePath. sNamePath is
                            expected to be delimited by sDelim. sNamePath should not contain the name of the
                            root category, since we are already restricted to a spcific category tree. If bLight is
                            true, not all data for the category is retrieved. If bReadOnly is true, a read only copy
                            of the category is retrieved - bReadOnly should be used in exports, for example
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryByPathNoCfp</name>
                        <description>Category CategoryTree::getCategoryByPathNoCfp (String sNamePath, String
                            sDelim [, boolean bLight, boolean bReadOnly])
                            Returns the category with a full name path equivalent to sNamePath. sNamePath is
                            expected to be delimited by sDelim. sNamePath should not contain the name of the
                            root category, since we are already restricted to a spcific category tree. If bLight is
                            true, not all data for the category is retrieved. If bReadOnly is true, a read only copy
                            of the category is retrieved - bReadOnly should be used in exports, for example
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryCache</name>
                        <description>CategoryCache CategoryTree::getCategoryCache(Integer size, Boolean
                            get_all_categories)
                            Returns a CategoryCache for this CategoryTree. The cache will be empty if
                            get_all_categories is false and the size will be the given size, or 100, whichever is the
                            greater. If get_all_categories is true then the cache will contain all the categories for
                            the given category tree and the size arguments will be ignored. The size of the cache
                            in the latter case will be the greater of the number of categories in the tree or 100
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryChildren</name>
                        <description>Category[] Category::getCategoryChildren([Boolean ordered, Catalog catalog,
                            Boolean restrictToSubtreeWithItems])
                            Returns the categories immediately below this category. The option Boolean 'ordered'
                            being set to true makes the operation return the ordered children of this category if
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>the catalog (if not specified, the default catalog) is set up to use ordering. The
                            option
                        </name>
                        <description>restrictToSubtreeWithItems being set to true only returns categories that have
                            items
                            in their sub-trees
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryChildrenUsingCache</name>
                        <description>Category[] Category::getCategoryChildrenUsingCache (CategoryCache
                            cat_cache)
                            Returns this category's children, possibly making use of the cache provided
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryCode</name>
                        <description>String Category::getCategoryCode()
                            Returns the code of this category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryHasChildren</name>
                        <description>Boolean Category::getCategoryHasChildren()
                            Returns true if the category has children.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryLevels</name>
                        <description>Integer[] Category::getCategoryLevels()
                            Returns the levels of this category in an array of Integers.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryOrganizations</name>
                        <description>Organization[] Category::getCategoryOrganizations()
                            Return the all organizations this category is mapped to,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryParent</name>
                        <description>Category Category::getCategoryParent ([CategoryCache cat_cache])
                            Returns this category's parent. If there are multiple parents, only the first one is
                            returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryParents</name>
                        <description>Category[] Category::getCategoryParents ()
                            Returns the parent categories of this Category
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryParentsUsingCache</name>
                        <description>Category[] Category::getCategoryParentsUsingCache (CategoryCache
                            cat_cache)
                            Returns this category's parents, possibly making use of the cache provided
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySet</name>
                        <description>CategorySet CategoryTree::getCategorySet([Boolean bReadonly])
                            Returns a CategorySet for this CategoryTree.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByAttributeValue</name>
                        <description>CategorySet CategoryTree::getCategorySetByAttributeValue(String attribPath,
                            Object attribValue, [Boolean bReadOnly])
                            Returns a CategorySet with all categories in the category tree which have the given
                            AttribPath and AttribValue. Use "" or null AttribValue for searching EMPTY values. An
                            exception is thrown if the attribPath is for non indexed attribute.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByFullNamePath</name>
                        <description>CategorySet CategoryTree::getCategorySetByFullNamePath(String[]
                            fullNamePaths, String delimiter )
                            Returns an CategorySet of the categories in the category tree from the given full
                            name paths. Do not include the category tree name in the full name paths
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByItemSecondarySpec</name>
                        <description>CategorySet CategoryTree::getCategorySetByItemSecondarySpec(String
                            specName)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns an CategorySet that is a subset of the categories of this tree having the</name>
                        <description>specified spec in their item secondary spec list</description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByLevel</name>
                        <description>CategorySet CategoryTree::getCategorySetByLevel(Integer level, [Boolean
                            bReadOnly])
                            Returns an CategorySet of the categories in the category tree at a particular level
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByPrimaryKey</name>
                        <description>CategorySet CategoryTree::getCategorySetByPrimaryKey(String primaryKey,
                            [Boolean bReadOnly])
                            Returns a CategorySet with the categories in the category tree which have match the
                            primary key
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetByStandAloneSpec</name>
                        <description>CategorySet CategoryTree::getCategorySetByStandAloneSpec(String
                            specName)
                            Returns an CategorySet that is a subset of the categories of this tree having the
                            specified spec in their stand alone spec list
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategorySetSize</name>
                        <description>Integer CategorySet::getCategorySetSize()
                            Returns the number of categories in a category set
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTree</name>
                        <description>CategoryTree Category::getCategoryTree()
                            Returns the category tree object this category belongs to. Use
                            getCategoryTreeByName() to get the category tree being used for an
                            aggregation/syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTreeByName</name>
                        <description>CategoryTree getCategoryTreeByName([String name])
                            Returns the category tree object with the corresponding name. If name is not
                            provided, return the category tree being used for the aggregation/syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTreeMap</name>
                        <description>CategoryTreeMap getCategoryTreeMap(CategoryTree ctr1, CategoryTree ctr2)
                            Returns the category tree map between the two category trees ctr1 and ctr2
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTreeName</name>
                        <description>String CategoryTree::getCategoryTreeName()
                            Returns the name of this categoryTree.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTreeNamesList</name>
                        <description>String[] getCategoryTreeNamesList([String filterByPrivilege])
                            Return the list of names of available category trees filtered by category tree privileges
                            LIST (list category tree), VIEW_ITEMS (view items in category tree),
                            MODIFY_CATEGORY_ATTRIBUTES (modify category attributes in category tree).
                            By default the category tree names for the category tree with LIST privilege access
                            are returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategoryTreeSpec</name>
                        <description>Spec CategoryTree::getCategoryTreeSpec()
                            Returns the spec of this category tree
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrentLocation</name>
                        <description>ICategory getCurrentLocation()
                            Returns the category that identifies the current location if the script is running the
                            context of a location
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultCategoryTreeName</name>
                        <description>(deprecated) String getDefaultCategoryTreeName()
                            See getCategoryTreeByName(). Returns the name of the category tree being used
                            for an aggregation/syndication. Use getCategoryTreeByName() to get the category
                            tree being used for the aggregation/syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDescendentCategorySetForCategory</name>
                        <description>CategorySet Category::getDescendentCategorySetForCategory([Boolean
                            bReadonly])
                            Returns a CategorySet consisting of all the descendents of this category
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryPosition</name>
                        <description>Integer Category::getEntryPosition(Catalog ctg, Entry child)
                            Allows users to get the position of a child Entry within a parent category. This will only
                            work in an ordered catalog. Returns the position (if it works) or null (if it fails).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFullPaths</name>
                        <description>String[] Category::getFullPaths ([String sDelimiter], [boolean bWithRootName])
                            Returns the full name paths of this Category, using the sDelimiter as the delimiter if
                            provided. The full path returned includes the root categories name if bWithRootName
                            is true.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHierarchyType</name>
                        <description>String Hierarchy::getHierarchyType()
                            Returns the type of the hierarchy. Types can be one of the following:
                            CATEGORY_TREE, ORGANIZATION_TREE, COLLABORATION_AREA
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSecondarySpecsForCategory</name>
                        <description>Spec[] Category::getItemSecondarySpecsForCategory([Catalog ctg])
                            Returns the item secondary specs associated with this category
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMappedCategories</name>
                        <description>Category[] Category::getMappedCategories(CategoryTree ctr)
                            Returns the categories in ctr (if any) to which this category is mapped
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPathValue</name>
                        <description>String Category::getPathValue()
                            Returns the path attribute value of this category. Note, this is not the full path.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSecondarySpecsForCategory</name>
                        <description>Spec[] Category::getSecondarySpecsForCategory()
                            Returns the secondary specs defining this categories attrs
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mapCategoryToOrganizations</name>
                        <description>void Category::mapCategoryToOrganizations(Category[] categories [, boolean
                            bAdd])
                            Maps the category to all the organizations provided. If bAdd is true, the old mappings
                            are added to otherwise they are overwritten to be the new set of organizations
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Category</name>
                        <description>new Category(CategoryTree ctr, String path, [String delimiter], [String
                            primaryKey]
                            Returns a new category object when given the complete path of the new category
                            and the delimiter that separates the categories in the path. If the delimiter is not
                            specified, it defaults to '/' (except if a filespec is used during an import). If the
                            primary
                            key is not specified, then it should either be automatically set via a sequence or value
                            rule, or it should be set after creation. If used in workflows and the category path
                            already exists in the source category tree, the category will be checked out.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CategoryTree</name>
                        <description>new CategoryTree(Spec spec, String name [,HashMap optionalArgs]])
                            Returns a new category tree with the given primary spec and name. Pass optional
                            args in the map with these keys "useInheritance" (default is false), "displayAttribute"
                            (Node object), "pathAttribute" (Node object), "accessControlGroup" (pass the ACG
                            object), "isOrganizationTree" (default is false--set to true to create an organization
                            tree). If the pathAttribute is not set, the primary key will be used. If the
                            displayAttribute
                            is not set, the pathAttribute is used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeCategoryTreeMapping</name>
                        <description>void CategoryTreeMap::removeCategoryTreeMapping(Category cat1, Category
                            cat2)
                            Remove a map between the two categories cat1 and cat2
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeChildCategory</name>
                        <description>void Category::removeChildCategory(String categoryName)
                            Remove childCategory from this categorie's children. Only allowed if childCategory
                            has at least another parent.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeItemSecondarySpecFromCategory</name>
                        <description>void Category::removeItemSecondarySpecFromCategory(String sSpecName))
                            Disassociates a secondary item spec to from this Category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeSecondarySpecFromCategory</name>
                        <description>void Category::removeSecondarySpecFromCategory(String sSpecName))
                            Disassociates a secondary spec defining this categories attrs.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reorderEntry</name>
                        <description>Integer Category::reorderEntry(Catalog ctg, Entry child, Integer position [,
                            Boolean bInsertBefore])
                            Allows users to adjust the ordering of a child Entry within a parent category in catalog
                            ctg. Entry child is moved before (bInsertBefore=true) or after (bInsertBefore=false)
                            the position (zero is the first element) specified. Returns the ordered entry id (if it
                            works) or null (if it fails). This method should not be used in conjunction with a
                            transaction. The Boolean flag is optional and if not specified defaults to true.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCategoryTree</name>
                        <description>ValidationError[] CategoryTree::saveCategoryTree ()
                            Saves this category tree. DO NOT USE in AGGREGATION if you are in a
                            item-to-category feed or a category tree feed. The category tree you are aggregating
                            to gets saved automatically at the end of an aggregation. However, if you side affect
                            another category tree, then call this operation to capture the changes you made.
                            Returns Validation Error array if any validation errors occured. Null if successful
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCategoryTreeMap</name>
                        <description>void CategoryTreeMap::saveCategoryTreeMap()
                            Save this category tree map
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCategoryAttrib</name>
                        <description>void Category::setCategoryAttrib(String sAttribPath, Object sValue)
                            Sets the attribute sAttribPath (spec_name/attribute_name) of this category to sValue
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCategoryCacheFetchSize</name>
                        <description>void CategoryCache::setCategoryCacheFetchSize(Integer i)
                            Sets the category cache fetch size (i.e. the number of categories gotten in bulk each
                            time). This is only applicable if the category cache is associated with an ItemSet.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_col_area</name>
                <description></description>
                <list>
                    <object>
                        <name>addEntryIntoColArea</name>
                        <description>boolean CollaborationArea::addEntryIntoColArea(Entry entry, String stepPath )
                            Used for importing new items into a collaboration area. This script operation will post
                            a message to add the newly constructed entry to the given stepPath of the
                            collaboration area. Returns a boolean. If the entry exists in the collaboration area or
                            the source catalog, false will be returned. True indicates the message was
                            successfully posted. The import will occur after the current transaction is committed.
                            This operation returns false if the entry is a category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>checkOutEntries</name>
                        <description>HashMap CollaborationArea::checkOutEntries(EntrySet entrySet, [String
                            stepPath], [boolean waitForStatus)
                            Checks out the entries in the entrySet into the collaboration area. If stepPath is not
                            specified the entries will be checked-out into the Initial step. If waitForStatus is true,
                            the checkout will take place immediately and the statuses will be returned. Otherwise
                            the checkout will not take place immediately, instead a message will be posted to
                            perform the operation after the current transaction is committed. Returns a HashMap
                            of entry primary key to the status of the checkout (or null if waitforStatus is false).
                            Checkout status could be one of the following: CHECKOUT_SUCCESSFUL,
                            CHECKOUT_FAILED, ALREADY_CHECKED_OUT, ENTRY_LOCKED and
                            ATTRIBUTE_LOCKED. ATTRIBUTE_LOCKED indicates one or more attributes
                            required for that collaboration area are checked out to another collaboration area.
                            waitForStatus is false by default.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>checkOutEntry</name>
                        <description>HashMap CollaborationArea::checkOutEntry(Entry entry, [String stepPath],
                            [boolean waitForStatus)
                            Checks out the entry into the collaboration area. If stepPath is not specified the entry
                            will be checked-out into the Initial step. If waitForStatus is true, the checkout will take
                            place immediately and the status will be returned. Otherwise the checkout will not
                            take place immediately, instead a message will be posted to perform the operation
                            after the current transaction is committed. Returns a HashMap of entry primary key to
                            the status of the checkout (or null if waitforStatus is false). Checkout status could be
                            one of the following: CHECKOUT_SUCCESSFUL, CHECKOUT_FAILED,
                            ALREADY_CHECKED_OUT, ENTRY_LOCKED and ATTRIBUTE_LOCKED.
                            ATTRIBUTE_LOCKED indicates one or more attributes required for that collaboration
                            area are checked out to another collaboration area. waitForStatus is false by default.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>dropEntries</name>
                        <description>void CollaborationArea::dropEntries(EntrySet entrySet)
                            Posts a message to drop the entries in the entrySet from the collaboration area and
                            to unlock the attributes which were locked in the source container for those entries.
                            The drop will not take place until after the current transaction has committed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>dropEntry</name>
                        <description>void CollaborationArea::dropEntry(Entry entry)
                            Posts a message to drop the entry from the collaboration area and to unlock the
                            attributes which were locked in the source container for that entry. The drop will not
                            take place until after the current transaction has committed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaAdminRoles</name>
                        <description>String[] CollaborationArea::getColAreaAdminRoles()
                            Returns the admin role names for the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaAdminUsers</name>
                        <description>String[] CollaborationArea::getColAreaAdminUsers()
                            Returns the admin user names for the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaByName</name>
                        <description>CollaborationArea getColAreaByName(String colAreaName)
                            Return a collaboration area object if exists otherwise null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaContainer</name>
                        <description>Container CollaborationArea::getColAreaContainer()
                            Returns the collaboration area as a container.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaEntryHistory</name>
                        <description>ColAreaEntryHistory[] getColAreaEntryHistory(String colAreaName, String
                            wflName, String primaryKey)
                            Return the entire history of the entry in the given collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryByTimePeriod</name>
                        <description>ColAreaEntryHistory[] getColAreaHistoryByTimePeriod(String colAreaName,
                            Date beginDate, Date endDate)
                            Return the entire history given collaboration area for the given time period.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryDate</name>
                        <description>Date ColAreaEntryHistory::getColAreaHistoryDate()
                            Returns the date for the given collaboration area history event.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryEntryKey</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryEntryKey()
                            Returns the entry key for the given collaboration area history event.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryEventAttribute</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryEventAttribute(String attrName)
                            Returns the attribute value for the given collaboration area history event type attribute
                            name. attrName could be one of the following: COMMENT, EXIT_VALUE,
                            ENTRY_DIFFERENCES
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryEventType</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryEventType()
                            Returns the event type for the given collaboration area history event. Event types
                            could be one of the following: CHECKOUT, CHECKIN, BEGINSTEP, ENDSTEP,
                            SAVEENTRY, DROP, TIMEOUT.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryStepPath</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryStepPath()
                            Returns the step path for the given collaboration area history event.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryUser</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryUser()
                            Returns the username for the given collaboration area history event.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaHistoryWorkflow</name>
                        <description>String ColAreaEntryHistory::getColAreaHistoryWorkflow()
                            Returns the workflow name for the given collaboration area history event.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaId</name>
                        <description>int CollaborationArea::getColAreaId()
                            Returns the internal Id for the Collaboration Area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaName</name>
                        <description>String CollaborationArea::getColAreaName()
                            Returns the name of the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaNames</name>
                        <description>String[] getColAreaNames()
                            Returns all of the Collaboration Area Names for the current Company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaNamesForRole</name>
                        <description>String[] getColAreaNamesForRole(String role_name)
                            Returns a list of collaboration area names that are applicable to a particular role.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaNamesForUser</name>
                        <description>String[] getColAreaNamesForUser()
                            Returns a list of collaboration area names that are applicable to the user.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaSrcContainer</name>
                        <description>Container CollaborationArea::getColAreaSrcContainer()
                            Returns the source container which this collaboration area is tied to.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaStepHistory</name>
                        <description>ColAreaEntryHistory[] getColAreaStepHistory(String colAreaName, String
                            wflName, String stepPath)
                            Return the entire history of the step in the given collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getColAreaWorkflow</name>
                        <description>Workflow CollaborationArea::getColAreaWorkflow()
                            Returns the workflow which this collaboration area is tied to.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCountOfEntriesInColArea</name>
                        <description>int CollaborationArea::getCountOfEntriesInColArea()
                            Returns the entries currently in ALL the steps of the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCountOfEntriesInColAreaStep</name>
                        <description>int CollaborationArea::getCountOfEntriesInColAreaStep(String stepPath)
                            Returns the entries currently in the given stepPath of the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntries</name>
                        <description>EntrySet CollaborationArea::getEntries()
                            Returns the entry set for the entries currently in the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntriesInfoXMLInStep</name>
                        <description>String CollaborationArea::getEntriesInfoXMLInStep(String stepName,HashMap
                            itemSet, HashMap hmAttrPaths[, int entriesCount,String dateFormat])
                            Returns xml representation of workflow step entries for the given step name. The
                            dateFormat is used for formating the date values. The attribute information of
                            attributes present in the hmAttrPaths are included in the xml.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntriesInStep</name>
                        <description>EntrySet CollaborationArea::getEntriesInStep(String stepPath)
                            Returns the entry set for the entries currently in the step of the collaboration area.
                            The format of the stepPath is Stepname
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryInStep</name>
                        <description>Entry CollaborationArea::getEntryInStep(String stepPath)
                            Returns one entry that is currently in the step of the collaboration area, if there is at
                            least one. If there is more than one entry currently in the step, then it is undetermined
                            which particular one will be returned by a call to this operation. The format of the
                            stepPath is Stepname
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemsInStepByAttribute</name>
                        <description>HashMap CollaborationArea::getItemsInStepByAttribute(String
                            stepName,String searchAttributePath,String searchAttrValue,String
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sSortColumn[,boolean isAscending,int startIndex, int endIndex,String</name>
                        <description>categoryPKList])
                            Returns a HashMap of items for the current pagination with the key ITEMSET and
                            total no of matched items with the key ITEMCOUNT. By default isAscending is taken
                            as true. startIndex as 0 and endIndex as total number of resultant items.
                            categoryPKList is optional argument having comma separated list of category primary
                            key for example :'1','3','7' . It is used for filtering items
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemsInStepBySelection</name>
                        <description>HashMap CollaborationArea::getItemsInStepBySelection(String
                            stepName,String selectionString,String sSortColumn[,boolean isAscending,int
                            startIndex, int endIndex])
                            Returns a HashMap of items for the current pagination with the key ITEMSET and
                            total no of matched items with the key ITEMCOUNT. By default isAscending is taken
                            as true. startIndex as 0 and endIndex as total number of resultant items.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemSubset</name>
                        <description>ItemSet CollaborationArea::getSubset(IItemSet items, Integer start_point [,
                            Integer end_point])
                            Returns an IItemSet which is a subset cloned from the supplied IItemSet restrained
                            by start and optional end index positions. A start point of -1 is interpreted as 0. If the
                            end index is omitted, all items are retrieved from the start point.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getReservedEntriesInStep</name>
                        <description>EntrySet CollaborationArea::getReservedEntriesInStep(String stepPath)
                            Returns the entry set for the reserved entries currently in the step of the collaboration
                            area. The format of the stepPath is Stepname
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStepEntryTimeout</name>
                        <description>Date CollaborationArea::getStepEntryTimeout(Entry entry, String stepPath)
                            Expects the given entry to actually be in the given collaboration area's specified
                            stepPath. If the entry's really there, the script op returns the moment in time when it
                            will time out. If any of the assumptions are not met (collaboration area has no such
                            stepPath, entry not in that stepPath, etc.), the operation simply does nothing, i.e. no
                            Exception thrown. The operation doesn't modify the collaboration area's underlying
                            workflow at all. It should be thought of as operating on an entry in a collaboration
                            area, that is expected to be in a particular stepPath at the moment in time when the
                            op is executed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStepsForEntry</name>
                        <description>String[] CollaborationArea::getStepsForEntry(Entry entry)
                            Returns all the steps that the entry is currently in for the given collaboration area. The
                            return values is a string array containing the stepPaths. Entry should be retrieved
                            using Collaboration Area as Container.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUsernameForReservedEntryInStep</name>
                        <description>String CollaborationArea::getUsernameForReservedEntryInStep(Entry entry,
                            String stepPath)
                            Returns the username of the user who locked the entry in a wfl step for a given
                            collaboration area, otherwise it returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepsForRole</name>
                        <description>String[][] CollaborationArea::getWflStepsForRole(String roleName)
                            Returns workflow step paths along with the number of entries in it for which the role
                            has access.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepsForUser</name>
                        <description>String[][] CollaborationArea::getWflStepsForUser()
                            Returns workflow step paths along with the number of entries in it for which the user
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>has access.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepsXML</name>
                        <description>String CollaborationArea::getWflStepsXML([String roleName])
                            Returns xml representation of workflow steps accessible by the given role name. if
                            role name is not provided the xml representation of workflow steps accessible by the
                            current user is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepsXMLByAttrValue</name>
                        <description>String CollaborationArea::getWflStepsXMLByAttrValue(String attrPath, String
                            attrValue[, String roleName])
                            Returns xml representation of workflow steps accessible by the given role name. if
                            role name is not provided the xml representation of workflow steps accessible by the
                            current user is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isColAreaLocked</name>
                        <description>Boolean CollaborationArea::isColAreaLocked()
                            Returns true if the collaboration area is locked, otherwise it returns false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isEntryReserved</name>
                        <description>Boolean CollaborationArea::isEntryReserved(IEntry entry)
                            Returns true if the entry is reserved in a given collaboration area, otherwise it returns
                            false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isEntryReservedInStep</name>
                        <description>Boolean CollaborationArea::isEntryReservedInStep(IEntry entry, String
                            stepPath)
                            Returns true if the entry is reserved in a wfl step for a given collaboration area,
                            otherwise it returns false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>lockColArea</name>
                        <description>Boolean CollaborationArea::lockColArea()
                            Locks the Collaboration Area so that no more entries can be checked out into it.
                            Returns true or false depending on whether the lock was successfully applied or not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveEntriesToColArea</name>
                        <description>boolean CollaborationArea::moveEntriesToColArea(EntrySet entrySet, String
                            destColAreaName)
                            Applies to items only. Moves the entrySet of entries in the collaboration area to
                            another collaboration area. destColAreaName specifies the name of the destination
                            collaboration area, into whose Initial step the entries will be checked into. This
                            operation is asynchronous which means a message is posted to complete the move
                            at some time after the current transaction is committed. Returns a boolean depending
                            on whether the message to move the entry was successfully posted. Returns false if
                            any of the entries are categories.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveEntriesToNextStep</name>
                        <description>HashMap CollaborationArea::moveEntriesToNextStep(EntrySet entrySet, String
                            stepPath, String exitValue)
                            Posts a message to move the entries in the entrySet from the specified stepPath to
                            the next step for the given exitValue. Returns a map of Entry primary key to String of
                            validation errors. Only valid entries are moved to the next step. The move will not
                            take place until after the current transaction has committed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveEntryToColArea</name>
                        <description>boolean CollaborationArea::moveEntryToColArea(Entry entry, String
                            destColAreaName)
                            Applies to items only. Moves the entrySet of entries in the collaboration area to
                            another collaboration area. destColAreaName specifies the name of the destination
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>collaboration area, into whose Initial step the entries will be checked into. This</name>
                        <description>operation is asynchronous which means a message is posted to complete the move
                            at some time after the current transaction is committed. Returns a boolean depending
                            on whether the message to move the entry was successfully posted. Returns false if
                            the entry was a category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveEntryToNextStep</name>
                        <description>HashMap CollaborationArea::moveEntryToNextStep(Entry entry, String
                            stepPath, String exitValue)
                            Posts a message to move the entry from the specified stepPath to the next step for
                            the given exitValue. Returns a map of Entry primary key to String of validation errors.
                            Only valid entries are moved to the next step. The move will not take place until after
                            the current transaction has committed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CollaborationArea</name>
                        <description>new CollaborationArea(String colAreaName, Workflow wfl, Container
                            srcContainer)
                            Create a new collaboration area with the given name, wfl and srcContainer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>publishEntriesToSrcContainer</name>
                        <description>boolean CollaborationArea::publishEntriesToSrcContainer(EntrySet entrySet)
                            Posts a message to publish the current attribute values for each entry in the entrySet
                            in the collaboration area back to the source catalog or category tree, leaving those
                            entries which are able to be published out to the source container unchanged and
                            undisturbed in the collaboration area. Entries which cannot, for whatever reason, be
                            published out to the source container will be moved to the Fixit step. This is also
                            known as an interim checkin. The publish will occur after the current transaction
                            completes. Returns a boolean. True indicates that the entire entrySet was valid and a
                            publish message was successfully posted.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>releaseEntryInStep</name>
                        <description>Boolean CollaborationArea::releaseEntryInStep(Entry entry, String stepPath)
                            Returns true if the entry was unlocked in a wfl step for a given collaboration area,
                            otherwise it returns false. Operation runs synchronously.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reserveEntryInStep</name>
                        <description>Boolean CollaborationArea::reserveEntryInStep(IEntry entry, String stepPath,
                            [String username])
                            Returns true if the entry was reserved in a wfl step for a given collaboration area,
                            otherwise it returns false. Operation runs synchronously.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>runStepJob</name>
                        <description>void CollaborationArea::runStepJob(EntrySet entrySet, String stepPath, String
                            jobName, String jobType, Date date [, String username])
                            entrySet is an arbitrary EntrySet whose elements are expected to be in the workflow
                            step specified by stepPath. jobName is the name of an existing job. jobType is either
                            "IMPORT" or "EXPORT". date specifies the time of a one-time run. The optional
                            username specifies the User in whose name the job will be run. Default is the User
                            who created the job. When the job finishes, if it completes ok, the
                            "JOB_SUCCESSFUL" exit value will be set on the elements of entrySet and an
                            EndStep event posted. If it completes with error, the "JOB_FAILED" exit value will be
                            set on elements of entrySet and a EndStep event posted. No harm done if the
                            elements of entrySet are not in stepPath (but are still in the Collaboration Area): the
                            EndStepEvent posted when the job finishes presumably will be meaningless and
                            harmless. If one or more of the elements of entrySet are no longer in the
                            Collaboration Area: they will be excluded from the entrySet of the posted
                            EndStepEvent. If no elements of entrySet are still in the CollaborationArea, no
                            EndStepEvent will be posted.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveColArea</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>void CollaborationArea::saveColArea()</name>
                        <description>Saves the collaboration area.</description>
                        <list/>
                    </object>
                    <object>
                        <name>setColAreaAccessControlGroup</name>
                        <description>void CollaborationArea::setColAreaAccessControlGroup(String acgName)
                            Sets the Access Control Group to the given name for this collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setColAreaAdminRoles</name>
                        <description>void CollaborationArea::setColAreaAdminRoles(String[] roles)
                            Sets the admin roles for the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setColAreaAdminUsers</name>
                        <description>void CollaborationArea::setColAreaAdminUsers(String[] users)
                            Sets the admin users for the collaboration area.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStepEntryTimeout</name>
                        <description>void CollaborationArea::setStepEntryTimeout(Entry entry, String stepPath, Date
                            date)
                            Expects the entry to actually be in the given collaboration area's specified stepPath.
                            Provided the entry is found to actually be in the step, its timeout is set to be the
                            moment in time specified by the date argument. If any of the assumptions are not met
                            (collaboration area has no such stepPath, entry are not in that stepPath, etc.), the
                            operation simply does nothing, i.e. no Exception thrown. The operation doesn't
                            modify the collaboration area's underlying workflow at all. It should be thought of as
                            operating on an entry in a collaboration area, that is expected to be in a particular
                            stepPath at the moment in time when the op is executed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>unlockColArea</name>
                        <description>Boolean CollaborationArea::unlockColArea()
                            Unlocks the Collaboration Area so that entries can be checked out into it again.
                            Returns true or false depending on whether the unlock was successful or not.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_ctgaccprv</name>
                <description></description>
                <list>
                    <object>
                        <name>getCtgAccessPrvByRole</name>
                        <description>CtgAccessPrv Container::getCtgAccessPrvByRole(String sRoleName)
                            Returns the catalog access privilege for the catalog and role. Returns catalog access
                            privilege with full access if none was found.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgAccessPrvPermission</name>
                        <description>String CtgAccessPrv::getCtgAccessPrvPermission(String
                            attributeCollectionName)
                            Returns the permission [E-editable|V-viewable] for the given attribute collection in the
                            current catalog access prv.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CtgAccessPrv</name>
                        <description>new CtgAccessPrv(Container container, String roleName)
                            Builds a new ctg access privilege object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCtgAccessPrv</name>
                        <description>Boolean CtgAccessPrv::saveCtgAccessPrv()
                            Saves the current catalog access prv to the database
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAccessPrv</name>
                        <description>Boolean CtgAccessPrv::setAccessPrv(String attrGroupName, String
                            permission)
                            Returns an access privilege object with the new permissions set for the
                            attrGroupName. Permission is [V|E|null], and in case the permission is NULL the path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>is removed from the access Privilege. Returns TRUE if successful, FALSE if not</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgAccessPrv</name>
                        <description>CtgAccessPrv CtgAccessPrv::setCtgAccessPrv(String[] attrGroups, String[]
                            permissions)
                            Returns a catalog access privilege object with the permissions set according to the
                            attribute collections. Permissions are [V|E]
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_ctgview</name>
                <description></description>
                <list>
                    <object>
                        <name>addCtgTab</name>
                        <description>void CtgView::addCtgTab(CtgTab tab)
                            Add container tab object to the catalog view. The tab is added to the end of the list of
                            tabs already defined for the container ctg view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteCtgView</name>
                        <description>void deleteCtgView(CtgView ctgView)
                            Delete the catalog view ctgView.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgTabAttrGroupsList</name>
                        <description>String[] CtgTab::getCtgTabAttrGroupsList()
                            Returns a list of ordered attribute collections for the catalog view tab.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgTabByName</name>
                        <description>CtgTab CtgView::getCtgTabByName(String name)
                            Returns the tab with the given name, or null if there is no such tab.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgTabName</name>
                        <description>String CtgTab::getCtgTabName()
                            Returns the name of the tab.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgTabRow</name>
                        <description>CtgTabRow[] CtgTab::getCtgTabRow()
                            get the set of rows in the current container tab object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgTabs</name>
                        <description>CtgTab[] CtgView::getCtgTabs()
                            Returns an ordered array of container tab objects for the particular container view
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgViewAttrGroupsList</name>
                        <description>String[] CtgView::getCtgViewAttrGroupsList()
                            Returns list of ordered attribute collections for the catalog view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgViewAttribsList</name>
                        <description>String[] CtgView::getCtgViewAttribsList()
                            Returns list of ordered attribute paths for the catalog view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgViewByName</name>
                        <description>CtgView Container::getCtgViewByName([String viewName, String viewType])
                            Returns the view with the corresponding name. If no name is specified, returns the
                            default view. Use '[System Default]' to refer to the default view. The viewType can be
                            'ITEM_LIST', 'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT', 'ITEM_EDIT',
                            'CATEGORY_EDIT' or 'CATEGORY_BULK_EDIT'. By default
                            ITEM_EDIT/CATEGORY_EDIT is used. If the view is not found, it returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgViewPermission</name>
                        <description>String CtgView::getCtgViewPermission(String attrGroupName)
                            Returns the permission [E-editable|V-viewable] for the attribute collection name in the
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>current view.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgViewType</name>
                        <description>String CtgView::getCtgViewType()
                            Returns the type of the view in question as a string. The values can be 'ITEM_LIST',
                            'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT',
                            'CATEGORY_BULK_EDIT', 'HIERARCHY_RICH_SEARCH', 'ITEM_RICH_SEARCH'
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrentCtgViewName</name>
                        <description>String getCurrentCtgViewName()
                            Returns name of current catalog view (only in Data Entry scripts). Returns an empty
                            string outside of the Data Entry scripts.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultCtgViewName</name>
                        <description>String Catalog::getDefaultCtgViewName()
                            Returns name of default catalog view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultCtrViewName</name>
                        <description>String CategoryTree::getDefaultCtrViewName()
                            Returns name of default category tree view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getListOfCtgViewNames</name>
                        <description>String[] Catalog::getListOfViewNames()
                            Returns an array of view names available for this catalog. An entry with '[System
                            Default]' is always included as the first entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNewCtgTab</name>
                        <description>CtgTab CtgView::getNewCtgTab(String name, AttrGroup[] rows)
                            Builds a new container tab object with the given name and returns it. The tab needs
                            to be added to the catalog view in order to save it
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTabRowPath</name>
                        <description>String CtgTabRow::getTabRowPath()
                            Returns the attribute path for this tab row
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>insertCtgTabAt</name>
                        <description>void CtgView::insertCtgTabAt(CtgTab tab, Integer index)
                            Insert container tab object to the catalog view at the index position(zero base). If
                            index is invalid, tab is added to the end of the list
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CtgTabRow</name>
                        <description>CtgTabRow CtgTabRow(String path)
                            Builds a new container tab row object for the node specified by the path.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CtgView</name>
                        <description>new CtgView(Container container, String name)
                            Builds a new Ctg View
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeCtgTabAt</name>
                        <description>void CtgView::removeCtgTabAt(Integer index)
                            Remove container tab object to the catalog view at the index position(zero base).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCtgTabs</name>
                        <description>void CtgView::saveCtgTabs()
                            save the container tab objects that were new/modified in the container view
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCtgView</name>
                        <description>Boolean CtgView::saveCtgView()
                            Saves the current ctgview to the database
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgTabRow</name>
                        <description>void CtgTab::setCtgTabRow(AttrGroup[] rows)
                            Sets the current container tab object to the new set of rows
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgView</name>
                        <description>CtgView CtgView::setCtgView(String viewType, String[] attrGroupNames,
                            String[] permissions)
                            Sets the container view object with the given name/catalog and returns it. The
                            viewType can be 'ITEM_LIST', 'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT' or
                            'ITEM_EDIT'. By default ITEM_EDIT is used. Permissions are [V|E]
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDefaultCtgView</name>
                        <description>void Catalog::setDefaultCtgView(CtgView ctgView)
                            Sets the ctgview as the default catalog view.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDefaultCtrView</name>
                        <description>void CategoryTree::setDefaultCtrView(CtgView ctrView)
                            Sets the ctrview as the default category tree view.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_distribution</name>
                <description></description>
                <list>
                    <object>
                        <name>createDataSource</name>
                        <description>String createDataSource(String name, String type, [HashMap extraAttribs])
                            Creates a Data Source of the type ("PULL_FTP", "PULL_FTP", "PUSH_WWW",
                            "DOC_STORE") with given name. Will not create if a source with same name already
                            exists. extraAttribs can be used to set other attributes of the datasource like
                            "SERVER_ADDRESS", "SERVER_PORT", "USERNAME", "PASSWORD",
                            "FILENAME", "DIRECTORY", "DOC_STORE_PATH"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDistributionByName</name>
                        <description>Distribution getDistributionByName(String name)
                            Gets the distribution with the specified name if one exists, otherwise returns null
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFtp</name>
                        <description>HashMap/Boolean getFtp(String hostname, String port, String userid, String
                            password, String path, String filename, String sDocStorePath, Boolean
                            deleteRemoteFile, [Boolean detailedTransferStatus, Boolean loggingEnabled])
                            Use to get a file via FTP. The seventh parameter set where Trigo will store the
                            retrieved file. The eighth and the ninth paramters together are optional. The eigth
                            parameter gets the FTP Operation Status and the ninth paramter ensures that the
                            FTP operations are logged. Returns the result as true/false if the eighth and the ninth
                            are not specified otherwise a HashMap is returned. If a true/false is returned, it
                            indicates if the ftp was a success/failure. If the size of the retrieved file is not the
                            same as the size of the remote file the status is set to false. If a HashMap is returned,
                            the first paramater is the true/false which indicates success/failure, the second
                            paramater is the message string of the FTP Operation Status and the third parameter
                            is the FTP Operation error code
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFullHTTPResponse</name>
                        <description>HashMap getFullHTTPResponse(String url, HashMap hmRequestProperites,
                            HashMap hmParameters, String sRequestMethod , [String sEncoding, Doc doc,
                            String sContentType, boolean bGetResponseReader, boolean bPostUserInfo,
                            String sDocStorePath])
                            Returns a HashMap (with RESPONSE_READER and
                            RESPONSE_HEADER_FIELDS) for the response for posting hmParameters or a
                            doc of sContentType against the server at url, Use hmRequestProperties to send
                            specific header information. An optional parameter bGetReader could be used to
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>specify if the function needs to also return the response reader (default is true). An
                        </name>
                        <description>optional parameter bPostUserInfo could be used to specify if the function would
                            need
                            to post the invoking user information (default is false). The response is optionally
                            stored into a document at sDocStorePath in the docstore.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHTTPResponse</name>
                        <description>BufferedReader getHTTPResponse(String url, HashMap hmRequestProperites,
                            HashMap hmParameters, String sRequestMethod [,String sEncoding])
                            Returns a reader for the response for posting hmParameters against the server at url,
                            Use hmRequestProperties to send specific header information
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Distribution</name>
                        <description>new Distribution(String name, String type, [HashMap extraAttribs])
                            Creates a distribution with the provided name. The type can be: "FTP", "EMAIL",
                            "POST", "ARIBA_CATALOG_UPLOAD", "INCOMING_FTP", "CUSTOM". extraAttribs
                            should contain the parameters required for the different types which include "email",
                            "hostname", "userid", "password", "path", "from", "to", "sub", "localpath"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveMultipartRequestData</name>
                        <description>Doc[] saveMultipartRequestData(String saveDir, [String charset])
                            Saves the documents sent through multipart post in the docstore at location:
                            /archives/uploaded/multipart/saveDir/. If a charset is given, that is used. Otherwise,
                            the default_charset_value as specified in common.properties is used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendEmail</name>
                        <description>void sendEmail(String emailTos, String emailSubject, String emailBody, [Doc
                            emailAttachment | Doc[] emailAttatchments])
                            Use to send an asynchronous email. The tos parameter is a list of email addresses
                            seperated with the semicolon character (;). The 4th parameter could be an Doc or an
                            array of Doc
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendFtp</name>
                        <description>void sendFtp(String hostname, String port, String userid, String password,
                            String path, Doc doc | Doc[] docs)
                            Use to send a file via FTP. The 6th parameter could be an Doc or an array of Doc.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendHTMLEmail</name>
                        <description>void sendHTMLEmail(String emailTos, String emailSubject, String emailBody,
                            [Doc emailAttachment | Doc[] emailAttatchments])
                            Same as sendEmail operation, however will allow HTML anchor tags in the message
                            body. Use to send an asynchronous email. The tos parameter is a list of email
                            addresses seperated with the semicolon character (;). The 4th parameter could be an
                            IDoc or an array of IDoc
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendHttp</name>
                        <description>void sendHttp(String url, [Doc doc, [String contentType]])
                            Use to do GET or POST to a URL.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendHttpString</name>
                        <description>void sendHttpString(String url, String content, String contentType)
                            Use to do GET or POST to a URL.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendMultipartPost</name>
                        <description>HashMap sendMultipartPost(String url, HashMap hmRequestProperites,
                            HashMap hmParameters, String sRequestMethod, HashMap hmDocs)
                            Sends one or more documents of any content type and/or a set of hmParameters
                            using multipart post against the server at url, Use hmRequestProperties to send
                            specific header information. The hmDocs is the list of pairs ['document path',
                            'document content type'] for the documents of a particular content type (eg: text/plain,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>image/gif etc.). Also returns a HashMap (with RESPONSE_READER and</name>
                        <description>RESPONSE_HEADER_FIELDS) for the response.</description>
                        <list/>
                    </object>
                    <object>
                        <name>setHttpServletResponseHeader</name>
                        <description>void setHttpServletResponseHeader(HashMap hmNameValuePairs)
                            Sets the name, value pairs specified in the hashMap into the header for the current
                            HttpServletResponse
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setHttpServletResponseStatus</name>
                        <description>void setHttpServletResponseStatus(String statusCode)
                            Sets the status (takes one of the values from the set #[#'SC_ACCEPTED', 'SC_OK',
                            'SC_CONTINUE', 'SC_PARTIAL_CONTENT', 'SC_CREATED',
                            'SC_SWITCHING_PROTOCOLS', 'SC_NO_CONTENT'#]#) for the current
                            HttpServletResponse
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_docstore</name>
                <description></description>
                <list>
                    <object>
                        <name>copyDoc</name>
                        <description>Doc Doc::copyDoc(sPath)
                            Copy this document to the specified sPath in the docstore. If the path ends with a '/' it
                            is assumed that the doc needs to be copied to the specified directory with its current
                            name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteDoc</name>
                        <description>void Doc::deleteDoc()
                            Delete this document from the docstore
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachDocument</name>
                        <description>forEachDocument([Doc[] docs_list, ], Doc doc) { statements }
                            Executes the statements for each document (used in distribution scripts). If the
                            optional docs_list parameter is provided, however, the statements are executed for
                            each element of docs_list
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocAttribute</name>
                        <description>String Doc::getDocAttribute(String sAttributeName)
                            Return the attribute sAttributeName from this document
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocAttributes</name>
                        <description>HashMap Doc::getDocAttributes()
                            Return the attributes of this document
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocByPath</name>
                        <description>Doc getDocByPath(String sPath)
                            Return the document with path sPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocContentAsString</name>
                        <description>String Doc::getDocContentAsString()
                            Return the content of this document as a string. WARNING - this means that the
                            entire content of the document, however big, will be returned in a string so the uer
                            needs to make sure that any call of this operation is not going to be used in a
                            situation where the content of the document is too big (too big being defined by the
                            amount of memory available to the process this operation is running in).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocLastModifiedTimeStamp</name>
                        <description>Date Doc::getDocLastModifiedTimeStamp()
                            Returns the date/time this document was last modified
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocLength</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>Integer Doc::getDocLength([Boolean bBytes])</name>
                        <description>Returns the length of the document in kilo bytes. If bBytes is true, value is
                            returned in
                            bytes instead of Kb. Important when smaller files are concerned
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocListByPaths</name>
                        <description>Doc[] getDocListByPaths(String[] sPaths)
                            Return the document at each path specified in sPaths
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocPath</name>
                        <description>String Doc::getDocPath()
                            Return this document path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocStoreDirectoriesInDirectory</name>
                        <description>String[] getDocStoreDirectoriesInDirectory(String sPath)
                            Return the list of paths of directories under the directory sPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocStoreFilesInDirectory</name>
                        <description>String[] getDocStoreFilesInDirectory(String sPath)
                            Return the list of paths of documents under the directory sPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDocStoreSubtreeList</name>
                        <description>String[] getDocStoreSubtreeList(String sPath)
                            Return the list of documents under sPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHrefForDocPath</name>
                        <description>String getHrefForDocPath(String sDocPath)
                            Return a absolute path for the document with path sDocPath. This can be used in an
                            HTML reference to provide a link to the document.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveDoc</name>
                        <description>Doc Doc::moveDoc(sPath)
                            Move this document to the specified sPath in the docstore. If the path ends with a '/' it
                            is assumed that the doc needs to be moved to the specified directory with the same
                            doc name as the source
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDocAttribute</name>
                        <description>void Doc::setDocAttribute(String sAttributeName, String sAttributeValue)
                            Set the attribute sAttributeName to sAttributeValue for this document
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_entry</name>
                <description></description>
                <list>
                    <object>
                        <name>deleteEntryNode</name>
                        <description>void EntryNode::deleteEntryNode()
                            Remove this entrynode from the Entry. This operation will only work on
                            Mutli-Occurance attributes, an error will be thrown if used on a non-mulit-occurance
                            entryNode.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>displayEntryAttrib</name>
                        <description>String Entry::displayEntryAttrib(String sAttribPath)
                            Returns the html string for displaying entry attribute specified by attribute path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachEntrySetElement</name>
                        <description>forEachEntrySetElement(EntrySet entrySet, Object oEntry) { statements }
                            Executes the statements for each (oEntry) in the entrySet
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAddedAttributePathsNewEntry</name>
                        <description>String[] EntryChangedData::getAddedAttributePathsNewEntry([Category
                            location])
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns the paths of all attributes in LOCATION that (1) are not present in the old</name>
                        <description>entry and (2) are present in the new entry from which this EntryChangedData object
                            was created. If LOCATION is not specified or is null, then the comparison is done for
                            global attributes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCheckedOutEntryColAreas</name>
                        <description>String[] Entry::getCheckedOutEntryColAreas()
                            Return a list of collaboration area names in which the entry is checked out. Returns
                            empty list if entry is not checked out.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemLocationAttribsForKeys</name>
                        <description>String Item::getCtgItemLocationAttribsForKeys(Category location, Object[]
                            aAttribPath [, String sDelimiter])
                            Gets the attributes for an item based upon the passed location category and a
                            Object[] (declared: var aAttribs = [];) of attribute keys (paths). The resultant values are
                            loaded into the value pair of the mapping. If the value for one key is unset, it defaults
                            to a blank string. If the key does not correspond with an attribute, a null is entered
                            instead.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDeletedAttributePathsOldEntry</name>
                        <description>String[] EntryChangedData::getDeletedAttributePathsOldEntry([Category
                            location])
                            Returns the paths of all attributes in LOCATION that (1) are not present in the new
                            entry and (2) are present in the old entry from which this EntryChangedData object
                            was created. If LOCATION is not specified or is null, then the comparison is done for
                            global attributes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDestinationEntrySetForRelatedEntries</name>
                        <description>EntrySet Entry::getDestinationEntrySetForRelatedEntries(Container
                            filterContainer)
                            Returns EntrySet with all entries this entry is related to filtering by container if
                            filterContainer is provided.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDisplayValue</name>
                        <description>String Entry::getDisplayValue(Locale locale)
                            Returns the display value for the entry. If no display value is available then the
                            primary key value is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntry</name>
                        <description>Entry EntryNode::getEntry()
                            Returns the Entry behind the EntryNode.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryAttrib</name>
                        <description>Object Entry::getEntryAttrib(String sAttribPath)
                            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
                            entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryAttribs</name>
                        <description>(deprecated)HashMap Entry::getEntryAttribs()
                            Returns an HashMap mapping the paths (spec_name/attribute_name) of attributes to
                            their respective values
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryAttribsList</name>
                        <description>String[] Entry::getEntryAttribsList()
                            Returns an array of String containing the paths (spec_name/attribute_name) of all the
                            attributes of this entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryAttribValues</name>
                        <description>Object[] Entry::getEntryAttribValues(String sAttribPath)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns the values of the multi-value attribute given by sAttribPath</name>
                        <description>(spec_name/attribute_name) of this entry</description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryByPrimaryKey</name>
                        <description>Object Container::getEntryByPrimaryKey(String primaryKey)
                            Gets the entry given the primary key.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryChangedData</name>
                        <description>EntryChangedData ::getEntryChangedData(Entry oldEntry, Entry newEntry)
                            Return an EntryChangedData object encapsulating the changes in data and locations
                            between two entries at a point in time at which the EntryChangedData object is
                            created,such that the returned object is a static object. Note, this script operation is
                            very CPU intensive on large items (many locations and many attributes). Please see
                            script operation getEntryChangedDataSinceLastSave.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryChangedDataSinceLastSave</name>
                        <description>EntryChangedData Entry::getEntryChangedDataSinceLastSave()
                            Return an EntryChangedData object encapsulating the changes in data and locations
                            between this entry and the value since the last save (including save as draft). Note,
                            this script operation should be much faster than 'getEntryChangedData(oldEntry,
                            newEntry).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryContainer</name>
                        <description>Object Entry::getEntryContainer()
                            Gets the holding container for this Entry. Could be a catalog or category tree. Use
                            isEntryAnItem to determine which one.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryId</name>
                        <description>Integer Entry::getEntryId()
                            Returns this entry's id
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNode</name>
                        <description>EntryNode EntryNode::getEntryNode(String sPath)
                            Return the entryNode with path sPath relative to EntryNode. If the path is not already
                            built a NULL will be returned. Use the Entry::setEntryAttrib script operation to create a
                            path that might not exist.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeChildren</name>
                        <description>EntryNode[] EntryNode::getEntryNodeChildren()
                            Return the children of this EntryNode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeExactPath</name>
                        <description>String EntryNode::getEntryNodeExactPath()
                            Returns the exact path of this entry node - the following is always true:
                            rootNode.getEntryNode(entryNode.getEntryNodeExactPath()) == entryNode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeInheritedValue</name>
                        <description>Object EntryNode::getEntryNodeInheritedValue()
                            If this EntryNode inherits its value, return the value. Otherwise, return null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeParent</name>
                        <description>EntryNode EntryNode::getEntryNodeParent()
                            Return the parent of this EntryNode. If it is the root node, NULL is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodePath</name>
                        <description>String EntryNode::getEntryNodePath()
                            Returns the Spec Node path of this entry node, NOT the relative path of this attr.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodes</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>EntryNode[] EntryNode::getEntryNodes(String sPath)</name>
                        <description>Return the entry nodes matching the path sPath</description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeType</name>
                        <description>String EntryNode::getEntryNodeType()
                            return "V" = value, "G" = Grouping or top level of spec directory, "M" = Multi-directory
                            (contains multiple occurrances of values or groupings))
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryNodeValue</name>
                        <description>Object EntryNode::getEntryNodeValue()
                            Return the value of this EntryNode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryRelatedItemInfo</name>
                        <description>String[] Entry::getEntryRelatedItemInfo(int iItemId)
                            (Deprecated, see String[] Entry::getEntryRelationshipAttrib(String sEntryAttrib))
                            Returns an array of length 2 containing: [0]=Related Item's Catalog's Name,
                            [1]=Related Item's Primary Key, for the related item represented by the given internal
                            unique item id, at the browsing version of the catalog of the given entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryRelationshipAttrib</name>
                        <description>String[] Entry::getEntryRelationshipAttrib(String sAttribPath)
                            Given a relationship attribute path, returns an array of length 2 containing:
                            [0]=Related Item's Catalog's Name, [1]=Related Item's Primary Key, for the related
                            item. Exception will be thrown if attribute sAttribPath doesn't exist or it's not of
                            relationship type
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntrySaveResult</name>
                        <description>String Entry::getEntrySaveResult()
                            Returns the result of the last save called on this entry. Returns one of the following
                            strings {ADDED,DELETED,MODIFIED,UNKNOWN}
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryStatus</name>
                        <description>String Entry::getEntryStatus()
                            Returns the status of the entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryXMLRepresentation</name>
                        <description>String Entry::getEntryXMLRepresentation(Spec spec, boolean
                            includePrimaryKeyValue[, boolean addNameSpace, String dateFormat, Locale[]
                            aLocales, AttrGroup[] aAttrGroups])
                            Returns the XML representation of this entry specific to the given spec which can be
                            consumed by WPC-WPS integration WPS portion's XML parser. The optional
                            parameter; addNameSpace allows the user to specify that the XML returned is in a
                            format that can immediately be read in using the
                            setEntryAttributesFromXMLRepresentation function. The default of false for this
                            parameter allows user to prepend and append to the XML as required. The date
                            format is the pattern by which dates should be converted. A Simple Date Format is
                            normally used. If aLocales is specified, restrict to those locales. If AttrGroup[] is
                            specified only return attribute belonging to one of the AttrGroup
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFlatEntryNodes</name>
                        <description>EntryNode[] Entry::getFlatEntryNodes([Boolean skipEmptyGrouping])
                            Returns an array of flat EntryNodes of this entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFlatEntryNodesOf</name>
                        <description>EntryNode[] getFlatEntryNodesOf(EntryNode en)
                            Returns an array of all the entrynodes under this entrynode in depth first order
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFlatPrimaryEntryNodes</name>
                        <description>EntryNode[] Entry::getFlatPrimaryEntryNodes([Boolean skipEmptyGrouping])
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns an array of flat primary EntryNodes of this entry</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getFlatSecondaryEntryNodes</name>
                        <description>EntryNode[] Entry::getFlatSecondaryEntryNodes([Boolean
                            skipEmptyGrouping])
                            Returns an array of flat secondary EntryNodes of this entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemLocationAttrib</name>
                        <description>Object Item::getItemLocationAttrib(Category location, String sAttribPath)
                            Gets a location attribute for an item. Note -- if you specify an occurence (grouping or
                            value) that does not exist, then an exception is thrown.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemUsingEntryRelationshipAttrib</name>
                        <description>Item Entry::getItemUsingEntryRelationshipAttrib(String sAttribPath)
                            return the related item object for given relationship attribute path. Exception will be
                            thrown if attribute sAttribPath doesn't exist or it's not of relationship type
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocation</name>
                        <description>Category Object::getLocation()
                            If the caller object is the entry node, return the location (category) or null if a global
                            entry node; if the caller object is a SearchResultSet, return the value of the
                            designated column in the current row of this SearchResultSet object as a Location
                            (Category).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationPathForInheritedValue</name>
                        <description>String EntryNode::getLocationPathForInheritedValue(String delimiter)
                            Returns the path for the location from which this EntryNode inherits, or null if it does
                            not inherit its value. The given delimiter is used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsAddedAvailability</name>
                        <description>CategorySet EntryChangedData::getLocationsAddedAvailability(CategoryTree
                            locationHierarchy)
                            Returns all locations in LOCATIONHIERARCHY that are available in the new entry
                            but not the old entry from which this EntryChangedData object was created.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsChangedToHaveData</name>
                        <description>CategorySet
                            EntryChangedData::getLocationsChangedToHaveData(CategoryTree
                            locationHierarchy)
                            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
                            entry and the new entry from which this EntryChangedData object was created, and
                            (2) contain no data in the old entry but do contain data in the new entry. Note,
                            Override is considered as having data, and Inherit is considered as not having data.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsChangedToHaveNoData</name>
                        <description>CategorySet
                            EntryChangedData::getLocationsChangedToHaveNoData(CategoryTree
                            locationHierarchy)
                            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
                            entry and the new entry from which this EntryChangedData object was created, and
                            (2) contain no data in the new entry but do contain data in the old entry. Note,
                            Override is considered as having data, and Inherit is considered as not having data.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsHavingChangedData</name>
                        <description>CategorySet
                            EntryChangedData::getLocationsHavingChangedData(CategoryTree
                            locationHierarchy)
                            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
                            entry and the new entry from which this EntryChangedData object was created, and
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>(2) have at least one attribute path for which the old and new entries contain different
                        </name>
                        <description>values. Note that this operation will return a superset of all locations returned
                            by the
                            getLocationsChangedToHaveData and getLocationsChangedToHaveNoData script
                            operations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsRemovedAvailability</name>
                        <description>CategorySet
                            EntryChangedData::getLocationsRemovedAvailability(CategoryTree
                            locationHierarchy)
                            Returns all locations in LOCATIONHIERARCHY that are available in the old entry but
                            not the new entry from which this EntryChangedData object was created.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getModifiedAttributePathsNewEntry</name>
                        <description>String[] EntryChangedData::getModifiedAttributePathsNewEntry([Category
                            location])
                            Returns the paths of all attributes in LOCATION that (1) are present in both the old
                            entry and the new entry from which this EntryChangedData object was created, and
                            (2) contain different data in the old and new entries. It is possible for an attribute to
                            have different attribute paths across the old entry and the new entry, for example
                            because a multioccurrence sibling has been deleted. In this case, we return the
                            attribute path for the new entry. If LOCATION is not specified or is null, then the
                            comparison is done for global attributes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getModifiedAttributePathsOldEntry</name>
                        <description>String[] EntryChangedData::getModifiedAttributePathsOldEntry([Category
                            location])
                            Returns the paths of all attributes in LOCATION that (1) are present in both the old
                            entry and the new entry from which this EntryChangedData object was created, and
                            (2) contain different data in the old and new entries. It is possible for the same
                            attribute to have different attribute paths across the old entry and the new entry, for
                            example because a multioccurrence sibling has been deleted. In this case, we return
                            the attribute path for the old entry. If LOCATION is not specified or is null, then the
                            comparison is done for global attributes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeFromEntryNode</name>
                        <description>Node EntryNode::getNodeFromEntryNode()
                            Returns the Node object for this entry node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getOriginalEntry</name>
                        <description>Entry Entry::getOriginalEntry()
                            Returns the original picture of the entry as stored in the database. If the entry is new
                            or deleted, this operation returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPipeDelimitedCSVRepresentation</name>
                        <description>String Entry::getPipeDelimitedCSVRepresentation()
                            Returns a CSV representation of this entry with fields that are name value pairs
                            separated by the pipe character. All attribute values have the exact path of the
                            attribute with occurrence numbers as the name. All category paths have CATEGORY
                            or PATH as the name for items and categories respectively.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPossibleEntryNodeValues</name>
                        <description>String[] EntryNode::getPossibleEntryNodeValues()
                            Returns the possible values of string enumeration, number enumeration, timezone or
                            lookuptable entrynode.For other type of entrynodes an empty array would be
                            returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPrimaryKey</name>
                        <description>String Entry::getPrimaryKey()
                            Returns the primary key value of this entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRootEntryNode</name>
                        <description>EntryNode Entry::getRootEntryNode()
                            Return the root entry node for this entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSourceEntrySetForRelatedEntries</name>
                        <description>EntrySet Entry::getSourceEntrySetForRelatedEntries(Container filterContainer)
                            Returns EntrySet with all entries that have an attribute related to this entry filtering by
                            container if filterContainer is provided.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getXMLRepresentation</name>
                        <description>String Entry::getXMLRepresentation()
                            Returns an XML representation of this entry with the structure Nodes/Node/Name,
                            Nodes/Node/Value, Paths/Path.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>hasInheritedValue</name>
                        <description>Boolean EntryNode::hasInheritedValue()
                            Returns TRUE if this entry node WOULD inherit some non-null value if set to do so.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>hasNonInheritedValue</name>
                        <description>Boolean EntryNode::hasNonInheritedValue()
                            Returns TRUE if there is a non-null non-inherited value. The presence or absence of
                            inherited values makes no difference.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isEntryAnItem</name>
                        <description>Boolean Entry::isEntryAnItem()
                            Returns TRUE if this entry is an Item, FALSE if it is a Category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isEntryCheckedOut</name>
                        <description>Boolean Entry::isEntryCheckedOut()
                            Returns true if the entry is checked out into a collaboration area otherwise it returns
                            false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isInheriting</name>
                        <description>Boolean Item::isInheriting(Category location, String sAttribPath)
                            Return true if the item inherits at a location for sAttribPath. The attribute will contain
                            an unset value and will support inheritance. Note, no check is made that there is a
                            value to inherit.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>populateAllNonPersisted</name>
                        <description>Boolean Entry::populateAllNonPersisted()
                            Execute non-persisted script for all entrynodes in the entry. Return true if the script
                            was completed succesfully, false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>populateNonPersistedForEntryNode</name>
                        <description>Boolean EntryNode::populateNonPersistedForEntryNode()
                            Execute non-persisted script for this entrynode. Return true if the script was
                            completed succesfully, false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>previewEntryAttrib</name>
                        <description>String Entry::previewEntryAttrib(String sAttribPath)
                            Returns the preview string for displaying entry attribute specified by attribute path.
                            Returns "" if sAttribPath refers to a non existing attribute or to a non-existing
                            multi-occurrence instance
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryAttrib</name>
                        <description>void Entry::setEntryAttrib(String sAttribPath, Object sValue)
                            Sets the attribute sAttribPath (spec_name/attribute_name) of this entry to sValue.
                            Perform optional checks before update if bDoChecks is true.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryAttribValues</name>
                        <description>void Entry::setEntryAttribValues(String sAttribPath, Object[] sValues)
                            Sets the values of the multi-value attribute given sAttribPath
                            (spec_name/attribute_name) of this entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryNode</name>
                        <description>EntryNode EntryNode::setEntryNode(String sPath)
                            Return the entryNode with path sPath relative to EntryNode. If the path is not already
                            built a NULL will be returned. Use the Entry::setEntryAttrib script operation to create a
                            path that might not exist. Deprecated.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryNodeRelationshipValue</name>
                        <description>Integer EntryNode::setEntryNodeRelationshipValue(Catalog relatedItemCtg,
                            String sRelatedItemPrimaryKey)
                            Set the value of this EntryNode of type RELATIONSHIP to the related item
                            represented by the given catalog and primary key. Return 1 if the value was set, 0 if
                            nothing changed, and -1 if the item with the PK was not found.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryNodeRelationshipValueUsingItem</name>
                        <description>Integer EntryNode::setEntryNodeRelationshipValueUsingItem(Item relatedItem)
                            Set the value of this EntryNode of type RELATIONSHIP to the related item given.
                            Return 1 if the value was set, 0 if nothing changed, and -1 if the item with the PK was
                            not found.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryNodeValue</name>
                        <description>Integer EntryNode::setEntryNodeValue(Object value)
                            Set the value of this EntryNode and return 1 if the value was set, 0 if nothing
                            changed, and -1 if there was a type conversion error.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryRelationshipAttrib</name>
                        <description>void Entry::setEntryRelationshipAttrib(String sAttribPath, Catalog
                            relatedItemCtg, String sRelatedItemPrimaryKey)
                            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
                            this entry to the related item represented by the given catalog and primary key
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryRelationshipAttribUsingItem</name>
                        <description>void Entry::setEntryRelationshipAttribUsingItem(String sAttribPath, Item
                            relatedItem)
                            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
                            this entry to the related item given
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEntryStatus</name>
                        <description>void Entry::setEntryStatus(String status)
                            Sets the status of the entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setInheriting</name>
                        <description>void Item::setInheriting(Category location, String sAttribPath, [Boolean flag])
                            By default or if flag is true, then set an item location's attribute to an unset value or a
                            grouping to inheriting, which means that the attribute will inherit at this location. If
                            flag
                            is false, then the attribute will not inherit, meaning that the attribute holds a null
                            override.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setPrimaryKey</name>
                        <description>void Entry::setPrimaryKey(String value)
                            Sets the primary key value of this entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>throwValidationError</name>
                        <description>void EntryNode::throwValidationError(String errorType[, String errorString])
                            Sets up a validation error that shows up in validation errors in the gui and the list of
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>errors returned when an entry is saved in a script. ERRORTYPE should be one of</name>
                        <description>"UNIQUENESS", "VALIDATION_RULE", "PATTERN", "MIN_OCCURENCE",
                            "LENGTH".
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_export</name>
                <description></description>
                <list>
                    <object>
                        <name>addAllObjectsToExport</name>
                        <description>void EnvObjectList::addAllObjectsToExport([String sObjectType, [String
                            sActionMode]])
                            Notifies that all the entities of specific object type be exported. sObjectType is
                            optional. sActionMode is used to specify the action mode in which the object has to
                            be exported. It is optional. In case it is not specified, the value set using
                            setActionModeForExport() is used. If no action mode has been set,
                            CREATE_OR_UPDATE is used. List of acceptable values for sObjectType are:
                            "ACG", "ALERT", "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT",
                            "CATALOG_VIEW", "COLLABORATION_AREA",
                            "COLLABORATION_AREA_CONTENT", "COMPANY_ATTRIBUTES",
                            "CONTAINER_ACCESSPRV", "DATASOURCE", "DESTINATION_SPEC",
                            "DISTRIBUTION", "DISTRIBUTION_GROUP", "DOC_STORE", "EXPORTS",
                            "FEEDS", "FILE_SPEC", "HIERARCHY", "HIERARCHY_CONTENT",
                            "HIERARCHY_MAPS", "HIERARCHY_VIEW", "JOBS", "LOOKUP_TABLE",
                            "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC", "MAPS",
                            "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
                            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
                            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
                            "WEBSERVICE", "WORKFLOW" List of acceptable values for sObjectType are:
                            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addObjectByNameToExport</name>
                        <description>void EnvObjectList::addObjectByNameToExport(String sEntityName[, String
                            sObjectType, [String sActionMode]])
                            Sets the entity to be exported by specifying the entity name as an argument.
                            sObjectType is optional. sActionMode is used to specify the action mode in which the
                            object has to be exported. It is optional. In case it is not specified, the value set using
                            setActionModeForExport() is used. If no action mode has been set,
                            CREATE_OR_UPDATE is used. In case of Catalog and Hierarchy Content export,
                            this operation is used to specify the attribute collection associated with the object. In
                            case of DocStore partial export, this operation is used to specify the DocStore path.
                            List of acceptable values for sObjectType are: "ACG", "ALERT",
                            "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT", "CATALOG_VIEW",
                            "COLLABORATION_AREA", "COLLABORATION_AREA_CONTENT",
                            "COMPANY_ATTRIBUTES", "CONTAINER_ACCESSPRV", "DATASOURCE",
                            "DESTINATION_SPEC", "DISTRIBUTION", "DISTRIBUTION_GROUP",
                            "DOC_STORE", "EXPORTS", "FEEDS", "FILE_SPEC", "HIERARCHY",
                            "HIERARCHY_CONTENT", "HIERARCHY_MAPS", "HIERARCHY_VIEW",
                            "ITEM_CATEGORY_MAPS", "JOBS", "LOOKUP_TABLE",
                            "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC", "MAPS",
                            "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
                            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
                            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
                            "WEBSERVICE", "WORKFLOW" List of acceptable values for sObjectType are:
                            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>exportEnv</name>
                        <description>String exportEnv(EnvObjectList envObjList, String sDocFilePath)
                            Exports the WebSphere Product Center objects specified in envObjList at the
                            specified DocStore path. sDocFilePath is the filepath of the zip file that will be
                            exported into the document store - returns the log as a string.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalogNameToExport</name>
                        <description>String EnvObjectList::getCatalogNameToExport()
                            Returns the last value set with setCatalogByNameToExport
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHierarchyNameToExport</name>
                        <description>String EnvObjectList::getHierarchyNameToExport()
                            Returns the last value set with setHierarchyByNameToExport
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTypesToExport</name>
                        <description>String[] EnvObjectList::getTypesToExport()
                            Returns all the object types, set with setTypeToExport, for exporting
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTypeToExport</name>
                        <description>String EnvObjectList::getTypeToExport()
                            Returns the last object type set with setTypeToExport
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$EnvObjectList</name>
                        <description>new EnvObjectList()
                            Returns a container for the WebSphere Product Center objects to be exported. This
                            class is used to add and retrieve the objects to be exported.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setActionModeToExport</name>
                        <description>void EnvObjectList::setActionModeToExport(String sActionMode)
                            Sets the default action mode for objects to be exported. The value specified in this
                            method can be overridden by specifying the action mode in addAllObjectsToExport()
                            or addObjectByNameToExport(). List of acceptable values for sObjectType are:
                            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCatalogByNameToExport</name>
                        <description>void EnvObjectList::setCatalogByNameToExport(String sCatalog)
                            Sets the Catalog whose contents are to be exported
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setHierarchyByNameToExport</name>
                        <description>void EnvObjectList::setHierarchyByNameToExport(String sHierarchy)
                            Sets the Hierarchy whose contents are to be exported
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setHierarchyMapToExport</name>
                        <description>void EnvObjectList::setHierarchyMapToExport(String sourceHierarchy, String
                            destHierarchy [,String sActionMode])
                            Sets the source and destination Hierarchies whose mappings need to be exported.
                            sActionMode is used to specify the action mode in which the object has to be
                            exported. It is optional. In case it is not specified, the value set using
                            setActionModeForExport() is used. If no action mode has been set,
                            CREATE_OR_UPDATE is used. List of acceptable values for sObjectType are:
                            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemCategoryMapToExport</name>
                        <description>void EnvObjectList::setItemCategoryMapToExport(String sCatalog, String
                            sHierarchy [,String sActionMode)
                            Sets the Catalog and Hierarchy whose Item-Category mappings need to be exported
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setTypeToExport</name>
                        <description>void EnvObjectList::setTypeToExport(String sObjectType)
                            Sets the object type to be exported. List of acceptable values for sObjectType are:
                            "ACG", "ALERT", "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT",
                            "CATALOG_VIEW", "COLLABORATION_AREA",
                            "COLLABORATION_AREA_CONTENT", "COMPANY_ATTRIBUTES",
                            "CONTAINER_ACCESSPRV", "DATASOURCE", "DESTINATION_SPEC",
                            "DISTRIBUTION", "DISTRIBUTION_GROUP", "DOC_STORE", "EXPORTS",
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>"FEEDS", "FILE_SPEC", "HIERARCHY", "HIERARCHY_CONTENT",</name>
                        <description>"HIERARCHY_MAPS", "HIERARCHY_VIEW", "ITEM_CATEGORY_MAPS", "JOBS",
                            "LOOKUP_TABLE", "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC",
                            "MAPS", "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
                            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
                            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
                            "WEBSERVICE", "WORKFLOW"
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_import</name>
                <description></description>
                <list>
                    <object>
                        <name>createExport</name>
                        <description>String createExport(String marketSpecName, String catalogName, String
                            specMapName, String exportScriptName, String syndicationName, [HashMap
                            optionalArgs])
                            Creates the Export with given params. An optional parameter "charsetName", which
                            may be set in the "optionalArgs" parameter, describes the file encoding of the export.
                            Otherwise, the Cp1252 is chosen as the default file encoding. Returns Done if
                            successful, Error if not. Here is a complete list of the optional arguments which may
                            be set in the "optionalArgs" parameter: String approverUserName, String
                            charsetName, String distributionName, String distributionGroupName, String
                            selectionName, String synType, String diffType,String sParamsDocPath. The
                            distributionName and distributionGroupName can be a list of distribution names
                            delimited by the string returned by
                            getStringValueForClassMember("com.ibm.ccd.common.util.Const",
                            "CATEGORY_PATH_DELIMITER")
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createImport</name>
                        <description>String createImport(String sImportName, String sImportType, String
                            sSourceName, String sFileSpecName, String sCatalogName, String
                            sSpecMapName, String sCategoryTreeName, String sScriptName, String
                            sACGName, [HashMap optionalArgs])
                            Creates the Feed with given params. An optional argument "sCharsetName", which
                            may be defined in the optionalArgs HashMap, describes the file encoding of the feed.
                            Otherwise, Cp1252 is chosen as the default file encoding. Also, optional parameters
                            to describe if the current container is a collaboration area, and the step path of the
                            workflow step in to which the feed is to be done, could be specified. Returns Done if
                            successful, Error if not. The complete list of optional arguments, which may be set in
                            the optionalArgs parameter, is as follows: String sCharsetName, Boolean
                            bIsCollaborationArea, String sWflStepPath, String sParamsDocPath, String
                            sImportSemantic, and String sApproverUserName.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>disableBatchProcessingForItems</name>
                        <description>void disableBatchProcessingForItems()
                            Sets up the import to not process items in bulk. This used to be achieved in earlier
                            releases by setting up an import on a catalog different than the one the user wanted
                            to import into.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loadImport</name>
                        <description>String loadImport(String sImportName, String sPath)
                            Loads file from the given DocStore path into the given Import. Returns Done if
                            successful, Error if not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startAggregationByName</name>
                        <description>void startAggregationByName(String sName, String sDocPath)
                            Run the feed called sName on the file sDocPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startExportByName</name>
                        <description>Boolean startExportByName(String sName)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Run the export called sName. Returns TRUE if success.</name>
                        <description></description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_import</name>
                <description></description>
                <list>
                    <object>
                        <name>importEnv</name>
                        <description>String importEnv(String sDocFilePath, [bFromFileSystem])
                            Imports the content of the archive in the docstore at sDocFilePath into this company.
                            Returns the log as a String. WARNING: Transactional disruption will occur: This
                            script operation will disrupt the current transaction - resulting in possible commit or
                            rollback of prior data. The transactional state on completion is not guaranteed. This
                            script operation should not be used inside a useTransaction or catchError block. This
                            operation is very disruptive to a WPC company and should not be used on a live
                            system.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_item</name>
                <description></description>
                <list>
                    <object>
                        <name>buildCtgItem</name>
                        <description>(deprecated) see new$CtgItem</description>
                        <list/>
                    </object>
                    <object>
                        <name>cloneItem</name>
                        <description>Item Item::cloneItem()
                            Create and return a clone of this item.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteCtgItem</name>
                        <description>void deleteCtgItem(Item itm)
                            Delete the catalog item itm
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>displayCtgItemAttrib</name>
                        <description>String Item::displayCtgItemAttrib(String sAttribPath)
                            Returns the html string for displaying item attribute specified by attribute path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAvailableLocations</name>
                        <description>CategorySet Item::getAvailableLocations(Object locationOrCategoryTree)
                            Returns CategorySet of available locations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCatalog</name>
                        <description>Catalog Item::getCatalog() | Catalog SearchResultSet::getCatalog([int
                            columnIndex])
                            Return the catalog object this item belongs to, or return the value of the designated
                            column in the current row of this SearchResultSet object as a Catalog.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAllCategories</name>
                        <description>Category[] Item::getCtgItemCategories()
                            (Deprecated) See getCtgItemCategories. Return the all categories this item is
                            mapped to,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAtOldVersion</name>
                        <description>Item Item::getCtgItemAtOldVersion()
                            Returns the old version of the item in the differences syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttrib</name>
                        <description>Object Item::getCtgItemAttrib(String sAttribPath)
                            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
                            item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttribByPk</name>
                        <description>Object Catalog::getCtgItemAttribByPk(String pk, String sAttribPath)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this</name>
                        <description>item</description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttribNamesList</name>
                        <description>String[] Item::getCtgItemAttribNamesList([Boolean bAllAttributes])
                            Returns an array of String containing the attribute name of all the attributes of this
                            item (optional parameter allows option exclude categorySpecificAttribute - true by
                            default)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttribsForKeys</name>
                        <description>String Item::getCtgItemAttribsForKeys (Object[] aAttribs [, String sDelimiter])
                            Gets the attributes for an item based upon the passed Object[] (declared: var aAttribs
                            = [];) of attribute keys (paths). The resultant values are loaded into the value pair of
                            the aAttribs mapping. By specifying the delimiter parameter, in addition to populating
                            aAttribs mapping the operation returns a CSV string representation of the retrieved
                            values separated by the delimiter character.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttribsList</name>
                        <description>String[] Item::getCtgItemAttribsList()
                            Returns an array of String containing the paths (spec_name/attribute_name) of all the
                            attributes of this item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttributeNewValue</name>
                        <description>(deprecated) use Item::getCtgItemAttrib()</description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemAttributeOldValue</name>
                        <description>(deprecated) use Item::getCtgItemAtOldVersion()</description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemCategories</name>
                        <description>Category[] Item::getCtgItemCategories([String catTreeName] [, CategoryCache
                            catCache])
                            Return the categories this item is mapped to. If catTreeName is given, returns the
                            categories within that ctr only (use the default category tree if no category tree is
                            passed). Also, can use an optional CategoryCache passed in catCache
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemCategoryPaths</name>
                        <description>String[] Item::getCtgItemCategoryPaths(String sPathDelimiter, [Boolean
                            bWithRoot], [CategoryTree ctr])
                            Returns an array of delimited strings of the category paths this item belongs to. If ctr
                            is given, returns the paths of the categories within that ctr only.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemCategoryPathsForPrimaryKey</name>
                        <description>String[] Catalog::getCtgItemCategoryPathsForPrimaryKey(String sPrimaryKey,
                            String sPathDelimiter, [Boolean bWithRoot], [CategoryTree ctr])
                            Returns an array of delimited strings of the category paths for the item with
                            sPrimaryKey in Catalog. If ctr is given, returns the paths of the categories within that
                            ctr only
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemCatSpecificAttribsList</name>
                        <description>String[] Item::getCtgItemCatSpecificAttribsList()
                            Returns an array of String containing the paths (spec_name/attribute_name) of all the
                            category specific attributes of this item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemDiffStatus</name>
                        <description>String Item::getCtgItemDiffStatus()
                            For content difference syndications, returns this item''s difference status (A, M, D, U)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemId</name>
                        <description>Integer Item::getCtgItemId()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns this item's Id</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemMappedAttrib</name>
                        <description>String Item::getCtgItemMappedAttrib(String sAttribMappedPath)
                            Returns the value of the attribute mapped to/from sAttribMappedPath
                            (mapped_spec_name/attribute_name) of this item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemMappedAttribs</name>
                        <description>HashMap Item::getCtgItemMappedAttribs()
                            Returns a HashMap with the mapped attributes values indexed by their path
                            (mapped_spec_name/attribute_name) of this item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemMappedAttribsList</name>
                        <description>String[] Item::getCtgItemMappedAttribsList()
                            Returns an array of String containing the paths
                            (mapped_spec_name/attribute_name) of all the mapped attributes of this item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemOrganizations</name>
                        <description>Organization[] Item::getCtgItemOrganizations()
                            Return the all organizations this item is mapped to,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemOrganizations</name>
                        <description>Organization[] Item::getCtgItemOrganizations()
                            Return the all organizations this item is mapped to,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgItemPrimaryKey</name>
                        <description>String Item::getCtgItemPrimaryKey()
                            Returns this item's primary key value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getErrorsForLocation</name>
                        <description>[ValidationError[] LocationErrors::getErrorsForLocation ()
                            [Returns the validation errors for the current location errors. There will be at least one
                            validation error.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getExitValue</name>
                        <description>String Entry::getExitValue()
                            Returns the exit value, if set, of an entry in a workflow step. Assumed to be called
                            from an IN(), OUT(), or TIMEOUT() step script function.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getGlobalErrors</name>
                        <description>ValidationError[] EntryValidationErrors::getGlobalErrors ()
                            Returns the validation errors for the global attributes. Will return an empty array if no
                            such errors exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemRootEntryNodeForLocation</name>
                        <description>EntryNode Item::getItemRootEntryNodeForLocation(Category location)
                            Returns the root EntryNode for this item at the given location.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemRootEntryNodesHavingLocationData</name>
                        <description>EntryNode[] Item::getItemRootEntryNodesHavingLocationData()
                            Returns a list of EntryNodes, each is a root entryNode per location that has data
                            defined.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemStatus</name>
                        <description>String Item::getItemStatus()
                            Return UNKNOWN, ADDED, MODIFIED, DELETED
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItemXMLRepresentation</name>
                        <description>String Item::getItemXMLRepresentation(Spec spec, boolean</description>
                        <list/>
                    </object>
                    <object>
                        <name>includePrimaryKeyValue[, String dateFormat])</name>
                        <description>Returns the XML representation of this item which is specific to the given spec.
                            This
                            representation can be consumed by the XML parser in the WPS portion of the WPC
                            and WPS integration
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLinkedItemForNode</name>
                        <description>Item Item::getLinkedItemForNode(String node_path)
                            Returns the linked item associated with the specified node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLinkedItems</name>
                        <description>Hashmap[] Item::getLinkedItems()
                            Returns a list containing a Hashmap for each item linked to this item's primary key.
                            Keys in the HashMap include "item_key","item_id","catalog_id", and "catalog_name".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationErrors</name>
                        <description>LocationErrors[] EntryValidationErrors::getLocationErrors ()
                            Returns the locations errors for locations having validation errors. Will return an
                            empty array if no such errors exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationForErrors</name>
                        <description>ICategory LocationErrors::getLocationForErrors ()
                            Returns the category associted with the current location errors.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationsHavingData</name>
                        <description>CategorySet Item::getLocationsHavingData(Object locationOrCategoryTree)
                            Returns the category set of locations for which this entry has location specific
                            attributes defined under the specified location or category tree..
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getOriginalItem</name>
                        <description>Item Item::getOriginalItem()
                            Returns the original picture of the item before modification. Deprecated. Please use
                            Entry::getOriginalEntry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getValidationErrorEntryNode</name>
                        <description>EntryNode ValidationError::getValidationErrorEntryNode()
                            Return the EntryNode associated with this ValidationError
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getValidationErrorMsg</name>
                        <description>String ValidationError::getValidationErrorMsg()
                            Return the error message associated with this ValidationError
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getValidationErrorType</name>
                        <description>String ValidationError::getValidationErrorType()
                            Return the type associated with this ValidationError
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>initializeKeyValueMapping</name>
                        <description>Object[] initializeKeyValueMapping(Object[] aKeyset)
                            Create a linked hash map.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isCtgItemMappedToCategories</name>
                        <description>Boolean Item::isCtgItemMappedToCategories([CategoryTree ctr])
                            Returns true if the item is mapped to categories. If the optional argument ctr is given,
                            returns true if the item is mapped to a category in ctr.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isItemAvailableInLocation</name>
                        <description>Boolean Item::isItemAvailableInLocation(Category location)
                            Returns true if item is mapped to the given location in the specified category tree.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>locationHasData</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>Boolean Item::locationHasData(Category location)</name>
                        <description>Returns true if the location has data.</description>
                        <list/>
                    </object>
                    <object>
                        <name>makeItemAvailableInLocation</name>
                        <description>void Item::makeItemAvailableInLocation(Category location, [Boolean
                            bRecursive])
                            Makes this item available in a given location. Available means that an item can have
                            location data for the given location. If bRecursive is true than make item available in
                            all descendent locations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>makeItemAvailableInLocations</name>
                        <description>void Item::makeItemAvailableInLocations(Category[] locations, [Boolean
                            bRecursive])
                            Makes this item available in the given locations. Available means that an item can
                            have location data for the given location. If bRecursive is true than make item
                            available in all descendent locations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>makeItemUnavailableInLocation</name>
                        <description>void Item::makeItemUnavailableInLocation(Category location, [Boolean
                            bRecursive])
                            Makes this item unavailable in a given location. If bRecursive is true than make item
                            unavailable in all descendent locations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>makeItemUnavailableInLocations</name>
                        <description>void Item::makeItemUnavailableInLocations(Category[] locations, [Boolean
                            bRecursive])
                            Makes this item unavailable in the given locations. If bRecursive is true then make
                            item unavailable in all descendent locations.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mapCtgItemToCategory</name>
                        <description>void Item::mapCtgItemToCategory(Category category, [Boolean addToPicture],
                            [Boolean validateCategory])
                            Map this item to this category. If optional boolean addToPicture is false, the
                            secondary specs will not be associated and cannot be set; useful for performance. If
                            optional boolean validateCategory is true and the category's hierarchy does not have
                            the VALIDATION_RULES option disabled, the mapping will only occur if the category
                            passes validation. Validation is false by default.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mapCtgItemToOrganizations</name>
                        <description>void Item::mapCtgItemToOrganizations(Category[] organizations [, boolean
                            bAdd])
                            Maps the item to all the organizations provided. If bAdd is true, the old mappings are
                            added to otherwise they are overwritten to be the new set of organizations.
                            Deprecated--Call moveCtgItemToCategories
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveCtgItemToCategories</name>
                        <description>void Item::moveCtgItemToCategories(Category[] categories), [, boolean bAdd])
                            Move item from existing categories to new set of categories, if bAdd is true, then
                            category mappings will be added.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CtgItem</name>
                        <description>new CtgItem(String sCtgName/Catalog ctg], [Boolean bRunEntryBuildScript],
                            [Boolean bBuildNonPersisted], [Boolean bBuildEmptyEntryPicture])
                            Returns a new item object. The argument can be a catalog name or a catalog object.
                            The argument being a catalog object allows the propagation of attribute collections to
                            process settings etc. to new items being built with this operation. If no catalog
                            name/object is provided, then the default catalog from the current script context is
                            used. bRunEntryBuildScript or bBuildNonPersisted should be set to false to disable
                            the default behavior of this script operation to run the entry build script or build the
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>non-persisted attributes respectively for this new item.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>removeCtgItemFromCategory</name>
                        <description>void Item::removeCtgItemFromCategory(Category category)
                            Remove mapping from this item to this category, if the mapping exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveCtgItem</name>
                        <description>EntryValidationErrors Item::saveCtgItem()
                            Saves the item and returns the EntryValidationErrors object. Use operations
                            EntryValidationErrors::getGlobalErrors() and
                            EntryValidationErrors::getLocationErrors() to get the validation errors that may have
                            prevented the save. WARNING: Transactional disruption will occur: When used in an
                            import script, this script operation will commit any existing transaction, and will open a
                            new transaction if a transaction did exist. This script operation should be used
                            carefully; for example, it should not be called in a catchError block.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemAttrib</name>
                        <description>boolean Item::setCtgItemAttrib(String sAttribPath, Object sValue)
                            Sets the attribute sAttribPath (spec_name/attribute_name) of this item to sValue.
                            Returns true if it was set succesfully. Returns false if operation failed to set, or if old
                            and new values are same
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemMappedAttrib</name>
                        <description>void Item::setCtgItemMappedAttrib(String sAttribPath, Object oValue)
                            Sets the attribute mapped to/from sAttribMappedPath
                            (mapped_spec_name/attribute_name) of this item to sValue
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemMappedAttribs</name>
                        <description>void Item::setCtgItemMappedAttribs(HashMap hmPathValue, [SpecMap
                            specmap])
                            Set the attributes of this item: hmPathValue should contain (path_y, value_x)'s; the
                            item attribute path_x receives value_x if path_y is mapped to path_x in specmap - if
                            no spec map is specified, the specmap of the import is being used.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemPrimaryKey</name>
                        <description>void Item::setCtgItemPrimaryKey(String pk)
                            Sets this item's primary key value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemRelationshipAttrib</name>
                        <description>void Item::setCtgItemRelationshipAttrib(String sAttribPath, Catalog
                            relatedItemCtg, String sRelatedItemPrimaryKey)
                            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
                            this item to the related item represented by the given catalog and primary key
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCtgItemRelationshipAttribUsingItem</name>
                        <description>void Item::setCtgItemRelationshipAttribUsingItem(String sAttribPath, Item
                            relatedItem)
                            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
                            this item to the related item given
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setExitValue</name>
                        <description>Entry::setExitValue(String exitValue)
                            Set the exit value of an entry in a workflow step. Assumed to be called from an IN(),
                            OUT(), or TIMEOUT() step script function.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setIgnoreCategorySpecificAttributes</name>
                        <description>void Item::setIgnoreCategorySpecificAttributes(Boolean bIgnore)
                            Set whether or not category specific attributes should be processed for the item
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemAttributesFromXMLRepresentation</name>
                        <description>void Item::setItemAttributesFromXMLRepresentation(String xmlStr [,String
                            dateFormat)
                            Updates this item based upon an XML representation which is created by the XML
                            parser in the WPS portion of the WPC and WPS integration
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemLocationAttrib</name>
                        <description>void Item::setItemLocationAttrib(Category location, String sAttribPath, Object
                            sValue)
                            Sets the attribute sAttribPath (spec_name/attribute_name) of this item for the given
                            location to sValue.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>validateMappedAttribs</name>
                        <description>HashMap validateMappedAttribs(HashMap hmPathValue, [SpecMap specmap])
                            Validate a set of attribute values indexed by their mapped path against the
                            destination spec
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_jms</name>
                <description></description>
                <list>
                    <object>
                        <name>jmsCreateTextMsg</name>
                        <description>JMSMessage QueueSession::jmsCreateTextMsg(String msgText)
                            Creates a new JMS TextMessage using QueueSession information with the text
                            provided.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsDisconnect</name>
                        <description>void QueueSession::jmsDisconnect(QueueConnection qcon)
                            Disconnects from the given queue manager.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetConnectionFactory</name>
                        <description>QueueConnectionFactory Context::jmsGetConnectionFactory(String
                            jmsFactory)
                            Creates and returns a jms connection factory with the specified context.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetContext</name>
                        <description>Context jmsGetContext(String url, String jndiFactory)
                            Creates a JMS context.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetMessageCorrelationID</name>
                        <description>String JMSMessage::jmsGetMessageCorrelationID()
                            Returns a string containing Correlation Id for the JMS message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetMessageID</name>
                        <description>String JMSMessage::jmsGetMessageID()
                            Returns a string containing the JMS message id.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetMessageProperties</name>
                        <description>HashMap JMSMessage::jmsGetMessageProperties()
                            Returns a hashmap from string property names to string values for those priorities.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetMQConnectionFactory</name>
                        <description>QueueConnectionFactory jmsGetMQConnectionFactory(String
                            mqQueueManager, String mqHostname, String mqChannel, Integer mqPort)
                            Creates and returns a jms connection factory for communicating with MQ queues.
                            Note that you do not need a Context to get an MQ connection factory whereas you
                            need a Context for connecting to other JMS queues.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetQueue</name>
                        <description>javax.jms.Queue QueueSession::jmsGetQueue(String name)</description>
                        <list/>
                    </object>
                    <object>
                        <name>(DEPRECATED: use jmsGetQueueByName() instead). Returns a javax.jms.Queue</name>
                        <description>object from the given QueueSession. NAME identifies the desired queue in a
                            vendor-specific format.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetQueueByName</name>
                        <description>javax.jms.Queue jmsGetQueueByName(Context ctx, String name)
                            Returns a javax.jms.Queue object from the given JNDI Name and Context.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetQueueConnection</name>
                        <description>QueueConnection QueueConnectionFactory::jmsGetQueueConnection([String
                            username], [String password])
                            Returns a JMS queue connection from the given connection factory. Uses the
                            username and password supplied, or if no username or password is supplied, uses
                            the defaults in common.properties if they exist, otherwise attempts to connect as the
                            user running WebSphere Product Center.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetQueueSession</name>
                        <description>QueueSession QueueConnection::jmsGetQueueSession()
                            Returns a JMS queue session from the given connection factory.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsGetTextFromMsg</name>
                        <description>String JMSMessage::jmsGetTextFromMsg()
                            Returns a string containing the entire content of a JMS message, including headers.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsReceiveMsg</name>
                        <description>JMSMessage QueueSession::jmsReceiveMsg(String queueName, Integer
                            timeout[, String messageSelector, JMSMessage messageToReceiveReplyFor,
                            Context ctx])
                            (METHOD DEPRECATED. Use jmsReceiveMsgFromQueue() instead). Receives a
                            JMS Message. Times out after TIMEOUT milliseconds. If INBOUNDQUEUE is not
                            null, looks on that queue. If ctx is provided, INBOUNDQUEUE is assumed to be a
                            JNDI name: otherise INBOUNDQUEUE is assumed to be a queue name in
                            vendor-specific format. If INBOUNDQUEUE is null, and
                            MESSAGETORECEIVEREPLYFOR is not null, looks on the queue defined in the
                            "Reply-To" field of MESSAGETORECEIVEREPLYFOR. If INBOUNDQUEUE is null
                            and MESSAGETORECEIVEREPLYFOR is null, throws an AustinException. We now
                            know which queue will be used. If MESSAGESELECTOR and
                            MESSAGETORECEIVEREPLYFOR are both null, selects the first message from that
                            queue. Otherwise selects the first message from the queue (if any) fulfilling all of the
                            conditions defined by MESSAGESELECTOR and
                            MESSAGETORECEIVEREPLYFOR. If MESSAGETORECEIVEREPLYFOR is not
                            null, rejects any message not having a correlation ID equal to
                            MESSAGETORECEIVEREPLYFOR's message ID. If MESSAGESELECTOR is not
                            null, rejects any message not fulfilling the condition defined in messageSelector. If no
                            appropriate message is found, returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsReceiveMsgFromQueue</name>
                        <description>JMSMessage QueueSession::jmsReceiveMsgFromQueue(javax.jms.Queue
                            queue, Integer timeout[, String messageSelector, JMSMessage
                            messageToReceiveReplyFor])
                            Receives a JMS Message. Times out after TIMEOUT milliseconds. If
                            INBOUNDQUEUE is not null, looks on that queue. If INBOUNDQUEUE is null, and
                            MESSAGETORECEIVEREPLYFOR is not null, looks on the queue defined in the
                            "Reply-To" field of MESSAGETORECEIVEREPLYFOR. If INBOUNDQUEUE is null
                            and MESSAGETORECEIVEREPLYFOR is null, throws an AustinException. We now
                            know which queue will be used. If MESSAGESELECTOR and
                            MESSAGETORECEIVEREPLYFOR are both null, selects the first message from that
                            queue. Otherwise selects the first message from the queue (if any) fulfilling all of the
                            conditions defined by MESSAGESELECTOR and
                            MESSAGETORECEIVEREPLYFOR. If MESSAGETORECEIVEREPLYFOR is not
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>null, rejects any message not having a correlation ID equal to</name>
                        <description>MESSAGETORECEIVEREPLYFOR's message ID. If MESSAGESELECTOR is not
                            null, rejects any message not fulfilling the condition defined in messageSelector. If no
                            appropriate message is found, returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsSendMsg</name>
                        <description>JMSMessage QueueSession::jmsSendMsg(JMSMessage msg, String
                            queueName[, HashMap properties, JMSMessage messageToReplyTo, Context
                            ctx])
                            (METHOD DEPRECATED. Use jmsSendMsgToQueue() instead). Sends message
                            MSG and returns MSG or null. The message is sent to the queue specified by
                            OUTBOUNDQUEUE, unless OUTBOUNDQUEUE is null. If ctx is provided,
                            OUTBOUNDQUEUE is assumed to be a JNDI name. If ctx is not provided,
                            OUTBOUNDQUEUE is assumed to be a queue name in vendor-specific format. If
                            OUTBOUNDQUEUE is null, MSG is sent to the reply-to queue of
                            MESSAGETOREPLYTO, if MESSAGETOREPLYTO is provided. If
                            OUTBOUNDQUEUE is null and MESSAGETOREPLYTO is not provided, throws an
                            AustinException. If MESSAGETOREPLYTO is provided, the message id is read from
                            it. PROPERTIES is a map from string keys to string values. There is one special
                            (non-JMS) key: "TRIGO_INCOMING_REPLY_QUEUE".
                            "TRIGO_INCOMING_REPLY_QUEUE" indicates the queue name to which an
                            external application should send replies to this message. If ctx is provided, the value
                            of "TRIGO_INCOMING_REPLY_QUEUE" is assumed to be a JNDI name: otherwise
                            it is assumed to be a queue name in vendor-specific format.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsSendMsgToQueue</name>
                        <description>JMSMessage QueueSession::jmsSendMsgToQueue(JMSMessage msg,
                            javax.jms.Queue outboundQueue [, HashMap properties, JMSMessage
                            messageToReplyTo,])
                            Sends message MSG and returns MSG or null. The message is sent to the queue
                            specified by OUTBOUNDQUEUE, unless OUTBOUNDQUEUE is null. If
                            OUTBOUNDQUEUE is null, MSG is sent to the reply-to queue of
                            MESSAGETOREPLYTO, if MESSAGETOREPLYTO is provided. If
                            OUTBOUNDQUEUE is null and MESSAGETOREPLYTO is not provided, throws an
                            AustinException. If MESSAGETOREPLYTO is provided, the message id is read from
                            it. PROPERTIES is a map of string keys to string values with a single key value that
                            is acted on. This special (non-JMS) key is "TRIGO_INCOMING_REPLY_QUEUE"
                            whose value is the javax.jms.Queue object to which an external application should
                            send the replies to this message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>jmsSetMessageText</name>
                        <description>void JMSMessage::jmsSetMessageText(String msgText)
                            Sets the provided text for the JMS TextMessage. Only JMS TextMessage type is
                            supported.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_lkp</name>
                <description></description>
                <list>
                    <object>
                        <name>addRow</name>
                        <description>Boolean LookupTable::addRow(String sKey, String sValue), Boolean
                            LookupTable::addRow(String sKey, String[] asValues)
                            Add a new row to this lookup table - with value(s) sValue/asValues for the key sKey.
                            Returns TRUE if and only if the add was successful.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>addRowByOrder</name>
                        <description>Boolean LookupTable::addRowByOrder(String sKey, String sValue), void
                            LookupTable::addRow(String sKey, String[] asValues)
                            Add a new row to this lookup table - with value(s) sValue/asValues for the key sKey
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>containsUsingLookupTable</name>
                        <description>Boolean String::containsUsingLookupTable(LookupTable lkp)
                            Return true if and only if the string contains at least one of the keys from the lookup
                            table
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteLookupTable</name>
                        <description>deleteLookuptable(LookupTable lkp)
                            Delete the lookup table lkp. WARNING: Transactional disruption will occur: This
                            script operation will roll back any existing transaction, and will leave the database
                            connection in auto-commit. This script operation should be used carefully; for
                            example, it should not be called in a catchError block.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getKeysFromValues</name>
                        <description>String[] LookupTable::getKeysFromValues(String[] values)
                            Reverse lookup of keys using values from the lookup table. The values can either be
                            Paths in the Spec or the column number of the lookup table starting from 0 and not
                            including the Key column.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLkpByName</name>
                        <description>LookupTable getLkpByName(String name, [Boolean isReadOnly])
                            Returns the lookup table object with the corresponding name. By default the lookup
                            table is read-only, but can be made mutable by setting the isReadOnly parameter to
                            false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLkpId</name>
                        <description>Integer LookupTable::getLkpId()
                            Return the id of this lookup table.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLkpKeys</name>
                        <description>String[] LookupTable::getLkpKeys()
                            Return the keys of this lookup table
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>lookup</name>
                        <description>String lookup(String sLookupTableName, String sKey [, String sSecKey]),
                            String lookup(LookupTable lkp, String sKey [, String sSecKey])
                            Returns the sSecKey-th value for sKey in the lookup table sLookupTableName or lkp
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>lookupValues</name>
                        <description>String[] lookupValues(LookupTable lkp, String sKey)
                            Returns values for sKey in the lookup table lkp
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>put</name>
                        <description>void put(String sLkpTableName, String sStartKey, String sValue), void
                            put(String sLkpTableName, String sStartKey, String[] asValues)
                            Put a new row in the lookup table sLkpTableName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replaceUsingLookupTable</name>
                        <description>String String::replaceUsingLookupTable(LookupTable lkp)
                            Return a string in which any substring matching a key in the lookup table is replace
                            by the corresponding value
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_locale</name>
                <description></description>
                <list>
                    <object>
                        <name>addToCompanyLocales</name>
                        <description>void addToCompanyLocales(Locale []companyLocales)
                            Adds the given locales to the list of locales that are defined for the company.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCompanyLocales</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>Locale[] getCompanyLocales()</name>
                        <description>Returns the locales that are part of the current company</description>
                        <list/>
                    </object>
                    <object>
                        <name>getCustomMessage</name>
                        <description>String getCustomMessage(String id, [Locale loc])
                            Given message id (and locale), returns description of the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultACGName</name>
                        <description>String getDefaultACGName()
                            Returns the name of default ACG in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultAttrCollectionName</name>
                        <description>String getDefaultAttrCollectionName(String specName)
                            Returns the name of default lookup table hierarchy in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultCharset</name>
                        <description>Locale getDefaultCharset()
                            Returns default charset of the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultLktHierarchyName</name>
                        <description>String getDefaultLktHierarchyName()
                            Returns the name of default lookup table hierarchy in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultLocale</name>
                        <description>Locale getDefaultLocale()
                            Returns default locale of the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultOrgHierarchyName</name>
                        <description>String getDefaultOrgHierarchyName()
                            Returns the name of default organization hierarchy in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultSpecDispNameAttribute</name>
                        <description>String getDefaultSpecDispNameAttribute()
                            Returns the display name attribute of default spec in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultSpecName</name>
                        <description>String getDefaultSpecName()
                            Returns the name of default spec in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultSpecNameAttribute</name>
                        <description>String getDefaultSpecNameAttribute()
                            Returns the name attribute of default spec in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultSpecPathAttribute</name>
                        <description>String getDefaultSpecPathAttribute()
                            Returns the path attribute of default spec in the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocaleCode</name>
                        <description>String Locale::getLocaleCode()
                            Returns the 5 letter code (2 letter language code + underscore + 2 letter country
                            code) for the given locale.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocaleDisplayName</name>
                        <description>String Locale::getLocaleDisplayName()
                            Returns a description of the locale suitable for display.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocalizedSpecNames</name>
                        <description>Spec[] getLocalizedSpecNames()
                            Returns all the specs that are localized.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSystemMessageById</name>
                        <description>String getSystemMessageById(int id, [Locale loc])
                            Given message id (and locale), returns description of the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSystemMessageByName</name>
                        <description>String getSystemMessageByName(String msg_name, [Locale loc])
                            Given message name (and locale), returns description of the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserLocale</name>
                        <description>Locale getUserLocale()
                            Returns the locale that is selected by the user for browsing content
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Locale</name>
                        <description>new Locale(String language_code, String country_code)
                            Returns a locale with the language and country (two letter codes) combination
                            specified. Throws exception if it is not supported.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeFromCompanyLocales</name>
                        <description>void removeFromCompanyLocales(Locale []companyLocales)
                            Removes the given locales from the list of locales that are defined for the company.
                            This will also remove the given locales from any specs that are localized using them.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replaceCompanyLocales</name>
                        <description>void replaceCompanyLocales(Locale []companyLocales)
                            Sets the given locales for the company. Removes any existing locales. This will also
                            remove any locales removed as a result of this operation, from any specs that are
                            localized using them. For example: Current locales are en_US and fr_FR. Calling
                            replaceCompanyLocales({en_US,de_DE}) will result in (1) en_US and de_DE are
                            removed from company. (2) company locales are set to en_US and de_DE (3) any
                            specs localized with fr_FR will have fr_FR removed from them.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_mq</name>
                <description></description>
                <list>
                    <object>
                        <name>mqDisconnect</name>
                        <description>void MQQueueManager::mqDisconnect()
                            Disconnects from the given queue manager.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetMessageDiagnostics</name>
                        <description>String mqGetMessageDiagnostics(MQMessage message)
                            Returns a string containing diagnostic information about the given message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetMessageId</name>
                        <description>String MQMessage::mqGetMessageId()
                            Returns the ID of the given message as a String containing a hexadecimal number.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetQueueMgr</name>
                        <description>MQQueueManager mqGetQueueMgr(String hostname, String port, String
                            channel, String queueMgrName)
                            Creates and returns a new MQ queue manager with the given properties.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetReceivedMsg</name>
                        <description>MQMessage MQQueueManager::mqGetReceivedMsg(String queueName, String
                            queueOpenOptions, String messageGetOptions)
                            Receives a message from queueName. Returns the message, as a MQMessage, or
                            null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetReceivedMsgByMessageID</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>MQMessage MQQueueManager::mqGetReceivedMsgByMessageID(String</name>
                        <description>queueName, String messageId, String passedInQueueOpenOptions, String
                            passedInMessageGetOptions)
                            Finds the message in the given queue with given message ID. The ID is passed in a
                            a String containing a hexadecimal number. Returns null if there is no such message
                            in the given queue.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetResponseToMsg</name>
                        <description>MQMessage MQQueueManager::mqGetResponseToMsg(MQMessage
                            outgoingMessage, String queueOptions, String messageOptions)
                            Gets the response to the given message from the given queue.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetTextFromMsg</name>
                        <description>String mqGetTextFromMsg(MQMessage mqMessage)
                            Returns a string containing the entire content of a MQMessage, including headers.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqGetXMLMessageContent</name>
                        <description>String mqGetXMLMessageContent(String orgXmlMsg)
                            Discards any garbage at the beginning of the input string to get a XML document.
                            More precisely, behaves as follows: If the input string is of the form A + B, where B is
                            a valid XML document and A is any (possibly empty) string, this operation returns B.
                            Otherwise, returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqSendReply</name>
                        <description>MQMessage MQQueueManager::mqSendReply(MQMessage receivedMsg,
                            String msgText, String passedInQueueOpenOptions, String
                            passedInMessagePutOptions)
                            Sends a reply to the given message, without indicating success or failure.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqSendReplyWithStatus</name>
                        <description>MQMessage MQQueueManager::mqSendReplyWithStatus(MQMessage
                            receivedMsg, String msgText, String status, String
                            passedInQueueOpenOptions, String passedInMessagePutOptions)
                            Sends a reply to the given message, setting the feedback field to indicate the given
                            status. Status must be one of the following (in upper or lower case): "SUCCESS",
                            "FAIL", "VALCHANGE", "VALDUPES", "MULTIPLE_HITS",
                            "FAIL_RETRIEVE_BY_CONTENT", "BO_DOES_NOT_EXIST",
                            "UNABLE_TO_LOGIN", "APP_RESPONSE_TIMEOUT", "NONE".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqSendTextMsg</name>
                        <description>MQMessage MQQueueManager::mqSendTextMsg(String msgText, String
                            queueName, String queueOpenOptions, String messagePutOptions)
                            Sends a message provided in the String msgText over queueName. Returns the
                            MQMessage
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mqSendTextMsgWithReply</name>
                        <description>MQMessage MQQueueManager::mqSendTextMsgWithReply(String msgText,
                            String queueName, String replyQueueName, String queueOpenOptions, String
                            messagePutOptions)
                            Sends a message provided in the String msgText over queueName. The reply queue
                            is specified. Returns the MQMessage object.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_mutablespec</name>
                <description></description>
                <list>
                    <object>
                        <name>addSubSpec</name>
                        <description>Boolean Spec::addSubSpec(Spec subSpec)
                            Adds an entire SubSpec using a SubSpec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildSpec</name>
                        <description>Spec buildSpec(String specName, String specType, [Spec specFileType])
                            Returns a new spec object with the given name and type. Valid types are
                            PRIMARY_SPEC, SECONDARY_SPEC, FILE_SPEC, MKT_SPEC, SUB_SPEC,
                            LKP_SPEC, SCRIPT_INPUT_SPEC. The optional parameter specFileType is
                            actually mandatory for the spec of type FILE_SPEC but not applicable to any other
                            type. specFileType specifies the data file type of the file spec. Valid data file types are
                            "D", "T", "C", "F", "X", and "G" which stand for DELIMITED, TAB_DELIMITED, CSV,
                            FIXEDWIDTH, XML, GENERATED_DURING_FEED. If the specFileType field is
                            omitted when specifying a FILE_SPEC an AustinException is thrown.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildSpecNode</name>
                        <description>Node buildSpecNode(Spec spec, String path, Integer order)
                            Returns a new node object of a spec with the given path and node order. Please
                            make sure to use a spec that has been obtained using the new Spec() or buildSpec
                            operation
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildTestSpec</name>
                        <description>Spec buildTestSpec(String name, String type, Integer fields)
                            Returns a new spec object with the specified name, type and number of fields in the
                            spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteSpec</name>
                        <description>void Spec::deleteSpec()
                            Delete this spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>exportXML</name>
                        <description>String IMutableSpec::exportXML()
                            Exports a WebSphere Product Center Spec to a String representing a XML file.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>exportXSD</name>
                        <description>String IMutableSpec::exportXSD()
                            Exports a WebSphere Product Center Spec to a String representing the contents of
                            XML Schema Definition.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>importXML</name>
                        <description>IMutableSpec importXML(String filename)
                            Imports a XML file to a WebSphere Product Center Spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>importXSD</name>
                        <description>IMutableSpec importXSD(String filename, String specName, String specType,
                            String primaryKeyPath, String maxAncestors, String topLevelNamespace,
                            String topLevelName, String archivedFilename)
                            Imports a XML Schema Definition file (.xsd) to a WebSphere Product Center Spec,
                            using the given parameters.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Spec</name>
                        <description>new Spec(String specName, String specType, [String specFileType])
                            Returns a new spec object with the given name and type. Valid types are
                            PRIMARY_SPEC, SECONDARY_SPEC, FILE_SPEC, MKT_SPEC, SUB_SPEC,
                            LKP_SPEC, SCRIPT_INPUT_SPEC. The optional parameter specFileType is
                            actually mandatory for the spec of type FILE_SPEC but not applicable to any other
                            type. specFileType specifies the data file type of the file spec. Valid data file types are
                            "D", "T", "C", "F", "X", and "G" which stand for DELIMITED, TAB_DELIMITED, CSV,
                            FIXEDWIDTH, XML, GENERATED_DURING_FEED. If the specFileType field is
                            omitted when specifying a FILE_SPEC an AustinException is thrown.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SpecLookupTableNode</name>
                        <description>new SpecLookupTableNode(Spec spec, String path, String lookupTableName,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>Integer order)</name>
                        <description>Returns a new node created in the spec according to the path and order with the
                            specified Look up table attached.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SpecNode</name>
                        <description>new SpecNode(Spec spec, String path, Integer order)
                            Returns a new node created in the spec according to the path and order.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeNode</name>
                        <description>Boolean Spec::removeNode(String path)
                            Removes a node from a spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveSpec</name>
                        <description>void Spec::saveSpec()
                            Save this spec to the database
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAttribute</name>
                        <description>void Node::setAttribute(String sAttributeName, String sValue, [Boolean
                            dontReplace])
                            Set an attribute of a node or a spec. Please consult the documentation for allowable
                            values of sAttributeName. Common values are MAX_OCCURRENCE,
                            MIN_OCCURRENCE, TYPE, DEFAULT_VALUE. If the optional third parameter
                            "dontReplace" is supplied, and is true, or we are dealing with a node rather than a
                            spec, sValue is added to any existing values for this attribute rather than replacing
                            them.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAttributes</name>
                        <description>void Node::setAttributes(String sAttributeName, HashMap sValues)
                            Set an attribute of a node or a spec to a set of values contained in the sValues
                            HashMep. Any existing values are deleted before the new values are added. Please
                            consult the documentation for allowable values of sAttributeName.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setNodeName</name>
                        <description>void IMutableSpec::setNodeName(String path, String newNodeName)
                            Renames the node in the given spec with the given path to newNodeName. Throws
                            an exception if any of the following conditions is true: (i) there is no node at the given
                            path in the given spec. (ii) there is a node at the given path in the given spec, but it is
                            not a leaf node. (iii) there is a node at the given path in the given spec, but it is a
                            primary key. (iv) there is already a node at the given path with newNodeName. (v) the
                            name is an invalid name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setPrimaryKeyPath</name>
                        <description>void Spec::setPrimaryKeyPath(String primaryKeyPath)
                            Sets the primaryKeyPath of this spec to the given path. Throws an AustinException
                            under any of the following conditions: 1. The spec is not a primary spec or lookup
                            spec. 2. The path does not exist in the spec. 3. The path refers to a node included
                            from a SubSpec, and the node does not have minimum occurrence and maximum
                            occurrence both set to 1.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_perf</name>
                <description></description>
                <list>
                    <object>
                        <name>beginPerf</name>
                        <description>beginPerf(String name)
                            Starts timing current block for perf. logging
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>endPerf</name>
                        <description>endPerf(String name)
                            Ends timing current block for perf. logging
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTimerElapsedTime</name>
                        <description>Integer Timer::getTimerElapsedTime()
                            Return the time elapsed between start and stop.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Timer</name>
                        <description>new Timer()
                            Create (and start) a timer.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startTimer</name>
                        <description>Timer::startTimer()
                            Start the timer.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>stopTimer</name>
                        <description>Timer::stopTimer()
                            Stop the timer.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_queuemgr</name>
                <description></description>
                <list>
                    <object>
                        <name>createQueue</name>
                        <description>IMsgQueue createQueue (String queueName, String queueDesc,
                            MsgQueueProtocolEnum protocol, String syncScriptPath))
                            Creates a new queue with the given parameters.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMessageFromQueue</name>
                        <description>Message getMessageFromQueue (String queueName, Integer index)
                            Gets the indexth oldest message from the given queue, index starting with 1. For
                            example, getMessageFromQueue("Queue1", 2) would return the 2nd oldest message
                            from the queue with name "Queue1". If there is no such message or queue, returns
                            null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgAppResponse</name>
                        <description>Void Message::getMsgAppResponse()
                            Initiates the request for response for a message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgAppResponseDoc</name>
                        <description>Doc Message::getMsgAppResponseDoc()
                            Returns the Doc object for the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgAttachments</name>
                        <description>HashMap Message::getMsgAttachments ()
                            Returns a HashMap of attachment names to attachments for the given message..
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgByMsgId</name>
                        <description>Message getMsgByMsgId(String msgId)
                            Returns the message object with the message id msgId null otherwise.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgDoc</name>
                        <description>Doc Message::getMsgDoc()
                            Returns the Doc object for the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgId</name>
                        <description>String Message::getMsgId()
                            Returns the generated unique id for the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgProtocolResponseDoc</name>
                        <description>Doc Message::getMsgProtocolResponseDoc()
                            Returns the Doc object for the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgQueue</name>
                        <description>MsgQueue Message::getMsgQueue()
                            Returns the MsgQueue object for the message.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMsgQueueName</name>
                        <description>String MsgQueue::getMsgQueueName()
                            Returns the name of this message queue.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>qmgrGetMsgQueueByName</name>
                        <description>MsgQueue qmgrGetMsgQueueByName(String queueName)
                            Returns the queue if present in the system.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sendMsg</name>
                        <description>Message MsgQueue::sendMsg(Doc doc)
                            Sends the message. If successful, will return a message object. If it fails it will return
                            null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setMsgDoc</name>
                        <description>void Message::setMsgDoc(IDoc doc)
                            Sets the Doc object for the message.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_report</name>
                <description></description>
                <list>
                    <object>
                        <name>getReportByName</name>
                        <description>Report getReportByName(String reportName)
                            Return a report if one exists with the specified name and null otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Report</name>
                        <description>new Report(String reportName, String reportScriptName, Distribution dist)
                            Return a new report object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>renderHorizontalBars</name>
                        <description>String renderHorizontalBars(Integer barWidth, Integer barHeight, Integer[]
                            anLengths, String[] asLabels)
                            Return an HTML table to display horizontal bars - anHeights[i] should have the length
                            of the i-th bar and asLabels[i] the tooltip for the i-th bar
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>renderVerticalBars</name>
                        <description>String renderVerticalBars(Integer barWidth, Integer barHeight, Integer[]
                            anLengths, String[] asLabels)
                            Return an HTML table to display vertical bars - anHeights[i] should have the length of
                            the i-th column and asLabels[i] the tooltip for the i-th column
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_scheduler</name>
                <description></description>
                <list>
                    <object>
                        <name>queryJobCompletionPercentage</name>
                        <description>Integer queryJobCompletionPercentage(Integer scheduleID)
                            Queries the completion percentage of the specified job. Method will return percent
                            complete as Integer if the job is currently running, null otherwise.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>queryJobStatus</name>
                        <description>String queryJobStatus(Integer scheduleID)
                            Queries the specified job if it is currently running. Method will return one of
                            "Completed Running", "Running", "System Error", "Error Completing", "Not Started".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>runJob</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>Integer runJob(String jobName, String jobType)</name>
                        <description>Runs the specified job immediately. Returns the scheduleID for the job. Job type
                            will
                            be one of "CTGTODB", "DBTOMKT", "REPORTEXE", or
                            "CATALOGTOCATALOGEXPORT". * CTGTODB should be used for imports *
                            DBTOMKT should be used for exports * REPORTEXE should be used for reports *
                            CATALOGTOCATALOGEXPORT should be used for catalog exports
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>stopJob</name>
                        <description>void stopJob(Integer scheduleID)
                            Stops the specified job if it is currently running.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_search</name>
                <description></description>
                <list>
                    <object>
                        <name>copySearchItemData</name>
                        <description>void Selection::copySearchItemData(Item searchItem[, Boolean append])
                            Copy item search data to search selection where the item was retrieved from a
                            search result set. Use the optional append argument if you want to add data to
                            existing data.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>copySearchItemLocationTreeData</name>
                        <description>void Selection::copySearchItemLocationTreeData(Item searchItem,
                            CategoryTree locationTree[, Boolean append])
                            Copy item search data to search selection where the item was retrieved from a
                            search result set. Data is added for locations for given location tree. Use the optional
                            append argument if you want to add data to existing data.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteSearchTemplate</name>
                        <description>void SearchTemplate::deleteSearchTemplate()
                            Delete this search template
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>execute</name>
                        <description>SearchResultSet SearchQuery::execute()
                            Execute the search query.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>executeInBackground</name>
                        <description>Schedule SearchQuery::executeInBackground(String selectionName)
                            Execute the search query in background and save result as a selection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getBoolean</name>
                        <description>boolean SearchResultSet::getBoolean(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a boolean.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCategory</name>
                        <description>Category SearchResultSet::getCategory(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a Category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDate</name>
                        <description>Date SearchResultSet::getDate(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a Date.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDouble</name>
                        <description>double SearchResultSet::getDouble(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a double.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFloat</name>
                        <description>float SearchResultSet::getFloat(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a float.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getHierarchy</name>
                        <description>CategoryTree SearchResultSet::getHierarchy(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a CategoryTree.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getInt</name>
                        <description>int SearchResultSet::getInt(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as an int.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getItem</name>
                        <description>Item SearchResultSet::getItem(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as an Item.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLong</name>
                        <description>long SearchResultSet::getLong(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a long.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSearchTemplateByName</name>
                        <description>SearchTemplate getSearchTemplateByName(String name)
                            Return the search template with the given name. Otherwise it becomes null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSearchTemplateName</name>
                        <description>String SearchTemplate::getSearchTemplateName()
                            Return the name of this search template
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpec</name>
                        <description>Spec SearchResultSet::getSpec(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a Spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getString</name>
                        <description>String SearchResultSet::getString(int columnIndex)
                            Get the value of the designated column in the current row of this SearchResultSet
                            object as a String.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isDefined</name>
                        <description>boolean SearchResultSet::isDefined(int columnIndex)
                            Return true if the value of the designated column in the current row of this
                            SearchResultSet object is defined; otherwise, return false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>moveCursor</name>
                        <description>boolean SearchResultSet::moveCursor(int position)
                            Change cursor position, where 0 &lt;= position &lt; size(). So if size() = 100, you can set
                            the position to 0, 1, ..., 98, 99. The return value is true if the cursor was moved (note
                            that you will have to call next() to fetch the row), or false if the cursor could not be
                            moved due to an incorrect position .
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SearchQuery</name>
                        <description>new SearchQuery(String queryString)
                            Create a search query.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SearchSelection</name>
                        <description>new SearchSelection(Catalog catalog, String name)
                            Return an empty search selection.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SearchTemplate</name>
                        <description>new SearchTemplate(String name, Array attrGroupNames, Container container,
                            String desc, [String colAreaName, String stepPath])
                            Return a new search template with the given name, container, and the set of attribute
                            group names. Also, search templates in a collaboration area step can be defined by
                            providing optional parameters colAreaName and stepPath.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>reset</name>
                        <description>SearchResultSet::reset()
                            Reset cursor position to first position. Similar to calling moveCursor(0)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setItemLocationData</name>
                        <description>void Selection::setItemLocationData(Item item, CategoryTree locationTree,
                            String[] locFullPaths, String delimiter, Boolean rootIncluded[, Boolean append])
                            Add item search data to search selection. Data is added for locations for given
                            location tree as an array of full category paths. Use the given delimiter to delimit the
                            path elements and set rootIncluded to true if path includes category tree root name.
                            Use the optional append argument if you want to add to existing data.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_soap</name>
                <description></description>
                <list>
                    <object>
                        <name>invokeSoapServer</name>
                        <description>Object invokeSoapServer(String sURL, String sMethodName, Object[]
                            aParamValues [,String[] aParamNames[, String userName, String password]] )
                            Invoke a soap server. SURL is the URL of the service. SMETHODNAME is the name
                            of the operation called. APARAMVALUES is an array containing the request
                            parameters. APARAMNAMES is an optional array containing the names of the
                            paramters. USERNAME is a username and company code separated by @, for
                            example user@company to be passed in and used if authentication is required for
                            this web service. PASSWORD is the password for the corresponding user in the
                            company, and is only used if authentication is required for this web service. Returns
                            the return value of the SOAP operation call.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>invokeSoapServerForDocLit</name>
                        <description>Object invokeSoapServerForDocLit(String sURL, String xmlRequestMsg)
                            Invoke a soap server for Document-Literal based web services. SURL is the URL of
                            the service. XMLREQUESTMSG is a string containing the request message in XML
                            format.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_spec</name>
                <description></description>
                <list>
                    <object>
                        <name>addToSpecLocales</name>
                        <description>void Spec::addToSpecLocales(Locale []newLocales)
                            Adds the given locales to the list of locales that are defined for the spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildSpecNodeName</name>
                        <description>String buildSpecNodeName(String name)
                            Returns the parsed name that was passed in so that it can be used as a spec node
                            name (spec node name only accept letters and characters, others are converted to
                            an underscore _)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocaleNode</name>
                        <description>Node Node::getLocaleNode(Locale locale)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns the localized node for the supplied locale.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocales</name>
                        <description>Object Spec::getLocales()
                            returns the locales associated with the spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeAttributeValue</name>
                        <description>String Node::getNodeAttributeValue(String attributeName)
                            Returns the value of this node's attribute, i.e. MAXLENGTH, MAX_OCCURRENCE,
                            MIN_OCCURRENCE, HELP_URL, TYPE, etc.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeAttributeValues</name>
                        <description>HashMap Node::getNodeAttributeValues(String attributeName)
                            Returns the values of this node's attributes in a Hash Map, i.e.
                            STRING_ENUMERATION.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeByPath</name>
                        <description>Node Spec::getNodeByPath(String path)
                            Returns the node object for path in this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeChildren</name>
                        <description>INode[] Node::getNodeChildren()
                            Returns the children for the node
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeDisplayName</name>
                        <description>String Node::getNodeDisplayName([Locale locale])
                            Returns the display name of a locale node. Optionally, if the node is the parent of the
                            locale nodes, pass in the locale for a particular locale node display name. If it is not
                            valid for the node to have a display name, will return null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeLocale</name>
                        <description>Locale Node::getNodeLocale()
                            Returns the locale object for this node if it is a locale specific node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeLookupTableName</name>
                        <description>String Node::getNodeLookupTableName()
                            Returns the name of the Lookup Table associated with this node, if one exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeName</name>
                        <description>String Node::getNodeName()
                            Returns the name of this node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodePath</name>
                        <description>String Node::getNodePath()
                            Returns the path of this node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNodeSpec</name>
                        <description>Spec Node::getNodeSpec()
                            Returns the spec object for this node.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPrimaryKeyNode</name>
                        <description>Node Spec::getPrimaryKeyNode()
                            Returns the primary-key node of this primary spec. If this is not a primary spec,
                            returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecAttribNames</name>
                        <description>String[] Spec::getSpecAttribNames()
                            Returns the names of each attribute(node) specified in the spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecAttribPaths</name>
                        <description>String[] Spec::getSpecAttribPaths()
                            Returns the paths of each attribute(node) specified in the spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecByName</name>
                        <description>Spec getSpecByName(String name, [Boolean bImmutable])
                            Returns the spec object with the corresponding name. By default, a mutable spec is
                            returned. If an immutable spec is needed, then an optional boolean parameter
                            bImmutable is specified to be true. Please note that only mutable specs can be
                            modified.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecMultiOccurAttributePaths</name>
                        <description>HashMap Spec::getSpecMultiOccurAttributePaths()
                            Returns the multi occurence attribute paths for this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecName</name>
                        <description>String Spec::getSpecName()
                            Returns the name of this spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecNameList</name>
                        <description>String[] getSpecNameList(HashMap filters)
                            Returns the names of the Specs that match the given filters. VALID Filters:
                            ("PATTERN", String) ("CONTAINER", Container Object) Will return only specs
                            attached to container ("SPECTYPE", String {"PRIMARY_SPEC",
                            "SECONDARY_SPEC", "LOOKUPTABLE_SPEC", "FILE_SPEC"} comma separated
                            list) ("LOCALIZED", String {YES, NO}) Will return only localized or only non-localized
                            specs
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecNodes</name>
                        <description>HashMap Spec::getSpecNodes()
                            Returns map of node paths to node objects for this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecPrimaryKeyAttributePath</name>
                        <description>String Spec::getSpecPrimaryKeyAttributePath()
                            Returns the primary key attribute path for this spec. Returns null if the path is not
                            valid for this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecSequenceAttributePaths</name>
                        <description>HashMap Spec::getSpecSequenceAttributePaths()
                            Returns the sequence attribute paths for this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecType</name>
                        <description>String Spec::getSpecType()
                            Returns the type of this spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecUniqueAttributePaths</name>
                        <description>HashMap Spec::getSpecUniqueAttributePaths()
                            Returns the unique attribute paths for this spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isLocalized</name>
                        <description>Boolean Spec::isLocalized()
                            Returns a boolean to indicate whether or not a spec is localized
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isNodeEditable</name>
                        <description>Boolean Node::isNodeEditable()
                            Returns true if the node is editable. Returns false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isNodeGrouping</name>
                        <description>Boolean Node::isNodeGrouping()</description>
                        <list/>
                    </object>
                    <object>
                        <name>Returns true if the node is a grouping node, false otherwise</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>isNodeIndexed</name>
                        <description>Boolean Node::isNodeIndexed()
                            Returns true if this node is indexed
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isNodeNonPersisted</name>
                        <description>Boolean Node::isNodeNonPersisted()
                            Returns true if the node is a non-persisted node, false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isNodeSpecRoot</name>
                        <description>Boolean Node::isNodeSpecRoot()
                            Returns true if the node is a spec root node, false otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loadSpecFromXML</name>
                        <description>void loadSpecFromXML(String specXml)
                            Creates spec defined in XMLSTRING. This spec can be loaded into different
                            companies, like you would do from the command line
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeFromSpecLocales</name>
                        <description>void Spec::removeFromSpecLocales(Locale []newLocales)
                            Removes the given locales from the list of locales that are defined for the spec.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replaceSpecLocales</name>
                        <description>void Spec::replaceSpecLocales(Locale []newLocales)
                            Sets the given locales for the spec. Removes any existing locales.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLocalized</name>
                        <description>void Spec::setLocalized(Boolean localized)
                            Sets the localized property of a spec
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setNodeEditable</name>
                        <description>void Node::setNodeEditable(Boolean)
                            Sets the node to be editable or non-editable
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setNodeIndexed</name>
                        <description>void Node::setNodeIndexed(Boolean)
                            Sets the node to be indexed or not
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_specmap</name>
                <description></description>
                <list>
                    <object>
                        <name>buildTestSpecMap</name>
                        <description>SpecMap buildTestSpecMap(String mapName, String mapType, Object source,
                            Object destination)
                            Returns a new spec map on the specified map type between the source and the
                            destination - first delete existing map if there is one. The mapType can be
                            FILE_CAT_MAP or CAT_MKT_MAP or FILE_CATALOG_MAP or
                            CATALOG_MKT_MAP or CATALOG_CATALOG_MAP. If source or destination is
                            catalog, user should pass Catalog object, else pass Spec object.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDefaultSpecMapName</name>
                        <description>(deprecated) String getDefaultSpecMapName()
                            See getSpecMapByName. Returns the name of the spec map being used for an
                            aggregation/syndication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecMapByName</name>
                        <description>SpecMap getSpecMapByName([String name])
                            Returns the specmap object with the corresponding name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecMapDstObject</name>
                        <description>Object SpecMap::getSpecMapDstObject()
                            Returns the destination object of this spec map
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSpecMapSrcObject</name>
                        <description>Object SpecMap::getSpecMapSrcObject()
                            Returns the source object of this specmap
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>map</name>
                        <description>void SpecMap::map(String sSrcPath, String sDstPath)
                            Add a mapping from sSrcPath to sDstPath to this spec map
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$SpecMap</name>
                        <description>new SpecMap(String mapName, String mapType, Object source, Object
                            destination)
                            Creates a new spec map of the given type between the source and destination
                            objects. The mapType can be FILE_CAT_MAP or CAT_MKT_MAP or
                            FILE_CATALOG_MAP or CATALOG_MKT_MAP or CATALOG_CATALOG_MAP.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveSpecMap</name>
                        <description>void SpecMap::saveSpecMap()
                            Save this spec map to the database
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_userdefinedlog</name>
                <description></description>
                <list>
                    <object>
                        <name>dumpUserDefinedLog</name>
                        <description>void UserDefinedLog::dumpUserDefinedLog(Writer out, String delim, String
                            outputType, String docTag, HashMap hmNodeTags)
                            Dump all log entries from the user defined log to the Writer provided in no specific
                            order. out - this is the output writer you want to dump the UDL to delim - the delimiter
                            used for the current UDL entries outputType - one of COPY_UDE_OUTPUT,
                            CSV_OUTPUT, XML_OUTPUT COPY_UDE_OUTPUT: dump each UDL entry
                            exactly how it is currently stored CSV_OUTPUT: dump each UDL entry as comma
                            seperated values XML_OUTPUT: dump each UDL entry within XML tags; docTag
                            and hmNodeTags must also be specified docTag - this will comprise the XML tag
                            surrounding the UDL dump hmNodeTags - this is the array of labels for each subtag
                            to surround each delimited value
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachUserDefinedLogEntry</name>
                        <description>forEachUserDefinedLogEntry(UserDefinedLog UDL, [Entry e,] String[]
                            logEntries [, Boolean bReturnMultipleLogEntries = true]) { statements }
                            Executes the statements for each group of log entries in the given UserDefinedLog
                            or, if Entry e is defined, each log entry for that specific Entry. If
                            bReturnMultipleLogEntries is false, the array of log entries will contain only the first
                            (oldest) log in chronological order. This is only a valid option if Entry e is not defined.
                            If bReturnMultipleLogEntries is true, all logs are populated in the array in ascending
                            chronological order for a given Entry (oldest first). By default,
                            bReturnMultipleLogEntries is true.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserDefinedLog</name>
                        <description>UserDefinedLog Container::getUserDefinedLog(String name)
                            Returns the user defined log object having the given name, for this container
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>insertUserDefinedLog</name>
                        <description>void UserDefinedLog::insertUserDefinedLog()
                            Persist the new user defined log object to the database.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isUserDefinedLogNew</name>
                        <description>Boolean UserDefinedLog::isUserDefinedLogNew()
                            Check if the user defined log has been saved in the database.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>newUserDefinedLog</name>
                        <description>UserDefinedLog Container::newUserDefinedLog(String name, String
                            description, Boolean isRunningLog)
                            Returns a new user defined log object for this container with the given name and
                            description. Will throw an exception if a log with the same name already exists for the
                            container.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>newUserDefinedLogEntry</name>
                        <description>newUserDefinedLogEntry(Date date, Container container, Entry entry, String
                            log [, Entry category])
                            Returns a new user defined log entry object with for the specified entry which is either
                            an item or category (with date/timestamp and log). If the category is also provided the
                            logs will only be associated to that category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveUserDefinedLog</name>
                        <description>void UserDefinedLog::saveUserDefinedLog()
                            Update the persisted user defined log object in the database.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startBatchProcessingForUserDefinedLog</name>
                        <description>void UserDefinedLog::startBatchProcessingForUserDefinedLog()
                            Setup batch processing for the given User Defined Log. This operation is to be used
                            mainly during import/mass update jobs.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>stopBatchProcessingForUserDefinedLog</name>
                        <description>void UserDefinedLog::stopBatchProcessingForUserDefinedLog()
                            Stop batch processing for the given User Defined Log. This operation is to be used
                            mainly during import/mass update jobs.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogAddEntry</name>
                        <description>void UserDefinedLog::userDefinedLogAddEntry(Entry entry, [String
                            log_message], [Entry category])
                            Add an entry to the user defined log. If a message is specified, set that for the
                            UserDefinedLogEntry. If the category is provided then the logs are only restricted for
                            that category.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogDelete</name>
                        <description>void UserDefinedLog::userDefinedLogDelete()
                            Remove the user defined log object from the database. This action will also drop all
                            entries to the log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogDeleteEntriesFor</name>
                        <description>void UserDefinedLog::userDefinedLogDeleteEntriesFor(Entry entry [, Entry
                            category])
                            Delete all log entries for an entry from the user defined log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogDeleteEntry</name>
                        <description>void UserDefinedLog::userDefinedLogDeleteEntry(UserDefinedLogEntry entry)
                            Delete a particular entry from the user defined log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogEntryGetDate</name>
                        <description>Date UserDefinedLogEntry::userDefinedLogEntryGetDate()
                            Get the date of the user defined log entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogEntryGetTarget</name>
                        <description>Entry UserDefinedLogEntry::userDefinedLogEntryGetTarget([Boolean</description>
                        <list/>
                    </object>
                    <object>
                        <name>containerIsCatalog)]</name>
                        <description>Get the entry object of the user defined log entry. If CONTAINERISCATALOG is true
                            or is left unspecified, the entry must be in a catalog. If CONTAINERISCATALOG is
                            false, the entry must be in a hierarchy.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogEntryGetValue</name>
                        <description>String UserDefinedLogEntry::userDefinedLogEntryGetValue()
                            Get the value of the user defined log entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogEntrySetDate</name>
                        <description>void UserDefinedLogEntry::userDefinedLogEntrySetDate(Date date)
                            Set the date of the user defined log entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogEntrySetValue</name>
                        <description>void UserDefinedLogEntry::userDefinedLogEntrySetValue(String log_message)
                            Set the log of the user defined log entry.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogGetContainer</name>
                        <description>Container UserDefinedLog::userDefinedLogGetContainer()
                            Get the container that is logged by the user defined log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogGetDescription</name>
                        <description>String UserDefinedLog::userDefinedLogGetDescription()
                            Get the description of the user defined log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogGetEntriesFor</name>
                        <description>UserDefinedLogEntry[] UserDefinedLog::userDefinedLogGetEntriesFor(Entry
                            entry[, Entry category])
                            Get all log entries for an entry from the user defined log. The category can be
                            provided in order to get the logs associated for that category only.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogGetName</name>
                        <description>String UserDefinedLog::userDefinedLogGetName()
                            Get the name of the user defined log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogIsRunningLog</name>
                        <description>Boolean UserDefinedLog::userDefinedLogIsRunningLog()
                            Returns whether this user defined log is a running-log.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogSetDescription</name>
                        <description>void UserDefinedLog::userDefinedLogSetDescription(String desc)
                            Set the description of the user defined log. NOTE: You need to call
                            insertUserDefinedLog/saveUserDefinedLog to persist this change.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>userDefinedLogSetName</name>
                        <description>void UserDefinedLog::userDefinedLogSetName(String name)
                            Set the name of the user defined log. NOTE: You need to call
                            insertUserDefinedLog/saveUserDefinedLog to persist this change.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_webservices</name>
                <description></description>
                <list>
                    <object>
                        <name>createWebService</name>
                        <description>WebService createWebService(String name, String implclass, String desc,
                            String wsdlDocPath, String wsddDocPath, String protocol, String style, String
                            implScriptPath, Boolean storeIncoming, Boolean storeOutgoing, Boolean
                            deployed [, Boolean authRequired, Boolean skipRequestValidation, Boolean
                            skipResponseValidation])
                            Creates a new web service with the given parameters. To save and deploy the web
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>service(if DEPLOYED is true), call saveWebService(). NAME is the name of the</name>
                        <description>service. IMPLCLASS is the java class for java based web services or "" for script
                            based ones, DESC is the description of the service. WSDLDOCPATH is the doc path
                            at which the WSDL is stored. WSDDDOCPATH is the doc path at which the WSDD is
                            stored. PROTOCOL is the protocol. Currently, "SOAP_HTTP" is the only supported
                            protocol. STYLE is the message style. Currently, RPC_ENCODED and
                            DOCUMENT_LITERAL are supported. IMPLSCRIPTPATH is the doc path of the
                            service implementation script. It is the callers responsibility to ensure that
                            WSDLDOCPATH, WSDDDOCPATH and IMPLSCRIPTPATH do not cause the
                            documents for any other web service to be overwritten. STOREINCOMING
                            determines whether incoming requests are stored. STOREOUTGOING determines
                            whether outgoing request are stored. DEPLOYED determines whether the service will
                            be deployed. AUTH_REQUIRED determines whether a username, company name,
                            and password are required to invoke this web service. SKIPREQUESTVALIDATION
                            determines whether the inbound SOAP message is validated against WSDL schema.
                            SKIPRESPONSEVALIDATION determines whether the outbound SOAP message is
                            validated against WSDL schema. If a web service with the name of NAME already
                            exists, throws an AustinException.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteWebService</name>
                        <description>void WebService::deleteWebService()
                            Deletes the web service in the DB and undeploys it.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getDesc</name>
                        <description>String WebService::getDesc()
                            Returns the description of this web service
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getImplclass</name>
                        <description>String WebService::getImplclass()
                            Returns the fully qualified name of the implementation class of this web service
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getImplScriptPath</name>
                        <description>String WebService::getImplScriptPath()
                            Returns the docstore path where the implementation script for this web service is
                            stored.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getName</name>
                        <description>String WebService::getName()
                            Returns the name of this web service
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getProtocol</name>
                        <description>String WebService::getProtocol()
                            Returns the protocol for this web service.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStoreIncoming</name>
                        <description>Boolean WebService::getStoreIncoming()
                            Returns whether incoming messages for this web service are stored.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStoreOutgoing</name>
                        <description>Boolean WebService::getStoreOutgoing()
                            Returns whether outgoing messages for this web service are stored.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getStyle</name>
                        <description>String WebService::getStyle()
                            Returns the style for this web service.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUrl</name>
                        <description>String WebService::getUrl()
                            Returns the URL for this web service
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWebServiceByName</name>
                        <description>WebService getWebServiceByName (String name)
                            Returns the web service with the given name. If there is no such web service, returns
                            null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWsddDocPath</name>
                        <description>String WebService::getWsddDocPath()
                            Returns the docstore path where the WSDD for this web service is stored.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWsdlDocPath</name>
                        <description>String WebService::getWsdlDocPath()
                            Returns the docstore path where the WSDL for this web service is stored.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWsdlUrl</name>
                        <description>String WebService::getWsdlUrl()
                            Returns the WSDL URL for this web service
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isAuthRequired</name>
                        <description>Boolean WebService::isAuthRequired()
                            Returns whether this web service requires authentication
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isDeployed</name>
                        <description>Boolean WebService::isDeployed()
                            Returns whether this web service is deployed.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>listTransactions</name>
                        <description>void WebService::listTransactions()
                            List the recorded transactions in order of date (undocumented, for internal use only).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveWebService</name>
                        <description>void WebService::saveWebService()
                            Saves the web service in the DB. If deployment setting have changed, they take
                            effect upon saving.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAuthRequired</name>
                        <description>void WebService::setAuthRequired(Boolean authRequired)
                            Sets whether this WebService requires authentication. The setting will take effect
                            upon saving.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDeployed</name>
                        <description>void WebService::setDeployed(Boolean deployed)
                            Sets whether this WebService is deployed. The setting will take effect upon saving..
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setDesc</name>
                        <description>void WebService::setDesc(String desc)
                            Sets the description of the given WebService.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setImplclass</name>
                        <description>void WebService::setImplclass(String implclass)
                            Sets the fully qualified name of the implementation class of the given WebService.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setImplScriptPath</name>
                        <description>void WebService::setImplScriptPath(String implScriptPath)
                            Sets the docstore path of the implementation script for this webservice. The caller
                            must ensure that this does not overwrite the implementation script for any other
                            service.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setName</name>
                        <description>void WebService::setName(String name)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Sets the name of the given WebService.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>setProtocol</name>
                        <description>void WebService::setProtocol(String protocol)
                            Sets the protocol of the given WebService.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStoreIncoming</name>
                        <description>void WebService::setStoreIncoming(Boolean storeIncoming)
                            Sets the storeIncoming of the given WebService.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStoreOutgoing</name>
                        <description>void WebService::setStoreOutgoing(Boolean storeOutgoing)
                            Sets whether this WebService should store outgoing messages.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setStyle</name>
                        <description>void WebService::setStyle(String style)
                            Sets the style of the given WebService.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWsddDocPath</name>
                        <description>void WebService::setWsddDocPath(String wsddDocPath)
                            Sets the docstore path of the WSDD document. The caller must ensure that this does
                            not overwrite the WSDD for any other service.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWsdlDocPath</name>
                        <description>void WebService::setWsdlDocPath(String wsdlDocPath)
                            Sets the docstore path of the WSDL document. The caller must ensure that this does
                            not overwrite the WSDL for any other service.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_wfl</name>
                <description></description>
                <list>
                    <object>
                        <name>createNestedWflStep</name>
                        <description>WorkflowStep Workflow::createNestedWflStep(Workflow nestedWfl)
                            Adds a nested workflow step to the workflow. Returns the WorkflowStep object.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createWflStep</name>
                        <description>WorkflowStep Workflow::createWflStep(String stepType, String stepName)
                            Adds a new step to the workflow if the step with the given name does not exists.
                            StepType can be one of the following: AND_APPROVAL, OR_APPROVAL, MODIFY,
                            DISPATCH, MERGE, GENERAL, AUTOMATED, INTERIM_CHECKOUT,
                            CONDENSER. Returns the WorkflowStep object.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>deleteWfl</name>
                        <description>void Workflow::deleteWfl()
                            Delete a workflow. It throws an exception if the workflow can not be deleted, for
                            example, if it is used by any collaboration area
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAllWflNames</name>
                        <description>String[] getAllWflNames()
                            Returns a list of all workflow names.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflAccessControlGroup</name>
                        <description>String Workflow::getWflAccessControlGroup()
                            Returns access control group name of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflByName</name>
                        <description>Workflow getWflByName(String wflName)
                            Returns the workflow if found otherwise null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflContainerType</name>
                        <description>String Workflow::getWflContainerType()
                            Returns the workflow container type. The type could be either 'CATALOG' or
                            'CATEOGRY_TREE'
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflDesc</name>
                        <description>String Workflow::getWflDesc()
                            Returns the workflow name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflFailureStep</name>
                        <description>WorkflowStep Workflow::getWflFailureStep()
                            Returns the failure step of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflInitialStep</name>
                        <description>WorkflowStep Workflow::getWflInitialStep()
                            Returns the initial step of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflName</name>
                        <description>String Workflow::getWflName()
                            Returns the workflow name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepByName</name>
                        <description>WorkflowStep Workflow::getWflStepByName(String stepName)
                            Returns the step of the workflow otherwise null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepPaths</name>
                        <description>String[] Workflow::getWflStepPaths()
                            Returns the paths for all the steps of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflSteps</name>
                        <description>WorkflowStep[] Workflow::getWflSteps()
                            Returns the list of all the steps in the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflSuccessStep</name>
                        <description>WorkflowStep Workflow::getWflSuccessStep()
                            Returns the success step of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Workflow</name>
                        <description>new Workflow(String wflName, String containerType)
                            Create a new workflow of the given container type and with the given name.
                            Container type can be one of the following: CATALOG, CATEGORY_TREE
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveWfl</name>
                        <description>Boolean Workflow::saveWfl()
                            Saves the workflow. Returns true or false depending on whether the workflow was
                            successfully saved or not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setCategoryTreesForRecategorization</name>
                        <description>void Workflow::setCategoryTreesForRecategorization(String[]
                            categoryTreeNames)
                            Sets the category trees which will be modified by this workflow. If no category trees
                            are set that would mean that ALL of the category trees associated to the source
                            container will be modified by this workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflAccessControlGroup</name>
                        <description>void Workflow::setWflAccessControlGroup(String acg)
                            Sets access control group name of the workflow.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflDesc</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>void Workflow::setWflDesc(String wflDesc)</name>
                        <description>Sets the workflow description</description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflName</name>
                        <description>void Workflow::setWflName(String wflName)
                            Sets the workflow name
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_wflstep</name>
                <description></description>
                <list>
                    <object>
                        <name>getEditableAttributeGroups</name>
                        <description>String[] WorkflowStep::getEditableAttributeGroups([String subViewType],
                            [String locationHierarchyName])
                            Gets the editable attribute groups of a workflow step. The result is an array attribute
                            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
                            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
                            optional parameter locationHierarchyName is required when the subViewType is
                            'ITEM_LOCATION'.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocationHierarchyNames</name>
                        <description>String[] WorkflowStep::getLocationHierarchyNames([Boolean
                            canModifyAvailability])
                            Returns the list of location hierarchy names defined in the given workflow step. The
                            optional parameter canModifyAvailability filters the list of location hierarchy names
                            based on the 'modify location hierarchy availability' flag. If not specified, no filtering
                            takes place.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getModifyLocationHierarchyAvailability</name>
                        <description>Boolean WorkflowStep::getModifyLocationHierarchyAvailability(String
                            locationHierarchyName)
                            Returns the 'modify location hierarchy availability' flag for a given location hierarchy in
                            the given workflow step.The optional parameter locationHierarchyName is required
                            when the subViewType is 'ITEM_LOCATION'.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNextWflStepsForExitValue</name>
                        <description>String[] WorkflowStep::getNextWflStepsForExitValue(String exitValue)
                            Returns the names of the next steps for a particular exitValue of a WorkflowStep.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRequiredAttributeGroups</name>
                        <description>String[] WorkflowStep::getRequiredAttributeGroups([String subViewType],
                            [String locationHierarchyName])
                            Gets the required attribute groups of a workflow step. The result is an array attribute
                            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
                            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
                            optional parameter locationHierarchyName is required when the subViewType is
                            'ITEM_LOCATION'.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getViewableAttributeGroups</name>
                        <description>String[] WorkflowStep::getViewableAttributeGroups([String subViewType],
                            [String locationHierarchyName])
                            Gets the viewable attribute groups of a workflow step. The result is an array attribute
                            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
                            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
                            optional parameter locationHierarchyName is required when the subViewType is
                            'ITEM_LOCATION'.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepAddEntries</name>
                        <description>Boolean WorkflowStep::getWflStepAddEntries()
                            Returns value of 'allow import into step' flag.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepAttributeGroups</name>
                        <description>String[] WorkflowStep::getWflStepAttributeGroups()
                            Returns an array of all the attribute group names for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepCategorizeEntries</name>
                        <description>Boolean WorkflowStep::getWflStepCategorizeEntries()
                            Returns value of 'allow recategorization' flag.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepDefaultScriptPath</name>
                        <description>String WorkflowStep::getWflStepDefaultScriptPath()
                            Gets the default path of the workflow script for the step: scripts/workflow/&lt;workflow
                            name&gt;/&lt;step name&gt;.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepDesc</name>
                        <description>String WorkflowStep::getWflStepDesc()
                            Returns the workflow step name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepEntryNotification</name>
                        <description>String WorkflowStep::getWflStepEntryNotification()
                            Gets the notification emails which will get sent when the item gets into the step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepExitValues</name>
                        <description>String[] WorkflowStep::getWflStepExitValues()
                            Retrieve the exit values of the WorkflowStep.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepName</name>
                        <description>String WorkflowStep::getWflStepName()
                            Returns the workflow step name.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepPerformerRoles</name>
                        <description>String[] WorkflowStep::getWflStepPerformerRoles()
                            Returns the list of user roles for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepPerformerUsers</name>
                        <description>String[] WorkflowStep::getWflStepPerformerUsers()
                            Returns the list of user names for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepReserveToEdit</name>
                        <description>Boolean WorkflowStep::getWflStepReserveToEdit()
                            Returns the reserve for edit flag for a workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepScriptPath</name>
                        <description>String WorkflowStep::getWflStepScriptPath()
                            Gets the path of the workflow script for the step. If no script is defined, returns null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepTimeoutDate</name>
                        <description>Date WorkflowStep::getWflStepTimeoutDate()
                            Gets the timeout date for the workflow step. If no timeout date was set, a null is
                            returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepTimeoutDuration</name>
                        <description>String WorkflowStep::getWflStepTimeoutDuration()
                            Gets the timeout duration for the workflow step. Returns an integer in seconds. If no
                            timeout duration was set, 0 is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepTimeoutNotification</name>
                        <description>String WorkflowStep::getWflStepTimeoutNotification()
                            Gets the notification emails which will get sent when the step times out.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepType</name>
                        <description>String WorkflowStep::getWflStepType()
                            Returns the workflow step type.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepView</name>
                        <description>CtgView WorkflowStep::getWflStepView(String subViewType, [String
                            locationHierarchyName])
                            Returns a ctg view with a give subViewType for the workflow step. The parameter
                            subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
                            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
                            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWflStepViews</name>
                        <description>CtgView[] WorkflowStep::getWflStepViews()
                            Returns an array of all the step views for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mapWflStepExitValueToNextStep</name>
                        <description>void WorkflowStep::mapWflStepExitValueToNextStep(String exitValue, String |
                            WorkflowStep | String[] nextStep | WorkflowStep[] nextStep)
                            Maps the exit value of the WorkflowStep to the nextStep. The nextStep can either be
                            the stepName or one WorkflowStep or an array of StepNames or an array of
                            WorkflowSteps.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setEditableAttributeGroups</name>
                        <description>void WorkflowStep::setEditableAttributeGroups(String subViewType,
                            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
                            Sets the editable attrinute groups for the workflow step for a given subViewType. The
                            parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
                            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
                            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
                            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
                            validate against its Container Spec in order to leave the Success step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setModifyLocationHierarchyAvailability</name>
                        <description>void WorkflowStep::setModifyLocationHierarchyAvailability(String
                            locationHierarchyName, Boolean canModifyAvailability)
                            Sets the 'modify location hierarchy availability' flag for a given location hierarchy in
                            the given workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setRequiredAttributeGroups</name>
                        <description>void WorkflowStep::setRequiredAttributeGroups(String subViewType,
                            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
                            Sets the required attrinute groups for the workflow step for a given subViewType. The
                            parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
                            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
                            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
                            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
                            validate against its Container Spec in order to leave the Success step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setViewableAttributeGroups</name>
                        <description>void WorkflowStep::setViewableAttributeGroups(String subViewType,
                            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
                            Sets the viewable attrinute groups for the workflow step for a given subViewType.
                            The parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
                            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
                            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
                            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
                            validate against its Container Spec in order to leave the Success step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepAddEntries</name>
                        <description>void WorkflowStep::setWflStepAddEntries(Boolean flag)
                            Sets value of 'allow import into step' flag.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepCategorizeEntries</name>
                        <description>void WorkflowStep::setWflStepCategorizeEntries(Boolean flag)
                            Sets value of 'allow recategorization' flag.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepDesc</name>
                        <description>void WorkflowStep::setWflStepDesc(String desc)
                            Sets the desc for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepEntryNotification</name>
                        <description>void WorkflowStep::setWflStepEntryNotification(String emailAdresses)
                            Sets up the notification emails which will get sent when the item gets into the step.
                            Email addresses must be seperated by semi-colons.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepExitValues</name>
                        <description>void WorkflowStep::setWflStepExitValues(String[] exitValues)
                            Sets the exit values for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepPerformerRoles</name>
                        <description>void WorkflowStep::setWflStepPerformerRoles(String[] roles)
                            Sets the user roles for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepPerformerUsers</name>
                        <description>void WorkflowStep::setWflStepPerformerUsers(String[] users)
                            Sets the users for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepReserveToEdit</name>
                        <description>void WorkflowStep::setWflStepReserveToEdit(Boolean flag)
                            Sets the reserve for edit flag for a workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepScriptPath</name>
                        <description>void WorkflowStep::setWflStepScriptPath([String scriptPath])
                            Sets up the workflow script path for this step. If no argument is passed, the defaut
                            location is used (script/&lt;workflow name&gt;/&lt;step name&gt;). Note that this operation
                            does
                            not check that the script is already loaded (it allows you to load the script later if
                            needed).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepTimeoutDate</name>
                        <description>void WorkflowStep::setWflStepTimeoutDate(Date date)
                            Sets up the timeout date for the workflow step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepTimeoutDuration</name>
                        <description>void WorkflowStep::setWflStepTimeoutDuration(Integer seconds)
                            Sets up the timeout duration for the workflow step. The duration is in seconds.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWflStepTimeoutNotification</name>
                        <description>void WorkflowStep::setWflStepTimeoutNotification(String emailAdresses)
                            Sets up the notification emails which will get sent when the step times out. Email
                            addresses must be seperated by semi-colons.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_widget</name>
                <description></description>
                <list>
                    <object>
                        <name>buildWidget</name>
                        <description>Widget buildWidget(String sType, String sName)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Creates a widget of type sType and name sName</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getWidgetProperty</name>
                        <description>Object Widget::getWidgetProperty(String sPropertyName)
                            Return the property sPropertyName of this widget
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>invalidate</name>
                        <description>void invalidate()
                            Invalidates this widget
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>pullPropertyFromWidget</name>
                        <description>pullPropertyFromWidget(String sDestProperty, Object oSrcWidget, String
                            sSrcWidgetProperty
                            The value of sDestProperty on this widget will always reflect the value of
                            sSrcWidgetProperty on oSrcWidget - oSrcWidget is either a widget or a property of
                            this widget that holds a widget
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>pushPropertyToWidget</name>
                        <description>pullPropertyFromWidget(String sSrcProperty, Object oDestWidget, String
                            sDestWidgetProperty
                            The value of sDestWidgetProperty on oDestWidget will always reflect the value of
                            sSrcProperty on this widget - oDestWidget is either a widget or a property of this
                            widget that holds a widget
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>renderWidget</name>
                        <description>Widget::renderWidget(Writer out)
                            Renders the widget w
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWidgetProperty</name>
                        <description>void Widget::setWidgetProperty(String sPropertyName, Object oValue)
                            Set the property sPropertyName of this widget to the value oValue
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>operations_worklist</name>
                <description></description>
                <list>
                    <object>
                        <name>addWorkEntry</name>
                        <description>void WorkEntryList::addWorkEntry(int index, WorkEntry workEntry)
                            Insert a WorkEntry into the WorkEntryList at the specified index
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getEntryFromWorkEntry</name>
                        <description>Entry WorkEntry::getEntryFromWorkEntry()
                            Get the Entry held by this WorkEntry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getIndexesOfEntriesHavingState</name>
                        <description>Map WorkEntryList::getIndexesOfEntriesHavingState(String state)
                            Get the current indexes of the worklist entries having a particular state
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMarkedEntries</name>
                        <description>EntrySet WorkEntryList::getMarkedEntries([start, end])
                            Return an entry set containing the marked entries in this work entry list - with indexes
                            between start and end -
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWorkEntryAt</name>
                        <description>WorkEntry WorkEntryList::getWorkEntryAt(int i)
                            Get the WorkEntry for the specified index in the WorkEntryList
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWorkEntryListSize</name>
                        <description>Integer WorkEntryList::getWorkEntryListSize()
                            Gets the size of this work entry list
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getWorkEntryState</name>
                        <description>String WorkEntry::getWorkEntryState()
                            Get the current state of this WorkEntry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isWorkEntryMarked</name>
                        <description>Boolean WorkEntry::isWorkEntryMarked()
                            Is the current WorkEntry marked
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isWorkEntryMarkedNew</name>
                        <description>Boolean WorkEntry::isWorkEntryMarkedNew()
                            Is the current WorkEntry marked new
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>markWorkEntryDirty</name>
                        <description>void WorkEntry::markWorkEntryDirty()
                            Mark this WorkEntry as being dirty
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$WorkEntry</name>
                        <description>new WorkEntry(Entry entry, [Boolean markAsNew])
                            Creates a workentry for a given entry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$WorkEntryList</name>
                        <description>new WorkEntryList(ctgOrSelection, [sortingNodeId], [sortingOrder])
                            Create a new work entry list from a catalog or a selection
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeWorkEntry</name>
                        <description>void WorkEntryList::removeWorkEntry(int index)
                            Removes the WorkEntry at the specified index from the WorkEntryList
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveMarkedEntries</name>
                        <description>WorkEntryList::saveMarkedEntries(workList, [start, end, [colArea, path,
                            comment]])
                            Save the set of marked entries for this work entry list - with indexes between start and
                            end - - for entries in the step specified by path in the collaboration area colArea with
                            given comment.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setWorkEntryMarked</name>
                        <description>void WorkEntry::setWorkEntryMarked(Boolean mark)
                            Marks/unmarks this WorkEntry
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>syncWorkEntryAt</name>
                        <description>void WorkEntryList::syncWorkEntryAt(int i)
                            Sync the work entry at the specified index with it's database picture
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>other</name>
                <description></description>
                <list>
                    <object>
                        <name>getAribaAttribute</name>
                        <description>String getAribaAttribute(String attribName)
                            Gets Ariba's constant attribute names. Valid attribute names are PAYLOADID,
                            TIMESTAMP, SHAREDSECRET, AUSTINDUNS
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setBypassApproval</name>
                        <description>void setBypassApproval(Boolean bypassApproval)
                            If an approval workflow is setup, use this to bypass the approval process
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sleep</name>
                        <description>void sleep(String)
                            Sleeps for the given number of milliseconds.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>page_layout</name>
                <description></description>
                <list>
                    <object>
                        <name>getPageLayoutByName</name>
                        <description>PageLayout getPageLayoutByName(String sPageLayoutName)
                            Returns the page layout object with the corresponding name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$PageLayout</name>
                        <description>new PageLayout(String sPageLayoutName)
                            Returns a new page layout with the given name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>savePageLayout</name>
                        <description>void PageLayout::savePageLayout()
                            Saves the current page layout
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>re</name>
                <description></description>
                <list>
                    <object>
                        <name>buildRE</name>
                        <description>new RE(String pattern, Integer matchFlags )
                            Returns a regular expression corresponding to the given pattern. Match flags are
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>match</name>
                        <description>String[] RE::match(String str)
                            Return the contents of the parenthesized subexpressions after a successful match
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$RE</name>
                        <description>new RE(String pattern, Integer matchFlags )
                            Returns a regular expression corresponding to the given pattern. Optional match
                            flags are 0=caseSensitive, 1=ignoreCase, 2=matchMultiline (new lines match as ^
                            and $, 4=matchSingleLine (treat multiple lines as one line). Flags are additive.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>substitute</name>
                        <description>String RE::substitute(String substituteIn, String substitution)
                            Substitutes a string for this regular expression in another string. This method works
                            like the Perl function of the same name. Given a regular expression of "a*b", a String
                            to substituteIn of "aaaabfooaaabgarplyaaabwackyb" and the substitution String "-",
                            the resulting String returned by subst would be "-foo-garply-wacky-". Returns: The
                            string substituteIn with zero or more occurrences of the current regular expression
                            replaced with the substitution String (if this regular expression object doesn't match at
                            any position, the original String is returned unchanged).
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>reader</name>
                <description></description>
                <list>
                    <object>
                        <name>forEachLine</name>
                        <description>forEachLine(BufferedReader in, String line) { statements }
                            Executes the statements for each line read from in
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachXMLNode</name>
                        <description>forEachXMLNode([XMLNode rootNode], String xPath [, XMLNode node]) {
                            statements }
                            Executes the statements for each XML node having the relative path xPath - paths in
                            the block are relative to xPath. If the node variable is passed in as an argument, it is
                            populated with the XMLNode that is being operated on in each iteration of
                            forEachXMLNode. If the rootNode is specified, the path is relative to the path of
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>rootNode.</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrentLine</name>
                        <description>String getCurrentLine()
                            Returns the current line
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$CSVParser</name>
                        <description>new CSVParser(BufferedReader reader)
                            Returns a comma separated parser given the buffered reader
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$DelimParser</name>
                        <description>new DelimParser(BufferedReader reader, String delimiter)
                            Returns a delimiter parser which parses, based on the given delimiter
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$FixedWidthParser</name>
                        <description>new FixedWidthParser(BufferedReader reader)
                            Returns a new fixed width parser given the buffered reader
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>new$Reader</name>
                        <description>new Reader(String documentPath [, String charsetName])
                            Returns the buffered reader for the document specified by the path. If the document
                            path starts with "file://", then the reader will read the file system file given by the
                            specified path. You may optionally specify a charset that differs from the one stored
                            with the document in the doc store.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>newCSVParser</name>
                        <description>CSVParser newCSVParser(BufferedReader input)
                            Returns a Comma Separated Parser using the given buffered reader input
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>newDelimParser</name>
                        <description>DelimiterParser newDelimParser(BufferedReader input, String delim)
                            Returns a parser which parses based on the delimiter provided
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>newFixedWidthParser</name>
                        <description>FixedWidthParser newFixedWidthParser(BufferedReader input, [Integer
                            fieldPos1, Integer fieldPos2, ..., Integer fieldPosN])
                            Returns a fixed width parser given the buffered reader input. fieldPos are optional
                            parameters which indicate the positions of the fields.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>nextLine</name>
                        <description>String nextLine (BufferedReader in)
                            Returns the next line from the reader
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseXMLNode</name>
                        <description>String parseXMLNode (String sXMLSubPath)
                            Deprecated: Returns the value given by the sXMLSubPath XPath in the current XML
                            document
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseXMLNodeWithNameSpace</name>
                        <description>String parseXMLNodeWithNameSpace (String sXMLSubPath)
                            Returns the value given by the sXMLSubPath XPath in the current XML document.
                            When specify the XPath value, the user has the choice to specifying a namespace uri
                            qualified path or using literal path matching specified when using the parseXMLNode
                            script operation
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>splitLine</name>
                        <description>String[] Parser::splitLine()
                            Returns an array of tokens obtained by breaking the line using this parser (e.g. CSV
                            parser, fixed width parser)
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>reflect</name>
                <description></description>
                <list>
                    <object>
                        <name>createJavaArray</name>
                        <description>Object createJavaArray(String typeName, Integer dim0 [,Integer dim1......Integer
                            dim9])
                            Create an array of type typeName. The number of dims specified indicates the
                            number of dimensions that the array will be created with. The value of these numbers
                            indicates the number of elements in that dimension. e.g supplying 1 and 4 as the
                            dims would indicate that a 2 dimensional array will be created; the first dimension
                            containing 1 element, the second containing 4 elements.If an array of primitives is to
                            be created, supply the type as the java primitive keyword such as "int" or "boolean". If
                            the type is a class name, it should be fully qualified and should not be an interface.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createJavaConstructor</name>
                        <description>Constructor createJavaConstructor(String className [,String type0,String
                            type1......String type9])
                            Create a java.reflect.Constructor Object by reflection using a className and optional
                            types. If the constuctor you wish to target contains primitive arguments, supply those
                            arguments with type the java primitive keyword such as "int" or "boolean". The
                            className should be fully qualified and should not be an interface.. className
                            should not be a primitive class (i.e. Class literal names such as int.class or int.TYPE
                            are not accepted). In order to pass an array type use [] for one dimentional arrays and
                            multiple []s for multiple dimention arrays. e.g. to target a 2 dimension array of ints
                            pass "int[][]" to target a 1 dimensional array of Strings pass "java.lang.String[]".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createJavaMethod</name>
                        <description>Method createJavaMethod(String className,String methodName [,String
                            type0,String type1......String type9])
                            Create a java.reflect.Method Object by reflection using a className, methodName
                            and optional types. className and methodName should not be null. The className
                            should be fully qualified. The className may be a fully qualified interface name. If
                            the method you wish to target contains primitive arguments, those arguments should
                            be supplied with the java primitive keyword such as "int","boolean".The className
                            should not be primitive classes (i.e. Class literal names such as int.class or int.TYPE
                            ). In order to pass an array type use [] for one dimentional arrays and multiple []s for
                            multiple dimension arrays. e.g. to target a 2 dimension array of ints pass "int[][]" to
                            target a 1 dimensional array of Strings pass "java.lang.String[]".
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>javaArrayFromScriptArray</name>
                        <description>Object javaArrayFromScriptArray(Array scriptArray, String type)
                            Transforms the provided scriptArray into a java array holding the same elements in
                            the same order. If scriptArray is null, returns null. The user must provide the type (or
                            subtype) of the array's elements. The types can be primitive java data types (int, char,
                            byte, float, boolean, long, double, short) or any valid java class (eg. java.lang.String ,
                            java.lang.Integer). Type can also be a multidimentional array of
                            elements(primitive/non primitive) with the brackets intact ( eg int[],
                            java.lang.Integer[][]). A fully qualified name is to be provided whenever using a class
                            as type
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>runJavaConstructor</name>
                        <description>Object runJavaConstructor(Constructor constructor [,Object arg0,Object
                            arg1......Object arg9])
                            Run the supplied Constructor (which can be created using a createConstructor call).
                            Run the constructor using the supplied objects as parameters. The supplied
                            constructor should not be null. The supplied parameters should match the number
                            and types associated with the Constructor. If the Constructor parameters contain
                            primitives, then these parameters should not be supplied as null Objects and should
                            be supplied as the appropriate wrapper primitive object (such as instances of
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>java.lang.Integer).</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>runJavaMethod</name>
                        <description>Object runJavaMethod(Object obj, Method method [,Object arg0,Object
                            arg1......Object arg9])
                            Run the supplied Method (which was created using a previous createJavaMethod
                            call). If the Method is not static, then it is invoked on the supplied object using the
                            supplied parameters. For static methods the supplied obj is ignored. The supplied
                            Method should not be null. For instance methods the supplied object should not be
                            null. The number of supplied parameters should match the number and types
                            associated with the Method. If the Method parameters contain primitives, then these
                            parameters should not be supplied as null Objects and should be supplied as the
                            appropriate wrapper primitive object (such as instances of java.lang.Integer).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>scriptArrayFromJavaArray</name>
                        <description>Object scriptArrayFromJavaArray(OneDimensionalJavaArray)
                            Transforms a 1 dimensional java array into a script array holding the same elements
                            in the same order. If OneDimensionalJavaArray is not a 1 dimensional array or is null
                            then null is returned. 1 dimension arrays of primitives can be supplied as the
                            parameter.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>scripting</name>
                <description></description>
                <list>
                    <object>
                        <name>setScriptProgress</name>
                        <description>void ::setScriptProgress(number percent)
                            Sets the percentage completed value in the context of a running script. This script is
                            applicable in scripts running as part of jobs like import, export, report etc.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setScriptStatsDeletedCnt</name>
                        <description>void ::setScriptStatsDeletedCnt(number count)
                            Sets the count of items deleted in the context of a running script
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>security</name>
                <description></description>
                <list>
                    <object>
                        <name>authenticateWPCUser</name>
                        <description>Boolean authenticateWPCUser(String sUserName, String sPassword, String
                            sCmpCode [, Boolean bEncodedPassword)
                            Provides authentication for a WPC user. Optional parameter bEncodedPassword
                            indicates if the password is being passed already encoded. Default is false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>cloneUser</name>
                        <description>User cloneUser(String original_username, String username, String firstname,
                            String lastname, String email, Boolean enabled, String password[, Category
                            organization[, HashMap roles]])
                            Clones an existing user info into a new user. Password field is required. The optional
                            roles and organization fields, when specified, override the roles and/or organization of
                            the existing user.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createAccessControlGroup</name>
                        <description>ACG createAccessControlGroup(String sACGName, [String sACGDesc])
                            Creates an access control group object with the specified acg name and an optional
                            acg description.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createRole</name>
                        <description>Role createRole(String sRoleName, [String sRoleDesc])
                            Creates a role object with the specified rolename and an optional role description.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createUser</name>
                        <description>User ::createUser(String username, String firstname, String lastname, String
                            email, Boolean enabled, String password, HashMap roles, Category
                            organization [, Boolean encryptPassword, Boolean enableLdap, String
                            nameAttr, String serverUrl])
                            Creates an user with the specified parameters. Enabled, Password, Roles, and
                            organization parameters are required. encryptPassword exists for the purpose of
                            migrating environments so that encrypted passwords exported from one environment
                            can be loaded into another environment without encrypting them again and that there
                            is no possibility of knowing what the password was. EnableLdap marks the user as
                            LDAP enabled and allows the provision of extra LDAP parameters, the LDAP name
                            attribute and the LDAP Server URL
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAccessControlGroupByName</name>
                        <description>ACG getAccessControlGroupByName(String sACGName)
                            Returns a access control group object for the specified acg name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAccessControlGroupName</name>
                        <description>String ACG::getAccessControlGroupName()
                            Return the name of the access control group
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAccessControlGroupPrivsForRole</name>
                        <description>String[] Role::getAccessControlGroupPrivsForRole(String acgName)
                            Gets the access control group privileges for the gvien access control group and the
                            given role. The return parameter is an array of privileges (which are defined in the
                            format: Catalog__list, Selection__list, SelectionMembers__view_items etc.).
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAccessControlGroupsForRole</name>
                        <description>String[] Role::getAccessControlGroupsForRole()
                            Gets the access control groups for the given role.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getAllUsers</name>
                        <description>User[] getAllUsers()
                            Returns all users
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCompanyCode</name>
                        <description>String getCompanyCode()
                            Returns the company code of this company.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCompanyName</name>
                        <description>String getCompanyName()
                            Returns the name of this company.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCurrentUserName</name>
                        <description>String getCurrentUserName()
                            Returns the name of the current user
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapEntryDn</name>
                        <description>String User::getLdapEntryDn()
                            Returns the distinguished name field associated with an LDAP authenticated User.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLdapServerUrl</name>
                        <description>String User::getLdapServerUrl()
                            Return the URL of the server providing this users' LDAP authentication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLocalesForRole</name>
                        <description>String Role::getLocalesForRole()
                            Gets the locales that this role has access to for all containers
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLoginString</name>
                        <description>String getLoginString(String sUrl, Date dExpirationDate, [String sUserName])
                            Returns the url string needed for login automatically to the given url as the current
                            user. If you are an admin, you can generate a login string for another user by passing
                            the username as an extra parameter. Note that the url should not include the server
                            name/port and should start with '/'. If an error occur, a null string is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRoleByName</name>
                        <description>Role getRoleByName(String sRoleName)
                            Returns a role object for the specified role
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRoleDescription</name>
                        <description>String Role::getRoleDescription()
                            Return the description of the role
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRoleName</name>
                        <description>String Role::getRoleName()
                            Return the name of the role
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRoles</name>
                        <description>Role[] getRoles()
                            Returns all roles for the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRolesForCompany</name>
                        <description>Role[] getRolesForCompany(String sCmpCode)
                            Returns all roles of the given company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserAddress</name>
                        <description>String User::getUserAddress()
                            Return the User's Address
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserByUsername</name>
                        <description>User getUserByUsername(String sUserName, [String sCmpCode])
                            Returns the User object for the given User Name and sCmpCode. If sCmpCode is
                            not given, company code is taken from the current context of script execution
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserCompanyCode</name>
                        <description>String User::getUserCompanyCode()
                            Return the User's Company Code
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserCompanyName</name>
                        <description>String User::getUserCompanyName()
                            Return the User's Company Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserEmail</name>
                        <description>String User::getUserEmail()
                            Return the User's Email Address
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserEnabled</name>
                        <description>boolean User::getUserEnabled()
                            Returns if the User is enabled or not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserFax</name>
                        <description>String User::getUserFax()
                            Return the User's Fax Number
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserFirstName</name>
                        <description>String User::getUserFirstName()
                            Return the User's First Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserLastName</name>
                        <description>String User::getUserLastName()
                            Return the User's Last Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserLdapEnabled</name>
                        <description>boolean User::getUserEnabled()
                            Returns if the User is a LDAP user or not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserName</name>
                        <description>String User::getUserName()
                            Return the User Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserOrganizations</name>
                        <description>Category[] User::getUserOrganizations()
                            Return the User's Organizations
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserPhone</name>
                        <description>String User::getUserPhone()
                            Return the User's Phone Number
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserRoles</name>
                        <description>String[] User::getUserRoles()
                            Return the User's Roles
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUsers</name>
                        <description>User[] getUsers()
                            Returns all Users for the current company
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUsersFromRole</name>
                        <description>User[] Role::getUsersFromRole()
                            Returns all users within the Role
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserTitle</name>
                        <description>String User::getUserTitle()
                            Return the User's Title
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>populateSecurityContext</name>
                        <description>AustinContext ::populateSecurityContext(User user[, String[] roleNames,
                            InitialLdapContext ldapContext, ICategory organization])
                            Returns the context for the given user by assigning the access privileges for the roles
                            passed in roleNames. It has no effect on the current users context.If ldapContext is
                            present then a handle of the context will be set in the returned context. If the user is
                            not already present in WPC a new user will be created in the organization specified
                            otherwise in the default organization of default organization hierarchy.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>saveUser</name>
                        <description>ValidationError[] User::saveUser()
                            Save the User's Profile. Returns null if the save was successful, otherwise returns an
                            array of ValidationErrors.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAccessControlGroupForRole</name>
                        <description>Boolean Role::setAccessControlGroupForRole(String acgName, String[] privs)
                            Sets an access control group with the given set of privileges for the role. The
                            parameter privs is an array of privileges (which are picked from the strings in the
                            format: Catalog__list, Selection__list, SelectionMembers__view_items etc.). Please
                            note the the page privileges like PAGE_OBJ_CTG_CONSOLE__view,
                            PAGE_OBJ_CAT_CREATE__view are stored only in the "Default" ACG.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAccessControlGroupForRoleMigration</name>
                        <description>Boolean Role::setAccessControlGroupForRoleMigration(String acgName,
                            String[] privs)
                            Script operation for migrating the old priv names to the new ones. Its exactly the
                            same as setAccessControlGroupForRole operations except it has a mapping of old
                            priv name to new ones.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setAllAccessControlGroupForRole</name>
                        <description>void Role::setAllAccessControlGroupForRole(String acgName, [String[]
                            privExclusions])
                            Sets access control group acgName with all privileges except for the ones in
                            privExclusions.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLdapEntryDn</name>
                        <description>void User::setLdapEntryDn(String sEntryDN)
                            Sets the distinguished name field associated with an LDAP authenticated User
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLdapServerUrl</name>
                        <description>void User::setLdapServerUrl(String sServerUrl)
                            Sets the URL of the server providing this users' LDAP authentication.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setLocalesForRole</name>
                        <description>void Role::setLocalesForRole(String localesCSVString)
                            Sets the locales that this role has access to for all containers
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserAddress</name>
                        <description>void User::setUserAddress(String str)
                            Set the User's Address
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserEmail</name>
                        <description>void User::setUserEmail(String str)
                            Set the User's Email Address
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserFax</name>
                        <description>void User::setUserFax(String str)
                            Set the User's Fax Number
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserFirstName</name>
                        <description>void User::setUserFirstName(String str)
                            Set the User's First Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserLastName</name>
                        <description>void User::setUserLastName(String str)
                            Set the User's Last Name
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserLdapEnabled</name>
                        <description>void User::setUserLdapEnabled(boolean)
                            Sets the user as a LDAP user.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUsername</name>
                        <description>void User::setUsername(String sUsername)
                            Sets the name of the current user
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserPhone</name>
                        <description>void User::setUserPhone(String str)
                            Set the User's Phone Number
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserRoles</name>
                        <description>Boolean User::setUserRoles(Role[] roles)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Sets the roles for a user</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserTitle</name>
                        <description>void User::setUserTitle(String str)
                            Set the User's Title
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>validateUser</name>
                        <description>boolean validateUser(String sUserName, String sPassword, String sCmpCode)
                            Confirms if the combination of User name, password and company id represent a
                            valid and enabled WPC user. Returns true if the user could logon to WPC otherwise
                            false.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>set</name>
                <description></description>
                <list>
                    <object>
                        <name>containsKey</name>
                        <description>Boolean HashMap::containsKey(Object key)
                            Returns true if key exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>containsValue</name>
                        <description>Boolean HashMap::containsValue(Object val)
                            Returns true if value exists.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>forEachHmElement</name>
                        <description>forEachHmElement(HashMap hm, Object oKey, Object oValue) { statements }
                            Executes the statements for each (oKey, oValue) map in hm
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>intersectValues</name>
                        <description>HashMap intersectValues(HashMap hm1, HashMap hm2, ...)
                            Return the set-intersection of hm1, hm2, ... (only values are considered)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>keyForValue</name>
                        <description>Object HashMap::keyForValue(Object valueToSearch)
                            Returns a key mapped to valueToSearch in hm or null
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>mergeValues</name>
                        <description>HashMap mergeValues(HashMap hm1, HashMap hm2, ...)
                            Return the set-union of hm1, hm2, ... (only values are considered)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>size</name>
                        <description>Integer Object::size()
                            Returns the size of an object of type array, HashMap, or SearchResultSet.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>sort</name>
                        <description>Array Array::sort()
                            Return the array sorted
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>string</name>
                <description></description>
                <list>
                    <object>
                        <name>buildCSV</name>
                        <description>String buildCSV (String str1, String str2, ..., String strN)
                            Takes a variable number of arguments, and returns a string with the arguments
                            concatenated in csv format
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>buildDelim</name>
                        <description>String buildDelim (String delimiter, String qualifier, String str1, String str2,
                            ...,
                            String strN)
                            Takes a variable number of arguments, and returns a string with the arguments
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>concatenated in delim format, using the qualifier to enclose strings that contain the
                        </name>
                        <description>delimiter.</description>
                        <list/>
                    </object>
                    <object>
                        <name>buildFixedWidth</name>
                        <description>String buildFixedWidth (String str1, Integer len1, String strN, Integer lenN)
                            Takes a variable number of arguments, and returns a string with the arguments
                            concatenated in fixed width format.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>checkDouble</name>
                        <description>Double checkDouble(String str, Double defaultValue)
                            If the input string is null or empty, the default value is returned. Otherwise the original
                            value parsed as an Double is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>checkInt</name>
                        <description>Integer checkInt(String str, Integer defaultValue)
                            If the input string is null or empty, the default value is returned. Otherwise the original
                            value parsed as an Integer is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>checkString</name>
                        <description>String checkString (String str, String defaultValue [, Boolean trim])
                            If the input string is null or empty, the default value is returned, otherwise the original
                            value is returned. The input string will be trimmed of all leading and trailing spaces,
                            unless a value of false for the optional TRIM parameter.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>concat</name>
                        <description>String concat (String str1, String str2, ..., String strN)
                            Takes a variable number of arguments, and returns a string with the arguments
                            concatenated in the order given
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>contains</name>
                        <description>Boolean String::contains (String match)
                            Tests if this string contains an occurence of the match substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>decodeUsingCharset</name>
                        <description>String String::decodeUsingCharset(String charset)
                            Returns a string by decoding the string using the named charset
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>encodeUsingCharset</name>
                        <description>String String::encodeUsingCharset(String charset)
                            Encodes the string using the named charset
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>endsWith</name>
                        <description>Boolean String::endsWith (String match)
                            Tests if this string ends with an occurence of the match substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>escapeForCSV</name>
                        <description>String escapeForCSV(String s)
                            Escape for CSV
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>escapeForHTML</name>
                        <description>String escapeForHTML(String s[,boolean isAscii])
                            Escape for HTML.By default isAscii is true. When isAscii is false the characters will
                            be escaped with html entities
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>escapeForJS</name>
                        <description>String escapeForJS(String s)
                            Escape for JavaScript
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>escapeWithHTMLEntities</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>String escapeWithHTMLEntities(String str, Integer beg, Integer end)</name>
                        <description>Translates all character with HTML character codes less than beg or greater than
                            end
                            to HTML character codes
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getNameFromPath</name>
                        <description>String getNameFromPath(String str[, String delimiter])
                            if str contains / returns the substring of str after the last / char exclusively, otherwise
                            returns the original string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getParentPath</name>
                        <description>String getParentPath(String str)
                            if str contains / returns the substring of str up to the last / char exclusively, otherwise
                            returns the empty string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getRidOfRootName</name>
                        <description>String getRidOfRootName(String str)
                            if str contains '/', gets rid of all preceding first '/' inclusive
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>indexOf</name>
                        <description>Integer String::indexOf (String match)
                            Returns the index within this string of the first occurrence of the specified match
                            substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isLowerCase</name>
                        <description>Boolean String::isLowerCase ()
                            Checks if all the characters in this string are lower case using the rules of the default
                            locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isStringSingleByte</name>
                        <description>Boolean isStringSingleByte(String s)
                            For SHIFT_JIS encoding, this returns true if the string is made of single byte
                            characters only. False is returned otherwise
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>isUpperCase</name>
                        <description>Boolean String::isUpperCase ()
                            Checks if all the characters in this string are upper case using the rules of the default
                            locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>lastIndexOf</name>
                        <description>Integer String::lastIndexOf (String match)
                            Returns the index within this string of the rightmost occurrence of the specified match
                            substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>length</name>
                        <description>Integer String::length ()
                            Returns the length of this string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseCSV</name>
                        <description>String[] String::parseCSV () | String String::parserCSV(Integer field)
                            Returns an array of each token, as parsed by the CSV parser. If a field number is
                            provided, just the corresponding token substring is returned. A nullpointer exception
                            is thrown if the string to be parsed is null.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseDelim</name>
                        <description>String[] String::parseDelim (String delimeter) | String String::parseDelim (String
                            delimeter, Integer iField)
                            Returns an array of each token, as parsed by the Delim parser. If a field number is
                            provided, just the corresponding token substring is returned.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseFixedWidth</name>
                        <description>String String::parseFixedWidth (Integer beginIndex, Integer endIndex)
                            Returns the corresponding token substring between the two indexes
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>removeHTML</name>
                        <description>String removeHTML (String str)
                            Returns a new string resulting from removing all html tags from the original string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replace</name>
                        <description>String replace (String str, String match, String replacement)
                            Returns a new string resulting from replacing all occurrences of the match substring
                            in this string with the replacement substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replaceCharsNotInDecRangeWithHex</name>
                        <description>String replaceCharsNotInDecRangeWithHex (String str, Integer
                            iStartDecRange, Integer iEndDecRange, String sEncoding, String sQualifier)
                            Does the replace where iStartDecRange and iEndDecRange are inclusive
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>replaceString</name>
                        <description>String replaceString (String str, String match, String replacement)
                            Returns a new string resulting from replacing all occurrences of the match substring
                            in this string with the replacement substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>resizeString</name>
                        <description>String resizeString (String str, Integer finalLength, Character padChar, Boolean
                            padToTheRight)
                            Use to increase the size of a string to the finalLength by applying the appropriate
                            padding to the left or right of the string with the given padChar.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startsWith</name>
                        <description>Boolean String::startsWith (String match)
                            Tests if this string begins with an occurence of the match substring
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>stripOutNonASCII</name>
                        <description>String stripOutNonASCII (String str)
                            Returns a new string resulting from removing all non-ASCII characters in this string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>substring</name>
                        <description>String substring (String str, Integer beginIndex [, Integer endIndex])
                            Returns a new string that is a substring of this string. The beginIndex is inclusive but
                            endIndex is not.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>toLowerCase</name>
                        <description>String toLowerCase (String str)
                            Converts all of the characters in this string to lower case using the rules of the default
                            locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>toTitleCase</name>
                        <description>String toTitleCase (String str)
                            Converts the first alphabet of all the words in a string to upper case
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>toUpperCase</name>
                        <description>String toUpperCase (String str)
                            Converts all of the characters in this string to upper case using the rules of the default
                            locale
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>trim</name>
                        <description>String trim (String str)
                            Removes white space from both ends of this string
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>unescapeHTMLEntities</name>
                        <description>String urlEncode(String str)
                            Translates all character escaped with HTML character codes to corresponding
                            characters
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>urlEncode</name>
                        <description>String urlEncode(String str)
                            Translates a string into x-www-form-urlencoded format
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>system</name>
                <description></description>
                <list>
                    <object>
                        <name>dumpContext</name>
                        <description>String dumpContext([Logger l])
                            Return the script context in a string (and dumps it to the logger l if specified)
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>dumpSystemLog</name>
                        <description>String dumpSystemLog(String sName, int nbLines)
                            Return the last nLines of the system log sName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getFunctionByName</name>
                        <description>FunctionObject ScriptObject::getFunctionByName(String sFunctionName)
                            Build the function object for the function sFunctionName in this script object
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getLogger</name>
                        <description>Logger getLogger(String s)
                            Returns a logger (loggers are in the system log directory with the given name). "s" is
                            a category name defined in log.xml ("com.ibm.ccd.wpc_user_scripting." is prepended
                            automatically to "s".. Logger descriptions are stored in corresponding log files as
                            specified in appender-ref in logs.xml for respective category name. If the name is not
                            present in log.xml then by default logger descriptions are stored in default.log file
                            under respective service directory.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getMemorySummary</name>
                        <description>String getMemorySummary()
                            Invokes the garbage collector, sleeps for 5 seconds and then returns a string
                            summarizing memory usage.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getPageURL</name>
                        <description>String getPageURL(String pageName, Object[] requiredObject)
                            Return the URL for the page requested. The required objects are defined by the page
                            itself which is limited to the following choices (Including their requirements):
                            ITEM_LIST (Catalog, Category, CategoryTree) : displays all items in category. ITEM
                            (Catalog, ItemId/PrimaryKey) : displays item. SEARCH (Catalog) : display rich search
                            for the catalog. COLAREA_STEP (CollaborationArea, StepPath): displays all
                            items/categories in step. COLAREA_ENTRY (CollaborationArea, StepPath,
                            Item/Category PrimaryKey): displays item/category in step.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getProductCenterURL</name>
                        <description>Returns the property trigo_web_url defined in common.properties (which holds
                            the fully-qualified URL, including port number, of the web site where users
                            should point their browsers to access this instance of Product Center
                            Return the current script execution mode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getScriptByPath</name>
                        <description>ScriptObject getScriptByPath(String sScriptPath)
                            Build the script object for the script stored at sScriptPath in the DocStore. If the string
                            starts with "file://" then the script will be loaded from the file system according to the
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>specified path</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>getScriptContextValue</name>
                        <description>Object getScriptContextValue(String sVariableName)
                            Return the value of the variable named sVariableName
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getScriptExecutionMode</name>
                        <description>String getScriptExecutionMode()
                            Return the current script execution mode
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getSystemDefaultEncoding</name>
                        <description>String getSystemDefaultEncoding()
                            Return the value of the system's default encoding
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>invoke</name>
                        <description>Object FunctionObject::invoke(Object arg1, Object arg2, etc)
                            Invoke this function object with the arguments arg1, arg2, etc
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loggerDebug</name>
                        <description>void Logger::loggerDebug(String s)
                            Write s to this logger
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loggerError</name>
                        <description>void Logger::loggerError(String s)
                            Write s to this logger
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loggerFatal</name>
                        <description>void Logger::loggerFatal(String s)
                            Write s to this logger
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loggerInfo</name>
                        <description>void Logger::loggerInfo(String s)
                            Write s to this logger
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>loggerWarn</name>
                        <description>void Logger::loggerWarn(String s)
                            Write s to this logger
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>runScript</name>
                        <description>void ScriptObject::runScript(HashMap hmContext)
                            Run this script
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setScriptContextValue</name>
                        <description>void setScriptContextValue(String sVariableName, Object oVariableValue)
                            Set the value of the variable named sVariableName. This is a way of defining a
                            variable within a script but this must be used with caution. There are already a
                            number of implicit system-defined variables and this script op should not be used to
                            redefine any of these implicit variables. If an implicit variable is redefined the results
                            may be unpredictable. Note that there are a number of implict variables which whose
                            names start with a $ sign. This script op must not be used to define any variables
                            whose name starts with a $ sign. Again, the results may be unpredictable if a variable
                            whose name starts with a dollar sign is defined. The following is a list of the implicit
                            variables (not including those whose name starts with a $ sign):
                            all_itemset_fetch_linked_item, all_itemset_readonly, attribute_group,
                            bypass_approval_workflow, catalog, category, category_tree, colArea,
                            collaboration_area, container, destination_attribute, entry, entrynode, entrySet, err,
                            err_lines, http_request, in, inputs, invoking_user, item, job, lkpTable, location,
                            location_tree, locationRootEntryNode, logger, lookup_table, message,
                            msg_attachments, multi_request, node, organization, organization_type,
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>original_doc_folder,out, outs, page, page_layout, queueid, request, res</name>
                        <description>run_rule_per_occurence, save_event, sequence, soapFaultCode, soapFaultMsg,
                            soapIncomingAttachments, soapMessage, SoapOperationName,
                            soapOutgoingAttachments, soapParams, spec, spec_map, special_outs,
                            specmap_script_dest_attrib, step, stepPath, this, top, val, workflow, workIndex,
                            workList, wrn.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>startTransaction</name>
                        <description>startTransaction { statements }
                            Executes the statements in a transaction, rollback takes place if an error occurs.
                            Does not do anything if a transaction is already open
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>useTransaction</name>
                        <description>useTransaction { statements }
                            Executes the statements in a transaction, rollback takes place if an error occurs
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>timezone</name>
                <description></description>
                <list>
                    <object>
                        <name>getTimeZoneDesc</name>
                        <description>String getTimeZoneDesc(int offsetInMinutes,Locale locale)
                            Get the time zone's description with the offset value in minutes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getTimeZoneOffsetFromDBValue</name>
                        <description>Number getTimeZoneOffsetFromDBValue(String dbValue)
                            Get time zone from the db value and return the offset from GMT in minutes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserTimeZoneDesc</name>
                        <description>String getUserTimeZoneDesc()
                            Get the user setting time zone's description in native language.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getUserTimeZoneOffset</name>
                        <description>Number getUserTimeZoneOffset()
                            Get user setting time zone's offset from GMT in minutes.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>parseTimeZoneToDBValue</name>
                        <description>String parseTimeZoneToDBValue(String srcStr)
                            Parse the string to time zone then return the db value.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setUserTimeZone</name>
                        <description>void setUserTimeZone(int offset)
                            Change user setting's time zone with the offset value in minutes.
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>writer</name>
                <description></description>
                <list>
                    <object>
                        <name>close</name>
                        <description>void Writer::close([String path])
                            Close this writer, and stores its content in the doc store location specified by path, or
                            if the string starts with "file://", on the file system according to the specified path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>createOtherOut</name>
                        <description>Writer createOtherOut(String name, [String charset])
                            Returns a new writer with the given name and an optional charset value. If the string
                            starts with "file://" then the writer will write into the file system file given by the
                            specified path
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>print</name>
                        <description>void Writer::print(Object o)</description>
                        <list/>
                    </object>
                    <object>
                        <name>Writes o as a string into this writer</name>
                        <description></description>
                        <list/>
                    </object>
                    <object>
                        <name>println</name>
                        <description>void Writer::println(Object o)
                            Writes o as a string and appends a new line to it into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>printXML</name>
                        <description>void Writer::printXML(String sTagName, String sValue [, String sAttributes] [,
                            boolean escape])
                            Writes an XML tag with the text value sValue, the tag name sTagName and the
                            attributes sAttributes. The value of escape if given as true, will print the tag with angle
                            brackets surrounding it, converted to escape characters.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>save</name>
                        <description>Doc Writer::save(String documentPath)
                            Creates an Doc object with the content in the Writer and saves it in the specified
                            documentPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setOutputAttribute</name>
                        <description>void Writer::setOutputAttribute(String sAttributeName, String sAttribueValue)
                            Set an attribute of this writer - which becomes an attribute of the document this writer
                            is flushed into, if any
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>setOutputName</name>
                        <description>void Writer::setOutputName(String sName)
                            Set the name of this writer - which becomes the name of the document this writer is
                            flushed into, if any
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>write</name>
                        <description>void Writer::write(Object o)
                            Writes o as a string into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeBinaryFile</name>
                        <description>void writeBinaryFile(String sDestFileName, String sOrigFilePath)
                            Pipes the docstore file represented by sOrigFilePath into a new Doc of name
                            sDestFileName in the directory of the current transaction instance
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeDoc</name>
                        <description>void Writer::writeDoc(Doc doc)
                            Appends doc as a string into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeFile</name>
                        <description>void Writer::writeFile(String sFilePath)
                            Pipes the dostore file represented sFilePath into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeFileUsingOut</name>
                        <description>void Writer::writeFileUsingOut(Writer w)
                            Pipes w into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeFileUsingReader</name>
                        <description>void Writer::writeFileUsingReader(Reader r)
                            Pipes r into this writer
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>writeln</name>
                        <description>void Writer::writeln(Object o)
                            Writes o as a string and appends a new line to it into this writer
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>zip</name>
                <description></description>
                <list>
                    <object>
                        <name>unzip</name>
                        <description>Boolean unzip(String srcPath, String dstPath)
                            Unzip zip file given by srcPath into directory given by dstPath
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>zip (function)</name>
                        <description>Boolean zip(String srcPath, String dstPath[,Stiring[] filesList)
                            Zips files under directory given by srcPath and creates zip file given by dstPath
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
            <object>
                <name>zip_archive</name>
                <description></description>
                <list>
                    <object>
                        <name>addCtgFile</name>
                        <description>Boolean ZipArchive::addCtgFile(String sFileName [, Boolean
                            bUpperCaseName])
                            Use to add a supplier ctg file (including images) to a zip archive
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>closeZipArchive</name>
                        <description>void ZipArchive::closeZipArchive([Boolean deleteAfterDistribution])
                            Use to close a zip archive and upload to the docstore for future distributions. By
                            default, the archive is deleted after the distribution, unless 'deleteAfterDistribution' is
                            false.
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgFileDiffStatus</name>
                        <description>Boolean getCtgFileDiffStatus(String sFileName)
                            Returns true or false to indicate whether or not the file was modified between the two
                            versions selected for differences syndication
                        </description>
                        <list/>
                    </object>
                    <object>
                        <name>getCtgFileExists</name>
                        <description>Boolean getCtgFileExists(String sFileName)
                            Returns true or false to indicate whether the physical file really exists
                        </description>
                        <list/>
                    </object>
                </list>
            </object>
        </list>
    </object>
</tree-objects>