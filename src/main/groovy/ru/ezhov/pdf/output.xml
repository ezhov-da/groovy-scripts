<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<data-objects>
    <object>
        <id>5</id>
        <text>basic
        </text>
    </object>
    <object>
        <id>6</id>
        <text>add
            void Array::add(elements)
            To add elements to an Array
        </text>
    </object>
    <object>
        <id>7</id>
        <text>break-continue
            break|continue]
            To break/continue from a loop
        </text>
    </object>
    <object>
        <id>8</id>
        <text>for
            for(init-statement; cond; each-statement) { t-statements }
            Equivalent to doing init-statement; while(cond) {t-statements; each-statement;}
        </text>
    </object>
    <object>
        <id>9</id>
        <text>getStringValueForClassMember
            String getStringValueForClassMember(String className, String memberName)
            This operation uses java reflection mechanisms to return the value of the specified
            static member for the named class as a string. className needs to be the fully
            qualified name of the class, e.g. java.lang.String
        </text>
    </object>
    <object>
        <id>10</id>
        <text>if-else
            if(Boolean cond) { t-statements } [else { f-statements }]
            If cond is true t-statements are executed, otherwise f-statements are executed
        </text>
    </object>
    <object>
        <id>11</id>
        <text>remove
            void Array::remove(int i)
            To remove the element at the specified position
        </text>
    </object>
    <object>
        <id>12</id>
        <text>return
            return e
            Used in functions: returns e to the caller
        </text>
    </object>
    <object>
        <id>13</id>
        <text>runQuery
            void runQuery(String qryString)
            run query in qryString against default db
        </text>
    </object>
    <object>
        <id>14</id>
        <text>while
            while(Boolean cond) { t-statements }
            As long as cond is true, t-statements are executed
        </text>
    </object>
    <object>
        <id>15</id>
        <text>bidi
        </text>
    </object>
    <object>
        <id>16</id>
        <text>bidiTransform
            public String bidiTransform(String srcStr, String direction, String typeOfText,
            String orientation, String swap, String numShapes, String textShapes)
            If direction is "IMPORT", using the BiDi attributes specified in the parameters to
            create a BiDiText and then tranform it to BiDiText with default attributes. If direction is
        </text>
    </object>
    <object>
        <id>17</id>
        <text>"EXPORT", create a BiDiText using default attribute then tranform it to BiDiText with
            attributes specified in the parameters. typeOfText can be : "IMPLICIT", "VISUAL".
            orientation can be : "LTR", "RTL", "CONTEXTUAL_LTR", "CONTEXTUAL_RTL".
            swap can be : "YES", "NO". numShapes can be : "NOMINAL", "NATIONAL",
            "CONTEXTUAL", "ANY". textShapes can be : "NOMINAL", "SHAPED", "INITIAL",
            "MIDDLE", "FINAL", "ISOLATED". default value is: typeOfText:"IMPLICIT"
            orientation:"LTR" swap:"YES" numShapes:NOMINAL textShapes:NOMINAL
        </text>
    </object>
    <object>
        <id>18</id>
        <text>currency
        </text>
    </object>
    <object>
        <id>19</id>
        <text>getAllCurrencies
            String[] getAllCurrencies()
            This operation return all currency codes that wpc support.
        </text>
    </object>
    <object>
        <id>20</id>
        <text>getCompanyCurrencies
            String[] getCompanyCurrencies()
            This operation return currencies code selected in company attribute.
        </text>
    </object>
    <object>
        <id>21</id>
        <text>getCurrencyDescByCode
            String getCurrencyDescByCode(String code)
            This operation return currency description from currency code
        </text>
    </object>
    <object>
        <id>22</id>
        <text>getCurrencySymbolByCode
            String getCurrencySymbolByCode(String code)
            This operation return currency symbol from currency code,such as input
            "USD",currency symbol return will be "$".
        </text>
    </object>
    <object>
        <id>23</id>
        <text>setCompanyCurrencies
            void setCompanyCurrencies(String listOfCodes[])
            This operation set the list of codes to the company datebase.
        </text>
    </object>
    <object>
        <id>24</id>
        <text>date
        </text>
    </object>
    <object>
        <id>25</id>
        <text>addDate
            Date Date::addDate(String field, Integer value)
            Add the integer value given to the field specified. Allowed field values are : YEAR
            MONTH DATE HOUR MINUTE
        </text>
    </object>
    <object>
        <id>26</id>
        <text>formatDate
            String Date::formatDate(String newFormat[,Locale locale])
            Use to format a date as a human readable format. The newFormat string is a pattern
            whose format is identical to the format used by Java. Locale is optional, default is the
            UI locale.
        </text>
    </object>
    <object>
        <id>27</id>
        <text>getDateField
            Integer Date::getDateField(String field)
            Get the value of the field specified. Allowed field values are : YEAR MONTH DATE
            HOUR_OF_DAY MINUTE SECOND
        </text>
    </object>
    <object>
        <id>28</id>
        <text>getDateInputFormat
            String getDateInputFormat()
            Returns the date input format set in my setting
        </text>
    </object>
    <object>
        <id>29</id>
        <text>getDateOutputFormat
            String getDateOutputFormat()
            Returns the date output format set in my setting
        </text>
    </object>
    <object>
        <id>30</id>
        <text>getDateTimeInUserTimeZone
            Date getDateTimeInUserTimeZone()
            Returns the number of seconds since January 1, 1970, 00:00:00 GMT represented by
            this Date object
        </text>
    </object>
    <object>
        <id>31</id>
        <text>getTime
            Integer Date::getTime()
            Returns the number of seconds since January 1, 1970, 00:00:00 GMT represented by
            this Date object
        </text>
    </object>
    <object>
        <id>32</id>
        <text>isDateAfter
            Boolean Date::isDateAfter(Date otherDate)
            Returns true if and only if this date is after otherDate
        </text>
    </object>
    <object>
        <id>33</id>
        <text>isDateBefore
            Boolean Date::isDateBefore(Date otherDate)
            Returns true, if and only if this date is before otherDate
        </text>
    </object>
    <object>
        <id>34</id>
        <text>new$Date
            new Date(String sFormat, String sDate[,Locale locale)
            Builds a Date object from a String given a date format, if the locale is supplied that
            locale will be used to apply the given format, else default_locale from
            common.properties will be used
        </text>
    </object>
    <object>
        <id>35</id>
        <text>parseDate
            Date parseDate(String value, String format[,Locale locale])
            Use to parse a String value to a Date object. The format string is a pattern whose
            format is identical to the format used by Java. Locale is optional, the default value is
            the UI locale.
        </text>
    </object>
    <object>
        <id>36</id>
        <text>reformatDate
            String reformatDate (String formattedDateString, String currentDateFormat,
            Locale currentLocale [, String newDateFormat, Locale newLocale])
            Takes a date string formatted according to the pattern indicated by
            currentDateFormat and returns a new string formatted according to the
            newDateFormat provided.If currentDateFormat is null the default format for the locale
            is used. If currentLocale or newLocale is null the locale in the user setting is used. If
            newDateFormat is null the standard default pattern "EEE MMM dd HH:mm:ss zzz
            yyyy" is used.
        </text>
    </object>
    <object>
        <id>37</id>
        <text>setDateField
            Date Date::setDateField(String field, Integer value)
            Return a Date equal to the input Date, except that the specified field is set to the
            given value. Allowed field values are : YEAR MONTH DATE HOUR_OF_DAY
            MINUTE SECOND
        </text>
    </object>
    <object>
        <id>38</id>
        <text>setDateInputFormat
            void setDateInputFormat(String format)
            Set the Date input format
        </text>
    </object>
    <object>
        <id>39</id>
        <text>setDateOutputFormat
            void setDateOutputFormat(String format)
            Set the Date output format
        </text>
    </object>
    <object>
        <id>40</id>
        <text>today
            Date today ()
            Returns the current date and time
        </text>
    </object>
    <object>
        <id>41</id>
        <text>db
        </text>
    </object>
    <object>
        <id>42</id>
        <text>commit
            void Connection::commit()
            Commit a transaction using the DB connection
        </text>
    </object>
    <object>
        <id>43</id>
        <text>executeBatchUpdate
            void Connection::executeBatchUpdate(String sql, Object[][] batchValues)
            Executes a prepared statement for a batch update using the connection object. The
            Object[][] is a HashMap of HashMaps, each indexed by integer, whose value is the
            replacement for a '?' in the prepared statement for a given batch.
        </text>
    </object>
    <object>
        <id>44</id>
        <text>executeQuery
            ResultSet Connection::executeQuery(String sql)
            Execute the query using the Connection object. Returns the ResultSet.
        </text>
    </object>
    <object>
        <id>45</id>
        <text>executeUpdate
            int Connection::executeUpdate(String sql)
            Execute the query using the Connection object. Returns the number of rows inserted,
            updated, or deleted.
        </text>
    </object>
    <object>
        <id>46</id>
        <text>getColumn
            Object ResultSet::getColumn(String colName)
            Get the entry for the current result at column colName. Returns an object of type
            Integer, String, or Date (depending on the data type of the column).
        </text>
    </object>
    <object>
        <id>47</id>
        <text>getColumnAt
            Object ResultSet::getColumnAt(Number colNumber)
            Get the entry for the current result at column position. Returns an object of type
            Integer, String, or Date (depending on the data type of the column).
        </text>
    </object>
    <object>
        <id>48</id>
        <text>getWPCDBConnection
            Connection DBContext::getWPCDBConnection()
            Get a non-auto commit connection using the DB context
        </text>
    </object>
    <object>
        <id>49</id>
        <text>getWPCDBContext
            DBContext getWPCDBContext()
            Get the database context object
        </text>
    </object>
    <object>
        <id>50</id>
        <text>loadJar
            Boolean loadJar(String jarName)
            loadJar dynamically adds the jar file of name jarName to the SystemClassLoader.
            This allows subsequent script operations (such as createJavaMethod) to use those
            class files within the jar file. The jarName is specified as the fully qualified file name
            of the jar on the server. The operation returns false if the file cannot be accessed.
            The operation returns true if the dynamic load was successful. If two loadJar calls are
            issued with the same fully qualified jarName and the first was successful, then the
            second call will return true and will not add the jar file again.
        </text>
    </object>
    <object>
        <id>51</id>
        <text>next
            boolean ResultSet::next()
            Move the ResultSet iterator to the next result. Returns false if it has iterated past the
            last result.
        </text>
    </object>
    <object>
        <id>52</id>
        <text>openJDBCConnection
            Connection openJDBCConnection(String driverName, String database, String
            userid, String password)
            Get an (autoCommit on) SQL connection using JDBC Drivers
        </text>
    </object>
    <object>
        <id>53</id>
        <text>releaseJDBCConnection
            void releaseJDBCConnection(Connection conn)
            Rollback and release an SQL connection retrieved using JDBC
        </text>
    </object>
    <object>
        <id>54</id>
        <text>releaseWPCDBConnection
            void DBContext::releaseWPCDBConnection(Connection conn)
            Rollback and release a connection retrieved using the DB context
        </text>
    </object>
    <object>
        <id>55</id>
        <text>rollback
            void Connection::rollback()
            Rollback a transaction using the DB connection
        </text>
    </object>
    <object>
        <id>56</id>
        <text>error
        </text>
    </object>
    <object>
        <id>57</id>
        <text>catchError
            catchError(String errMsg) { statements }
            Analogous to a try-catch in Java, all statements are executed and errMsg is set to
            null in the absence of errors
        </text>
    </object>
    <object>
        <id>58</id>
        <text>logDebug
            void logDebug (String message)
            Logs the debug message with the debug log that is available from the schedule
            profile details screens. Use with caution because the debug log is maintained in
            memory.
        </text>
    </object>
    <object>
        <id>59</id>
        <text>logError
            void logError(String itemId, String message)
            Logs the error message with the corresponding item id to the location specified in the
            context
        </text>
    </object>
    <object>
        <id>60</id>
        <text>logWarning
            void logWarning(String itemId, String message)
            Logs the warning message with the corresponding item id to the location specified in
            the context
        </text>
    </object>
    <object>
        <id>61</id>
        <text>throwError
            void throwError (String rejectionCause)
            Use to throw a Java-like exception. This operation is usually used in conjunction with
            the catchError operation
        </text>
    </object>
    <object>
        <id>62</id>
        <text>excel
        </text>
    </object>
    <object>
        <id>63</id>
        <text>createExcelCell
            IExcelCell ExcelRow::createExcelCell(index)
            Returns am ExcelCell at the requested index within the ExcelRow.
        </text>
    </object>
    <object>
        <id>64</id>
        <text>createExcelCellStyle
            ExcelCellStyle ExcelBook::createExcelCellStyle()
            Returns a cell style associated with this ExcelBook. A style constains characteristics
            of a cell over and above the value such as the font and the fillPattern. A style is
            applied to a cell using ExcelCell::setExcelStyle.
        </text>
    </object>
    <object>
        <id>65</id>
        <text>createExcelSheet
            ExcelSheet ExcelBook::createExcelSheet([String sSheetName])
            Creates a sheet from the workbook. If a sheet name is supplied then the sheet is
            created with this name.
        </text>
    </object>
    <object>
        <id>66</id>
        <text>createFont
            ExcelCellFont ExcelBook::createFont()
            Returns a ExcelCellFont associated with this ExcelBook, the ExcelFont set methods
            should be used to setup the font as required. This font can then be used as the input
            parameter to ExcelCellStyle::setFont(font). The ExcelCellStyle can then be seton an
            cell using ExcelCell::setExcelStyle(cellStyle).
        </text>
    </object>
    <object>
        <id>67</id>
        <text>createRow
            IExcelRow ExcelSheet::createRow(index)
            Returns am ExcelRow at the requested index.
        </text>
    </object>
    <object>
        <id>68</id>
        <text>getCellObj
            ExcelCell ExcelRow::getCellObj(Integer columnIndex)
            Returns the Excel Obj at the given column index for further investigation.
        </text>
    </object>
    <object>
        <id>69</id>
        <text>getDateCellValue
            Date ExcelCell::getDateCellValue()
            Returns the value of this date cell as a date. Use this function only if it is pre
            determined using String ExcelCell::getExcelCellType() (unless known otherwise) that
            the cell is a date type.
        </text>
    </object>
    <object>
        <id>70</id>
        <text>getDateFromDoubleValue
            Date getDateFromDoubleValue(Double dateAsDoubleValue)
            Creates a Date Object from a given Double value.
        </text>
    </object>
    <object>
        <id>71</id>
        <text>getExcelCell
            String ExcelSheet::getExcelCell(Integer iRow, Integer iCol)
            Returns the value of the cell at given row and column indexes as a String value.
        </text>
    </object>
    <object>
        <id>72</id>
        <text>getExcelCellEncoding
            String ExcelCell::getExcelCellEncoding()
            Returns the encoding of the cell. Possible values can be COMPRESSED_UNICODE,
            UTF-16, UNKNOWN.
        </text>
    </object>
    <object>
        <id>73</id>
        <text>getExcelCellType
            String ExcelCell::getExcelCellType()
            Returns the type of this cell. Values can be NUMERIC, STRING, DATE, BLANK,
            UNKNOWN.
        </text>
    </object>
    <object>
        <id>74</id>
        <text>getExcelRow
            ExcelRow ExcelSheet::getExcelRow(Integer iRow)
            Returns the row at the specified index. Note: Rows are zero based.
        </text>
    </object>
    <object>
        <id>75</id>
        <text>getExcelSheet
            ExcelSheet ExcelBook::getExcelSheet(Integer iSheetNumber/String
            sSheetName)
            Returns a sheet from the workbook based on the arguments passed. If
            iSheetNumber is passed, then the sheet having the index specified by this argument
            is returned. If sSheetName is passed, then the sheet is retrieved by the name.
        </text>
    </object>
    <object>
        <id>76</id>
        <text>getExcelSheets
            HashMap ExcelBook::getExcelSheets()
            Returns a hashmap of excel sheets within the workbook. The hashmap is indexed by
            the sheet name.
        </text>
    </object>
    <object>
        <id>77</id>
        <text>getFirstCellNum
            Integer ExcelRow::getFirstCellNum()
            Returns the index of the first physical cell in this row. Note that columns are zero
            based.
        </text>
    </object>
    <object>
        <id>78</id>
        <text>getFirstRowNum
            Integer ExcelSheet::getFirstRowNum()
            Returns the index of the first physical row
        </text>
    </object>
    <object>
        <id>79</id>
        <text>getLastCellNum
            Integer ExcelRow::getLastCellNum()
            Returns the index of the last physical cell in this row.
        </text>
    </object>
    <object>
        <id>80</id>
        <text>getLastRowNum
            Integer ExcelSheet::getLastRowNum()
            Returns the index of the last physical row
        </text>
    </object>
    <object>
        <id>81</id>
        <text>getNbColumns
            Integer ExcelSheet::getNbColumns()
            Returns the number of physical columns in this sheet
        </text>
    </object>
    <object>
        <id>82</id>
        <text>getNbRows
            Integer ExcelSheet::getNbRows()
            Returns the number of physical rows in this sheet
        </text>
    </object>
    <object>
        <id>83</id>
        <text>getNumericCellValue
            Double ExcelCell::getNumericCellValue()
            Returns the value of this numeric cell as a double value. Use this function only if it is
            pre determined using String ExcelCell::getExcelCellType() (unless known otherwise)
            that the cell is a numeric type.
        </text>
    </object>
    <object>
        <id>84</id>
        <text>getStringCellValue
            String ExcelCell::getStringCellValue()
            Returns the value of this text cell as a String. Use this function only if it is pre
            determined using String ExcelCell::getExcelCellType() (unless known otherwise) that
            the cell is a string type.
        </text>
    </object>
    <object>
        <id>85</id>
        <text>new$ExcelBook
            new ExcelBook([Doc docToRead])
            This creates a new ExcelBook. ExcelBooks can be used in 2 ways, to read an
            existing ExcelBook or to create a new ExcelBook. It is not supported to update an
            existing ExcelBook. All the other Excel objects can be obtained either directly from
            this ExcelBook or indirectly from the objects obtained from this ExcelBook (apart from
            the ExcelParser object which has its own constructor). When the script op is used
            within an import job, then an existing ExcelBook is read from the docstore (the default
            import document or the one that is specified in the docToRead parameter). When an
            existing ExcelBook is read, it should not be updated, as any changes will not be
            written back to the docstore. To create an ExcelBook which will be updated, this
            script operation should be called outside of an import job, without the docToRead
            parameter; this creates an ExcelBook in memory which can then saved to the
            docstore using the ExcelBook::saveToDocStore script operation.
        </text>
    </object>
    <object>
        <id>86</id>
        <text>new$ExcelParser
            new ExcelParser(ExcelSheet sheet)
            Returns an excel parser to parse the given spreadsheet.
        </text>
    </object>
    <object>
        <id>87</id>
        <text>saveToDocStore
            void ExcelBook::saveToDocStore([[String docStorePath],Boolean
            overwriteFlag]])
            This saved an updated ExcelBook to the documentation store. If used in an export
            script with no operands, then the excel file will be written into the standard export
            directory with name CATALOG.XLS. If run with no operands outside of an export,
            then this script operation will fail with an exception. When a docStorePath argument
        </text>
    </object>
    <object>
        <id>88</id>
        <text>is supplied, then this is absolute path including the file name where the excel book
            will be written in the doc store. When the overWriteFlag is set to true, then any
            existing excel book at the supplied path will be overwritten, If the overWriteFlag is set
            to false and excelbook existing in the docstore path, an exception will be thrown. If
            the overwriteFlag is not supplied, then it will default to false. It is recommended that
            you do not specify a docstore path in export scripts, as subsequent runs of the export
            will attempt to write to the same file in the doc store (which will only succeed if the
            overwrite flag is set to true)
        </text>
    </object>
    <object>
        <id>89</id>
        <text>setAlignment
            void ExcelCellStyle::setAlignment(String alignment)
            Set the cell style alignment to that supplied. The valid alignments are
            ALIGN_GENERAL, ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT, ALIGN_FILL,
            ALIGN_JUSTIFY, ALIGN_CENTER_SELECTION.
        </text>
    </object>
    <object>
        <id>90</id>
        <text>setBoldWeight
            void ExcelCellFont::setBoldWeight(String weight)
            Set the cell font bold weight. Valid Strings are BOLDWEIGHT_NORMAL and
            BOLDWEIGHT_BOLD.
        </text>
    </object>
    <object>
        <id>91</id>
        <text>setBorderBottom
            void ExcelCellStyle::setBorderBottom(String border)
            Set the Bottom Border to the supplied border. The valid borders are
            BORDER_NONE, BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED,
            BORDER_HAIR, BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
        </text>
    </object>
    <object>
        <id>92</id>
        <text>setBorderLeft
            void ExcelCellStyle::setBorderLeft(String border)
            Set the left Border to the supplied border. The valid borders are BORDER_NONE,
            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
        </text>
    </object>
    <object>
        <id>93</id>
        <text>setBorderRight
            void ExcelCellStyle::setBorderRight(String border)
            Set the Right Border to the supplied border. The valid borders are BORDER_NONE,
            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
        </text>
    </object>
    <object>
        <id>94</id>
        <text>setBorderTop
            void ExcelCellStyle::setBorderTop(String border)
            Set the Top Border to the supplied border. The valid borders are BORDER_NONE,
            BORDER_THIN, BORDER_MEDIUM, BORDER_DASHED, BORDER_HAIR,
            BORDER_THICK, BORDER_DOUBLE, BORDER_DOTTED,
            BORDER_MEDIUM_DASHED, BORDER_DASH_DOT,
            BORDER_MEDIUM_DASH_DOT, BORDER_DASH_DOT_DOT,
            BORDER_MEDIUM_DASH_DOT_DOT, BORDER_SLANTED_DASH_DOT.
        </text>
    </object>
    <object>
        <id>95</id>
        <text>setBottomBorderColor
            void ExcelCellStyle::setBottomBorderColor(String color)
            Set the cell style Bottom border color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
        </text>
    </object>
    <object>
        <id>96</id>
        <text>INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>97</id>
        <text>setCellType
            void ExcelCell::setCellType(String type)
            Set the cell type. Valid values are BLANK, NUMERIC, STRING. Be aware that the
            NUMERIC type will change to a DATE type of cell if the value of the cell is a Date.
        </text>
    </object>
    <object>
        <id>98</id>
        <text>setColor
            void ExcelCellFont::setColor(String color)
            Set the cell fonts color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>99</id>
        <text>setDataFormat
            void ExcelCellStyle::setDataFormat(String format)
            Set the cell style Data Format to that supplied. The valid formats are General, 0, 0.00,
            #, ##0, #, ##0.00, ($#, ##0_);($#, ##0), ($#, ##0_);[Red]($#, ##0), ($#, ##0.00);($#,
            ##0.00), ($#, ##0.00_);[Red]($#, ##0.00), 0%, 0.00%, 0.00E+00, # ?/?, # ??/??,
            m/d/yy, d-mmm-yy, d-mmm, mmm-yy, h:mm AM/PM, h:mm:ss AM/PM, h:mm,
            h:mm:ss, m/d/yy h:mm.
        </text>
    </object>
    <object>
        <id>100</id>
        <text>setDateCellValue
            void ExcelCell::setDateCellValue(Date date)
            Set a Date as the cell value
        </text>
    </object>
    <object>
        <id>101</id>
        <text>setExcelStyle
            void ExcelCell::setExcelStyle(String cellStyle)
            Set the cell style for this cell
        </text>
    </object>
    <object>
        <id>102</id>
        <text>setFillBackgroundColor
            void ExcelCellStyle::setFillBackgroundColor(String color)
            Set the cell style fill Background color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>103</id>
        <text>setFillForegroundColor
            void ExcelCellStyle::setFillForegroundColor(String color)
            Set the cell style fill foreground color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
        </text>
    </object>
    <object>
        <id>104</id>
        <text>INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>105</id>
        <text>setFillPattern
            void ExcelCellStyle::setFillPattern(String pattern)
            Set the cell style fill pattern to that supplied. The valid patterns are NO_FILL,
            SOLID_FOREGROUND, FINE_DOTS, ALT_BARS, SPARSE_DOTS,
            THICK_HORZ_BANDS, THICK_VERT_BANDS, THICK_BACKWARD_DIAG,
            THICK_FORWARD_DIAG, BIG_SPOTS, BRICKS, THIN_HORZ_BANDS,
            THIN_VERT_BANDS, THIN_BACKWARD_DIAG, THIN_FORWARD_DIAG,
            SQUARES, DIAMONDS.
        </text>
    </object>
    <object>
        <id>106</id>
        <text>setFont
            void ExcelCellStyle::setFont(ExcelCellFont font)
            Set the cell style font to that supplied.
        </text>
    </object>
    <object>
        <id>107</id>
        <text>setFontHeight
            void ExcelCellFont::setFontHeight(Integer height)
            Set the cell font height.
        </text>
    </object>
    <object>
        <id>108</id>
        <text>setFontName
            void ExcelCellFont::setFontName(String fontName)
            Set the font name in the ExcelCellFont. The font name is accepted if it is a non-null
            String. The fonts names that are valid are those that are installed on the windows
            system that the spreadsheet is opened on.
        </text>
    </object>
    <object>
        <id>109</id>
        <text>setIndention
            void ExcelCellStyle::setIndention(indent)
            Set the cell indent. The indent amount is the number of intented characters.
        </text>
    </object>
    <object>
        <id>110</id>
        <text>setItalic
            void ExcelCellFont::setItalic(Boolean flag)
            Set the cell font to italic by passing true in, or non-italic by passing false in.
        </text>
    </object>
    <object>
        <id>111</id>
        <text>setLeftBorderColor
            void ExcelCellStyle::setLeftBorderColor(String color)
            Set the cell style left border color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>112</id>
        <text>setNumericCellValue
            void ExcelCell::setNumericCellValue(Double number)
            Set a number as the cell value
        </text>
    </object>
    <object>
        <id>113</id>
        <text>setRightBorderColor
            void ExcelCellStyle::setRightBorderColor(String color)
            Set the cell style Right border color to that supplied. The valid colors are BROWN,
        </text>
    </object>
    <object>
        <id>114</id>
        <text>OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>115</id>
        <text>setStrikeout
            void ExcelCellFont::setStrikeout(Boolean flag)
            Set the cell style text to strikeout by passing true in, or non-strikeout by passing false
            in.
        </text>
    </object>
    <object>
        <id>116</id>
        <text>setStringCellValue
            void ExcelCell::setStringCellValue(String string)
            Set a String as the cell value
        </text>
    </object>
    <object>
        <id>117</id>
        <text>setTopBorderColor
            void ExcelCellStyle::setTopBorderColor(String color)
            Set the cell style Top border color to that supplied. The valid colors are BROWN,
            OLIVE_GREEN,DARK_GREEN, DARK_TEAL,DARK_BLUE,
            INDIGO,GREY_80_PERCENT, DARK_RED,ORANGE, DARK_YELLOW,GREEN,
            TEAL, BLUE,BLUE_GREY, GREY_50_PERCENT,RED, LIGHT_ORANGE,LIME,
            SEA_GREEN,AQUA, LIGHT_BLUE,VIOLET, GREY_40_PERCENT,PINK, GOLD,
            YELLOW,BRIGHT_GREEN, TURQUOISE,SKY_BLUE,
            PLUM,GREY_25_PERCENT, ROSE,TAN, LIGHT_YELLOW,LIGHT_GREEN,
            LIGHT_TURQUOISE,PALE_BLUE, LAVENDER,WHITE,
            CORNFLOWER_BLUE,LEMON_CHIFFON, MAROON,ORCHID,
            CORAL,ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE.
        </text>
    </object>
    <object>
        <id>118</id>
        <text>setUnderline
            void ExcelCellFont::setUnderline(String underline)
            Set the cell font underline. Valid Strings are U_NONE, U_SINGLE, U_DOUBLE,
            U_SINGLE_ACCOUNTING and U_DOUBLE_ACCOUNTING.
        </text>
    </object>
    <object>
        <id>119</id>
        <text>setVerticalAlignment
            void ExcelCellStyle::setVerticalAlignment(String valignment)
            Set the cell style vertical alignment to that supplied. The valid vertical alignments are
            VERTICAL_TOP, VERTICAL_CENTER, VERTICAL_BOTTOM,
            VERTICAL_JUSTIFY .
        </text>
    </object>
    <object>
        <id>120</id>
        <text>setWrapText
            void ExcelCellStyle::setWrapText(Boolean flag)
            Set the cell style text to wrapping by passing true in , or non-wrapping by passing
            false in.
        </text>
    </object>
    <object>
        <id>121</id>
        <text>libxml
        </text>
    </object>
    <object>
        <id>122</id>
        <text>getXMLNode
            XmlNode XMLNode::getXmlNode(String nodePath)
            Returns the xmlnode selected by sPath relative to this node
        </text>
    </object>
    <object>
        <id>123</id>
        <text>getXMLNodeName
            String XMLNode::getXMLNodeName()
            Returns the name of the current XMLNode.
        </text>
    </object>
    <object>
        <id>124</id>
        <text>getXMLNodePath
            String XMLNode::getXMLNodePath()
            Returns the path of the current XMLNode. This path is not an XPath - it is the
            concatenation of all the names of the parent XMLNode's path, /, and the name of this
            XMLNode
        </text>
    </object>
    <object>
        <id>125</id>
        <text>getXMLNodes
            XmlNode[] XMLNode::getXmlNodes(String sPath)
            Returns the xmlnodes selected by sPath relative to this node
        </text>
    </object>
    <object>
        <id>126</id>
        <text>getXMLNodeValue
            String XMLNode::getXMLNodeValue(String nodePath [, Boolean bRequired])
            Returns the value of the current XMLNode. Default value of bRequired is false. It is
            set to throw AustinException
        </text>
    </object>
    <object>
        <id>127</id>
        <text>getXMLNodeValues
            String[] XMLNode::getXMLNodeValues(String nodePath [, Boolean bRequired])
            Returns the values of the XMLNode given by path. Default value of bRequired is
            false. It is set to throw AustinException
        </text>
    </object>
    <object>
        <id>128</id>
        <text>new$XmlDocument
            new XmlDocument(Doc doc/String str)
            Creates an XmlDocument from a docstore Doc instance or an xml string literal. If the
            string starts with "file://" then the xml document will be loaded from the file system
            according to the specified path.
        </text>
    </object>
    <object>
        <id>129</id>
        <text>setXMLNodeValue
            void XMLNode::setXMLNodeValue(String sPath, String value)
            Sets the value of the xmlNode given by sPath. Creates the node if it doesn't exists.
        </text>
    </object>
    <object>
        <id>130</id>
        <text>setXMLNodeValues
            void XMLNode::setXMLNodeValue(String sPath, String[] values)
            Sets the value of the xmlNode given by sPath. Creates the node if it doesn't exists.
        </text>
    </object>
    <object>
        <id>131</id>
        <text>validateXML
            String validateXML(String docPath)
            Validates an XmlDocument from a docstore Doc instance. Returns "Success" if its a
            valid XML Document. Returns "Document not found" if the XML Document not found
            in DocStore. Returns "Document is empty" if the XML Document is empty. Returns
            "Fatal Parsing Error" concatenated with the error description for a non-XML
            Document. Returns "Error" for any other error.
        </text>
    </object>
    <object>
        <id>132</id>
        <text>xmlDocToString
            String XMLNode::xmlDocToString()
            Returns the serialized xml document which this node is part of
        </text>
    </object>
    <object>
        <id>133</id>
        <text>math
        </text>
    </object>
    <object>
        <id>134</id>
        <text>max
            Number max(Number a, Number b)
            Return the max
        </text>
    </object>
    <object>
        <id>135</id>
        <text>min
            Number min(Number a, Number b)
            Return the min
        </text>
    </object>
    <object>
        <id>136</id>
        <text>rand
            Integer rand(Integer max)
        </text>
    </object>
    <object>
        <id>137</id>
        <text>Returns a random integer that is between 0 and max
        </text>
    </object>
    <object>
        <id>138</id>
        <text>reformatDouble
            String reformatDouble (Double origDouble, Integer minDigitsBeforeDecPoint,
            Integer maxDigitsAfterDecPoint)
            Returns a new String representing the number, reformatted to fit the criteria specified
            by minDigitsBeforeDecPoint and maxDigitsAfterDecPoint
        </text>
    </object>
    <object>
        <id>139</id>
        <text>toDouble
            Double toDouble(String str)
            Parses str as a Double
        </text>
    </object>
    <object>
        <id>140</id>
        <text>toInteger
            Integer toInteger(String str)
            Parses str as an Integer
        </text>
    </object>
    <object>
        <id>141</id>
        <text>number
        </text>
    </object>
    <object>
        <id>142</id>
        <text>formatNumber
            String Number::formatNumber(String numberFormat, Locale loc)
            Use to format an Number to a human readable format according to the locale
            specified in the parameter.If locale is null,it will use the locale of user setting. If
            numberFormat is null, it will use the default format of the locale.
        </text>
    </object>
    <object>
        <id>143</id>
        <text>formatNumberByLocPrecision
            String formatNumberByLocPrecision(Double number, Locale loc, Integer
            precision)
            This operation returns a string format along with defined precision and locale
        </text>
    </object>
    <object>
        <id>144</id>
        <text>formatNumberByPrecision
            String formatNumberByPrecision(Double number,Integer precision)
            This operation returns a string format along with defined precision
        </text>
    </object>
    <object>
        <id>145</id>
        <text>parseDouble
            Double parseDouble(String str, Locale loc)
            Pass string to double value based on locale
        </text>
    </object>
    <object>
        <id>146</id>
        <text>parseNumber
            Number parseNumber(String str, String numberFormat, Locale locale)
            Use to parse a String to Number by numberFormat and locale. If locale is null, it will
            use the locale of user setting .If numberFormat is null, it will use the default format of
            the locale. The numberFormat string is a pattern whose format is identical to the
            number format used by Java
        </text>
    </object>
    <object>
        <id>147</id>
        <text>operations
        </text>
    </object>
    <object>
        <id>148</id>
        <text>addLdapAttribute
            void LdapEntry::addLdapAttribute(LdapAttribute attribute)
            Adds an LdapAttribute Object to this LdapEntry.
        </text>
    </object>
    <object>
        <id>149</id>
        <text>addLdapEntry
            void LdapEntrySet::addLdapEntry(LdapEntry entry)
            Create a new Ldap Entry Set
        </text>
    </object>
    <object>
        <id>150</id>
        <text>addLdapObjectclass
            void LdapEntry::addLdapObjectclass(LdapOperation objectClass)
            Adds an LdapObjectclass Object to this LdapEntry.
        </text>
    </object>
    <object>
        <id>151</id>
        <text>createLDIFFile
            createLDIFFile(String docstore_filename, LdapEntrySet entrySet)
            A static method that creates an LDIF formatted file based upon an input Ldap entry
            set. The filename is a docstore reference
        </text>
    </object>
    <object>
        <id>152</id>
        <text>getLdapAttributes
            LdapAttributes[] LdapEntry::getLdapAttributes()
            Retrieves the LdapAttribute Objects for this LdapEntry.
        </text>
    </object>
    <object>
        <id>153</id>
        <text>getLdapAttributeType
            String LdapAttribute::getLdapAttributeType()
            Retrieves the attribute type or name of an LdapAttribute Object
        </text>
    </object>
    <object>
        <id>154</id>
        <text>getLdapAttributeValue
            Object LdapAttribute::getLdapAttributeValue()
            Retrieves the attribute value of an LdapAttribute Object
        </text>
    </object>
    <object>
        <id>155</id>
        <text>getLdapDistinguishedName
            LdapAttribute LdapEntry::getLdapDistinguishedName()
            Retrieves the distinguished name for an LdapEntry as an LdapAttribute Objects
        </text>
    </object>
    <object>
        <id>156</id>
        <text>getLdapEntries
            LdapEntry[] LdapEntrySet::getLdapEntries()
            Retrieves the LdapEntry Objects.
        </text>
    </object>
    <object>
        <id>157</id>
        <text>getLdapObjectclass
            String LdapObjectclass::getLdapObjectclass()
            Retrieves the name of a LdapObjectclass Object
        </text>
    </object>
    <object>
        <id>158</id>
        <text>getLdapObjectclasses
            LdapObjectclass[] LdapEntry::getLdapObjectclasses()
            Retrieves the LdapObjectclass Objects for this LdapEntry.
        </text>
    </object>
    <object>
        <id>159</id>
        <text>getLdapOperation
            String[] LdapEntry::getLdapOperationDetails()
            Retrieves the LdapOperation details strings for this LdapEntry.
        </text>
    </object>
    <object>
        <id>160</id>
        <text>isBinary
            Boolean LdapAttribute::isBinary()
            Indicates if the attribute represents a binary value encoded as a BASE64 string.
        </text>
    </object>
    <object>
        <id>161</id>
        <text>isExternal
            Boolean LdapAttribute::isExternal()
            Indicates if the attribute is a reference to an external file. For example and jpeg image
        </text>
    </object>
    <object>
        <id>162</id>
        <text>new$LdapAttribute
            new LdapAttribute(String attributeType, Object attributeValue [, Boolean
            isBinary, Boolean isExternal)
            Create a new Ldap Attribute. Optional parameters: isBinary represents a BASE64
            encoded binary representation, default false; isExternal represents an external file
            reference, default false
        </text>
    </object>
    <object>
        <id>163</id>
        <text>new$LdapEntry
            new LdapEntry()
            Create a new Ldap Entry
        </text>
    </object>
    <object>
        <id>164</id>
        <text>new$LdapEntrySet
            new LdapEntrySet()
        </text>
    </object>
    <object>
        <id>165</id>
        <text>Create a new Ldap Entry Set
        </text>
    </object>
    <object>
        <id>166</id>
        <text>new$LdapObjectclass
            new LdapObjectclass(String objclass)
            Create a new Ldap objectclass object
        </text>
    </object>
    <object>
        <id>167</id>
        <text>parseLDIFFile
            LdapEntrySet parseLDIFFile(String filename)
            A static method that reads an LDIF file and instantiates an Ldap entry set based on it.
            The filename is a system reference
        </text>
    </object>
    <object>
        <id>168</id>
        <text>setLdapDistinguishedName
            void LdapEntry::setLdapDistinguishedName(LdapAttribute dn)
            Sets the single distinguished name for an LdapEntry as an LdapAttribute Objects
        </text>
    </object>
    <object>
        <id>169</id>
        <text>setLdapOperation
            void LdapEntry::setLdapOperation(LdapOperation operation)
            Adds an LdapOperation object to an LdapEntry.
        </text>
    </object>
    <object>
        <id>170</id>
        <text>operations_admin
        </text>
    </object>
    <object>
        <id>171</id>
        <text>flushScriptCache
            ::flushScriptCache()
            Flushes the script cache on the local JVM. While this is normally done automatically,
            this script operation is provided in case there are any techniques that would cause
            the scripts to update in docstore, without properly updating the cache. This method
            may also be used to test the caching behavior of scrpts.
        </text>
    </object>
    <object>
        <id>172</id>
        <text>logActionableMessage
            Integer logActionableMessage(String type, String action, String comment,
            IMessage msg, String state)
            Logs a message in the alerts console for a message "msg". the Actionable "type" is
            primary heading or category under which an actionable is classified. Actionable
            "action" is known as the actionable topic. The topic is essentially a more specific
            version of the actionable type, it can be Accept or Reject. Actionable "comment" is
            information about the actionable. Actionable "state" sets the priority level of this
            actionable, the level can be set to either "INF" for informational, "ACT" for actionable
            or "ERR" for any error. It returns a unique ID for the message logged
        </text>
    </object>
    <object>
        <id>173</id>
        <text>new$SystemDB
            new SystemDB()
            Returns an object that represents the status of the current database
        </text>
    </object>
    <object>
        <id>174</id>
        <text>reportAllTableIndexes
            String SystemDB::reportAllTableIndexes()
            Reports all the tables and their indexes
        </text>
    </object>
    <object>
        <id>175</id>
        <text>reportChangedIndexes
            String SystemDB::reportChangedIndexes()
            Reports the list of indexes that have not been updated
        </text>
    </object>
    <object>
        <id>176</id>
        <text>reportExtraIndexes
            String SystemDB::reportExtraIndexes()
            Reports the list of indexes that are extra in the current database that sould not be
            there
        </text>
    </object>
    <object>
        <id>177</id>
        <text>reportIndexStatistics
            String SystemDB::reportIndexStatistics()
        </text>
    </object>
    <object>
        <id>178</id>
        <text>Reports all the indexes and their current statistics and whether or not they need to be
            rebuilt. Warning: This script op should not be used on a live sytems; using this script
            operation during normal WPC operations will have a detrimental effect on
            performance.
        </text>
    </object>
    <object>
        <id>179</id>
        <text>reportMissingIndexes
            String SystemDB::reportMissingIndexes()
            Reports the list of indexes that are missing in the current database that sould be
            there
        </text>
    </object>
    <object>
        <id>180</id>
        <text>operations_assert
        </text>
    </object>
    <object>
        <id>181</id>
        <text>assertEquals
            void ::assertEquals(Object expectedValue, Object actualValue, [String
            message])
            Throws a ScriptAssertException when the two object references do not refer to the
            same 'simple' value. Therefore, note that a value of 1.0 (of type double) will NOT
            equal a value of 1 (of type Integer). Note that 'complex' objects e.g. Catalog,
            Hierarchy etc. are not supported currently.
        </text>
    </object>
    <object>
        <id>182</id>
        <text>assertFalse
            void ::assertFalse(Boolean condition, [String message])
            Throws a ScriptAssertException unless condition is false
        </text>
    </object>
    <object>
        <id>183</id>
        <text>assertNotNull
            void ::assertNotNull(Object obj, [String message])
            Throws a ScriptAssertException unless the value is NOT null
        </text>
    </object>
    <object>
        <id>184</id>
        <text>assertNull
            void ::assertNull(Object obj, [String message])
            Throws a ScriptAssertException unless the value is null
        </text>
    </object>
    <object>
        <id>185</id>
        <text>assertTrue
            void ::assertTrue(Boolean condition, [String message])
            Throws a ScriptAssertException unless condition is true
        </text>
    </object>
    <object>
        <id>186</id>
        <text>operations_attr_group
        </text>
    </object>
    <object>
        <id>187</id>
        <text>addAttributeToAttrGroup
            void AttrGroup::addAttributeToAttrGroup(String attrPath [, boolean
            throwError])
            Adds an attribute to the attribute collection.Irrespective of throwError flag, throws an
            exception if called on a default generated attribute collection. If throwError is true,
            throws an exception for invalid attrPath. By default, value of throwError is false
        </text>
    </object>
    <object>
        <id>188</id>
        <text>addLocalesToAttrGroup
            void AttrGroup::addLocalesToAttrGroup(String localesCSVString)
            Adds the locales to the Attribute Collection.Throws an exception if called on default
            generated attribute collection.
        </text>
    </object>
    <object>
        <id>189</id>
        <text>addLocalizedNodeToAttrGroup
            void AttrGroup::addLocalizedNodeToAttrGroup(Node node)
            Associates this localized node with this attribute collection. Throws an exception if
            called on default generated attribute collection.
        </text>
    </object>
    <object>
        <id>190</id>
        <text>addSpecToAttrGroup
            void AttrGroup::addSpecToAttrGroup(Spec spec, [boolean bDynamic])
        </text>
    </object>
    <object>
        <id>191</id>
        <text>Associates all the nodes of the spec with this attribute collection. If the bDynamic flag
            is set to true then any additional nodes added to the spec, after the spec has been
            associated to the Attribute Collection, will become part of the Attribute Collection. If
            the bDynamic flag is set to false then only the nodes that are part of the spec at this
            time only will be added to the Attribute Collection. By default, value for bDynamic is
            true. Throws an exception if called on default generated attribute collection.
        </text>
    </object>
    <object>
        <id>192</id>
        <text>deleteAttrGroup
            void AttrGroup::deleteAttrGroup()
            Deletes this attribute collection. Throws an exception if called on default generated
            attribute collection.
        </text>
    </object>
    <object>
        <id>193</id>
        <text>getAllAttrGroupsForAttribute
            AttrGroup[] getAllAttrGroupsForAttribute(String attrPath)
            Returns an array of AttrGroups where the attrPath is included. Return null if attrPath
            is not included in any Attribut Group.
        </text>
    </object>
    <object>
        <id>194</id>
        <text>getAllAttributePathsFromAttrGroup
            String[] AttrGroup::getAllAttributePathsFromAttrGroup()
            Returns all the attribute paths associated with this attribute collection
        </text>
    </object>
    <object>
        <id>195</id>
        <text>getAttrGroupByName
            AttrGroup getAttrGroupByName(String name)
            Returns the attribute collection with the given name. Otherwise it becomes null.
        </text>
    </object>
    <object>
        <id>196</id>
        <text>getAttrGroupName
            String AttrGroup::getAttrGroupName()
            Returns the name of this attribute collection
        </text>
    </object>
    <object>
        <id>197</id>
        <text>getAttrGroupType
            String AttrGroup::getAttrGroupType()
            Returns the type of this attribute collection. Type can only be GENERAL.
        </text>
    </object>
    <object>
        <id>198</id>
        <text>getLocalesOfAttrGroup
            String AttrGroup::getLocalesOfAttrGroup()
            Returns the locales to the Attribute Collection as a single String of comma-separated
            values.
        </text>
    </object>
    <object>
        <id>199</id>
        <text>new$AttrGroup
            new AttrGroup(String name, String type, [String desc])
            Returns a new attribute collection with the given name, type and description. Type
            can only be GENERAL.
        </text>
    </object>
    <object>
        <id>200</id>
        <text>removeAttributeFromAttrGroup
            void AttrGroup::removeAttributeFromAttrGroup(String attrPath)
            Removes the attribute from the attribute collection.Throws an exception if called on
            default generated attribute collection.
        </text>
    </object>
    <object>
        <id>201</id>
        <text>removeLocalesFromAttrGroup
            void AttrGroup::removeLocalesFromAttrGroup(String localesCSVString)
            Removes the locales from the Attribute Collection.Throws an exception if called on
            default generated attribute collection.
        </text>
    </object>
    <object>
        <id>202</id>
        <text>removeSpecFromAttrGroup
            void AttrGroup::removeSpecFromAttrGroup(Spec spec)
            Disassociates all the nodes of the spec from this attribute collection.Throws an
            exception if called on default generated attribute collection.
        </text>
    </object>
    <object>
        <id>203</id>
        <text>operations_catalog
        </text>
    </object>
    <object>
        <id>204</id>
        <text>addCtgItemToSelection
            (deprecated) see addEntryToSelection
            Add the item to the basic selection (does nothing for an advanced selection)
        </text>
    </object>
    <object>
        <id>205</id>
        <text>addEntryToSelection
            void Selection::addEntryToSelection(Entry entry)
            Add the entry to the basic selection - the entry can be an item or a hierarchy node
            (does nothing for advanced selection).
        </text>
    </object>
    <object>
        <id>206</id>
        <text>addSecondaryCategoryTree
            void Catalog::addSecondaryCategoryTree(CategoryTree categoryTree)
            Add category tree as a secondary category tree
        </text>
    </object>
    <object>
        <id>207</id>
        <text>associateCategoryCacheToItemSet
            void ItemSet::associateCategoryCacheToItemSet(CategoryCache catCache)
            Associates the CategoryCache to the ItemSet so that when items are fetched, the
            corresponding categories are also fetched in bulk
        </text>
    </object>
    <object>
        <id>208</id>
        <text>buildTestCatalogData
            buildTestCatalogData(Spec fileSpec, String sDocStorePath, Integer nbRows [,
            Integer firstSku])
            Create a document at sDocStorePath for the file specification fileSpec with nbRows
            of random data, with the primary key starting at firstSku
        </text>
    </object>
    <object>
        <id>209</id>
        <text>containsByPrimaryKey
            boolean Catalog::containsByPrimaryKey(String sPrimaryKey) - boolean
            ItemSet::containsByPrimaryKey(String sPrimaryKey)
            Returns true, if the catalog or item set contains an item with the primary key
            sPrimaryKey
        </text>
    </object>
    <object>
        <id>210</id>
        <text>defineLocationSpecificData
            void Catalog::defineLocationSpecificData(CategoryTree ctr, Spec spc,
            AttrGroup[] inhAttrGrps)
            Sets up location specific data for a catalog. CTR is the category tree that contains the
            locations. SPC is the spec of the locations. INHATTRBRPS is an array of attribute
            groups containing the inheritable attributes.
        </text>
    </object>
    <object>
        <id>211</id>
        <text>deleteCatalog
            (deleteCatalog(Catalog ctg)
            Delete the catalog ctg. WARNING: Transactional disruption will occur: This script
            operation will roll back any existing transaction, and will leave the database
            connection in auto-commit. This script operation should be used carefully; for
            example, it should not be called in a catchError block.
        </text>
    </object>
    <object>
        <id>212</id>
        <text>deleteSelection
            boolean Selection::deleteSelection()
            Delete the selection. Return true if the deletion occured, false if selection was in use.
        </text>
    </object>
    <object>
        <id>213</id>
        <text>disableContainerProcessingOptions
            void Container::disableContainerProcessingOptions(String[] options)
            Disable the specified processing options - possible values: PRE_SCRIPT,
            POST_SCRIPT, POST_SAVE_SCRIPT, ENTRY_BUILD_SCRIPT, VALUE_RULES,
            VALIDATION_RULES, DEFAULT_VALUES, DEFAULT_VALUE_RULES,
            SEQUENCES, TYPE_VALIDATION, MERGE_WITH_OLD_VERSION,
            MIN_MAX_OCCURANCE, MIN_MAX_LENGTH, POSSIBLE_VALUES,
            PATTERN_VALIDATION, COL_AREA_LOCKS_VALIDATION,
            LOCK_CATEGORIES_FOR_ITEM_SAVE, LOCKING, UNIQUE_VALIDATION, ALL
        </text>
    </object>
    <object>
        <id>214</id>
        <text>exportCatalog
            void Catalog::exportCatalog(Spec mktplaceSpec, SpecMap specMap)
            Use to syndicate a catalog using mktplaceSpec and specMap
        </text>
    </object>
    <object>
        <id>215</id>
        <text>forEachCtgItem
            forEachCtgItem([String sCatalogName, ], Item item) { statements }
            Executes the statements for each item in the catalog called sCatalogName
        </text>
    </object>
    <object>
        <id>216</id>
        <text>forEachItemSetElement
            forEachItemSetElement(ItemSet is, Object oItem) { statements }
            Executes the statements for each (oItem) map in the ItemSet
        </text>
    </object>
    <object>
        <id>217</id>
        <text>getAttributeGroupsToProcess
            AttrGroup[] Container::getAttributeGroupsToProcess()
            Return the list of attribute collections if any have been specified to restrict processing
            an retrieval from the database. If a null is returned, it means that retrieval and
            processing is not being restricted and all attributes are being processed
        </text>
    </object>
    <object>
        <id>218</id>
        <text>getCatalogAccessControlGroupName
            String Catalog::getCatalogAccessControlGroupName()
            Returns the Access Control Group for this catalog.
        </text>
    </object>
    <object>
        <id>219</id>
        <text>getCatalogAttribute
            String[] Catalog::getCatalogAttribute(String sAttribName)
            Returns a list of values for the attribute sAttribName
        </text>
    </object>
    <object>
        <id>220</id>
        <text>getCatalogAttributes
            HashMap Catalog::getCatalogAttributes()
            Returns a HashMap mapping attributes to their respective values. The attributes
            returned are "SCRIPT_NAME", "PRE_SCRIPT_NAME",
            "POST_SAVE_SCRIPT_NAME", "ENTRY_BUILD_SCRIPT",
            "DISPLAY_ATTRIBUTE", "USER_DEFINED_CORE_ATTRIBUTE_GROUP" and
            "SCRIPT_RESTRICT_LOCALES".
        </text>
    </object>
    <object>
        <id>221</id>
        <text>getCatalogCategoryTrees
            HashMap Catalog::getCatalogCategoryTrees()
            Return an array with category trees of this catalog
        </text>
    </object>
    <object>
        <id>222</id>
        <text>getCatalogId
            Integer Catalog::getCatalogId()
            Returns the ID of this catalog.
        </text>
    </object>
    <object>
        <id>223</id>
        <text>getCatalogItemCountInVersion
            Integer Catalog::getCatalogItemCountInVersion(Version version)
            Returns the number of items in the specified version of this catalog
        </text>
    </object>
    <object>
        <id>224</id>
        <text>getCatalogNamesList
            String[] getCatalogNamesList([String filterByPrivilege])
            Return the list of names of available catalogs filtered by catalog privileges LIST (list
            catalog), VIEW_ITEMS (view items in catalog), MODIFY_ITEMS (modify items in
            catalog). By default the catalog names for the catalogs with LIST privilege access are
            returned.
        </text>
    </object>
    <object>
        <id>225</id>
        <text>getCatalogsByAttributeValue
            Catalog[] getCatalogsByAttributeValue(String attribute_name, String value)
            Returns all catalogs that have the provided value for the attribute
        </text>
    </object>
    <object>
        <id>226</id>
        <text>getCatalogSpec
        </text>
    </object>
    <object>
        <id>227</id>
        <text>Spec Catalog::getCatalogSpec([Boolean bGetImmutableSpec])
            Returns the spec this catalog. If the optional boolean bGetImmutableSpec is set to
            true, an immutable spec is retrieved (you can not modify the spec, but it is faster to
            retrieve). By default you get a mutable spec.
        </text>
    </object>
    <object>
        <id>228</id>
        <text>getCatalogVersion
            Version Catalog::getCatalogVersion()
            Returns the version of this catalog.
        </text>
    </object>
    <object>
        <id>229</id>
        <text>getCatalogVersionSummary
            Versions[] Catalog::getCatalogVersionSummary()
            Return an array with versions of this catalog - most recent first
        </text>
    </object>
    <object>
        <id>230</id>
        <text>getCategorizedItemCountInVersion
            Integer Catalog::getCategorizedItemCountInVersion(Version version,
            CategoryTree ctgtree)
            Returns the number of items categorized in the specified category tree for the
            specified version of this catalog
        </text>
    </object>
    <object>
        <id>231</id>
        <text>getCheckedOutEntryColAreasByPrimaryKey
            String[] Container::getCheckedOutEntryColAreasByPrimaryKey(String
            sPrimaryKey)
            Return a list of collaboration area names in which the entry for the given primary key
            is checked out. Returns empty list if entry is not checked out.
        </text>
    </object>
    <object>
        <id>232</id>
        <text>getContainerId
            Integer Container::getContainerId()
            Returns the ID of this container.
        </text>
    </object>
    <object>
        <id>233</id>
        <text>getContainerLocalesForRole
            String Container::getContainerLocalesForRole(Role role)
            Gets the locales that are allowed for this container specifically for the particular role.
        </text>
    </object>
    <object>
        <id>234</id>
        <text>getContainerType
            String Container::getContainerType()
            Returns the type of the container. Types can be one of the following: CATALOG,
            CATEGORY_TREE
        </text>
    </object>
    <object>
        <id>235</id>
        <text>getCtgByName
            Catalog getCtgByName([String name])
            Returns the catalog object with the corresponding name. If no name is provided,
            return the default catalog (if defined).
        </text>
    </object>
    <object>
        <id>236</id>
        <text>getCtgCategorySpecs
            HashMap Catalog::getCtgCategorySpecs()
            Returns the category specs for this catalog
        </text>
    </object>
    <object>
        <id>237</id>
        <text>getCtgItemByAttributeValue
            ItemSet Catalog::getCtgItemByAttributeValue(String sNodePath, String sValue)
            Returns ItemSet of items from the catalog that have the provided value for the
            attribute. Use "" or null value for searching EMPTY values. An excpetion is throw if
            the attribute does not exist or it is not indexed.
        </text>
    </object>
    <object>
        <id>238</id>
        <text>getCtgItemByPrimaryKey
            Item Catalog::getCtgItemByPrimaryKey(String sPrimaryKey)
            Method deprecated. Use Container::getEntryByPrimaryKey. Returns the item from
            the catalog with the given primary key - this method cannot be used to retrieve newly
            created items that have not been saved yet.
        </text>
    </object>
    <object>
        <id>239</id>
        <text>getCtgItemIdByPrimaryKey
            Integer Catalog::getCtgItemIdByPrimaryKey(String sPrimaryKey)
            Returns an item id by primary key
        </text>
    </object>
    <object>
        <id>240</id>
        <text>getCtgName
            String Catalog::getCtgName()
            Returns the name of this catalog
        </text>
    </object>
    <object>
        <id>241</id>
        <text>getCtgSpec
            Spec Catalog::getCtgSpec([Boolean bGetImmutableSpec])
            Returns the spec this catalog. If the optional boolean bGetImmutableSpec is set to
            true, an immutable spec is retrieved (you can not modify the spec, but it is faster to
            retrieve). By default you get a mutable spec.
        </text>
    </object>
    <object>
        <id>242</id>
        <text>getDefaultCatalogName
            (deprecated) String getDefaultCatalogName()
            See getCtgByName(). Returns the name of the catalog being used for an
            aggregation/syndication.
        </text>
    </object>
    <object>
        <id>243</id>
        <text>getDestinationCatalog
            Catalog getDestinationCatalog()
            Returns the destination catalog for catalog to catalog exports.
        </text>
    </object>
    <object>
        <id>244</id>
        <text>getDynamicSelectionQueryString
            String DynamicSelection::getDynamicSelectionQueryString()
            Returns the query string for this dynamic selection
        </text>
    </object>
    <object>
        <id>245</id>
        <text>getEntrySetForPrimaryKeys
            EntrySet Container::getEntrySetForPrimaryKeys(Array pkeys, Boolean
            bOptimize)
            Returns an EntrySet of the entries in this container for the given primary keys - set
            bOptimize to true if you don't plan on changing the entries, the entry set is then
            optimized but these entries don't keep track of changed attributes
        </text>
    </object>
    <object>
        <id>246</id>
        <text>getEntrySetSize
            Integer EntrySet::getEntrySetSize()
            Returns the number of entries in an entry set
        </text>
    </object>
    <object>
        <id>247</id>
        <text>getExportItemsCount
            Integer getExportItemsCount()
            Returns the number of items being syndicated
        </text>
    </object>
    <object>
        <id>248</id>
        <text>getExportItemSets
            ItemSet[] getExportItemSets()
            Returns an array of ItemSets being syndicated
        </text>
    </object>
    <object>
        <id>249</id>
        <text>getHierarchyNodeSetForSelection
            HierarchyNodeSet Selection::getHierarchyNodeSetForSelection()
            Return the hierarchy nodes in that selection as a HierarchyNodeSet
        </text>
    </object>
    <object>
        <id>250</id>
        <text>getItemBySku
            (deprecated) see getCtgItemByPrimaryKey
        </text>
    </object>
    <object>
        <id>251</id>
        <text>getItemPrimaryKeysForCategory
            String[] Category::getItemPrimaryKeysForCategory(Catalog ctg [, Boolean
            ordered])
            Returns an array of Strings containing the primary keys of the items in this category.
            The option Boolean 'ordered' being set to true makes the operation return the ordered
            children of this category if the catalog is set up to use ordering
        </text>
    </object>
    <object>
        <id>252</id>
        <text>getItemSetForCatalog
            ItemSet Catalog::getItemSetForCatalog()
            Returns an ItemSet of the items in this catalog
        </text>
    </object>
    <object>
        <id>253</id>
        <text>getItemSetForCategory
            ItemSet Category::getItemSetForCategory(Catalog ctg [, Boolean ordered])
            Returns an ItemSet of the items in this category. The option Boolean 'ordered' being
            set to true makes the operation return the ordered children of this category if the
            catalog is set up to use ordering
        </text>
    </object>
    <object>
        <id>254</id>
        <text>getItemSetForPrimaryKeys
            ItemSet Catalog::getItemSetForPrimaryKeys(Array pkeys, Boolean bOptimize)
            Returns an ItemSet of the items in this catalog for the given primary keys - set
            bOptimize to true if you don't plan on changing the items, the item set is then
            optimized but these items don't keep track of changed attributes
        </text>
    </object>
    <object>
        <id>255</id>
        <text>getItemSetForSelection
            ItemSet Selection::getItemSetForSelection()
            Return the items in that selection as a ItemSet
        </text>
    </object>
    <object>
        <id>256</id>
        <text>getItemSetForUnassigned
            ItemSet Catalog::getItemSetForUnassigned(CategoryTree ctr, boolean
            readOnly)
            Returns an ItemSet of the items in this catalog which are not assigned to any of the
            categories of given category tree
        </text>
    </object>
    <object>
        <id>257</id>
        <text>getItemSetSize
            Integer ItemSet::getItemSetSize()
            Returns the number of items in an item set
        </text>
    </object>
    <object>
        <id>258</id>
        <text>getItemsInCategory
            Item[] Catalog::getItemsInCategory(Category [, Boolean ordered])
            Returns an array of the items in this category. The option Boolean 'ordered' being set
            to true makes the operation return the ordered children of this category if the catalog
            is set up to use ordering
        </text>
    </object>
    <object>
        <id>259</id>
        <text>getPrimaryCategoryTree
            CategoryTree Catalog::getPrimaryCategoryTree()
            Returns the primary category tree of this catalog
        </text>
    </object>
    <object>
        <id>260</id>
        <text>getSelectionAccessControlGroupName
            String Selection::getSelectionAccessControlGroupName()
            Returns the Access Control Group for this selection.
        </text>
    </object>
    <object>
        <id>261</id>
        <text>getSelectionByName
            Selection getSelectionByName(String sName)
            Return the selection called sName
        </text>
    </object>
    <object>
        <id>262</id>
        <text>getSelectionCatalog
            Catalog Selection::getSelectionCatalog()
            Returns the selection's catalog
        </text>
    </object>
    <object>
        <id>263</id>
        <text>getSelectionHierarchy
            Hierarchy Selection::getSelectionHierarchy()
            Returns the selection's hierarchy.
        </text>
    </object>
    <object>
        <id>264</id>
        <text>getSelectionHierarchyNodeCount
            Integer Selection::getSelectionHierarchyNodeCount()
        </text>
    </object>
    <object>
        <id>265</id>
        <text>Returns the number of hierarchy nodes in a selection - returns 0 for advanced
            selections.
        </text>
    </object>
    <object>
        <id>266</id>
        <text>getSelectionItemCount
            Integer Selection::getSelectionItemCount()
            Returns the number of items in a selection
        </text>
    </object>
    <object>
        <id>267</id>
        <text>getSelectionName
            String Selection::getSelectionName()
            Returns the name of this selection
        </text>
    </object>
    <object>
        <id>268</id>
        <text>getSelectionNamesList
            String[] getSelectionNamesList(Catalog catalog)
            Return the list of names of available selections for catalog
        </text>
    </object>
    <object>
        <id>269</id>
        <text>getSequenceByName
            Sequence getSequenceByName(String name)
            Gets the sequence object with the corresponding name where name is defined by the
            name of the catalog/category tree + "_" + "CTG" / "CATTREE" + "_" + the path of the
            node the sequence is defined for.
        </text>
    </object>
    <object>
        <id>270</id>
        <text>getSequenceCurrentValue
            String Sequence::getSequenceCurrentValue()
            Returns the current value of this sequence. This number is less than or equal to the
            last preallocated value stored in the DB. Note, because of sequence caching, this
            number will vary depending on the JVM. If the JVM has not called getNextValue, then
            this method will return the last allocated value in the JVM. If the sequence row does
            not exist in the DB, this method will reuturn -1.
        </text>
    </object>
    <object>
        <id>271</id>
        <text>getSequenceNextValue
            String Sequence::getSequenceNextValue()
            Returns the next value of this sequence
        </text>
    </object>
    <object>
        <id>272</id>
        <text>getSourceCatalog
            Catalog getSourceCatalog()
            Returns the source catalog for catalog to catalog exports.
        </text>
    </object>
    <object>
        <id>273</id>
        <text>getVersionDate
            Date Version::getVersionDate()
            Returns the date of this version
        </text>
    </object>
    <object>
        <id>274</id>
        <text>getVersionName
            String Version::getVersionName()
            Returns the name of this version
        </text>
    </object>
    <object>
        <id>275</id>
        <text>getVersionType
            String Version::getVersionType()
            Returns the type of this version
        </text>
    </object>
    <object>
        <id>276</id>
        <text>hasAccessToPrivilegeForEntry
            boolean Entry::hasAccessToPrivilegeForEntry(String priv_name)
            Checks if the entry has access to the given privilege.
        </text>
    </object>
    <object>
        <id>277</id>
        <text>hasCtgListPermission
            Boolean Catalog::hasCtgListPermission()
            Returns true if the current user has permission to list this catalog, false otherwise
        </text>
    </object>
    <object>
        <id>278</id>
        <text>hasCtrListPermission
            Boolean CategoryTree::hasCtrListPermission()
        </text>
    </object>
    <object>
        <id>279</id>
        <text>Returns true if the current user has permission to list this category tree, false
            otherwise
        </text>
    </object>
    <object>
        <id>280</id>
        <text>insertNewVersion
            Version Container::insertNewVersion(String sName)
            Add a version called sName on this container.
        </text>
    </object>
    <object>
        <id>281</id>
        <text>isEntryCheckedOutForPrimaryKey
            Boolean Container::isEntryCheckedOutForPrimaryKey(String sPrimaryKey)
            Returns true if the entry for the given primary key is checked out into a collaboration
            area otherwise it returns false.
        </text>
    </object>
    <object>
        <id>282</id>
        <text>isOrdered
            Boolean Catalog::isOrdered()
            Returns the value of catalog's Use Ordering attribute.
        </text>
    </object>
    <object>
        <id>283</id>
        <text>linkCatalog
            void Catalog::linkCatalog(Catalog dstCatalog, INode srcAttribute[, INode
            dstAttribute])
            Links catalog to another using source and destination attributes. The dstAttribute is
            optional
        </text>
    </object>
    <object>
        <id>284</id>
        <text>loadCatalog
            void Catalog/CategoryTree::loadCatalog(String docStorePathForFileToLoad,
            Spec fileSpec, SpecMap specMap, String feedType [itm|icm|ctr])
            (Deprecated) This script operation has been deprecated and should not be used, and
            is scheduled to be removed. Use createImport() and startAggregationByName()
            instead. Loads data from the specified File Spec and Spec Map, into the catalog or
            category tree upon which this operation is called. The feedType must be "itm" for item
            to catalog feeds, "ctr" for category to category tree feeds, and "icm" for item to
            category mapping feeds. WARNING: Transactional disruption will occur: This script
            operation will rollback any existing transaction, undoing prior operations, and will
            leave the database connection in autocommit mode. This script operation should be
            used with caution - it should not be called in a catchError block for example.
        </text>
    </object>
    <object>
        <id>285</id>
        <text>new$BasicSelection
            new BasicSelection(Catalog catalog, String name)
            Returns an empty basic selection (Selection) on catalog
        </text>
    </object>
    <object>
        <id>286</id>
        <text>new$Catalog
            new Catalog(Spec catalogSpec, String name, CategoryTree categoryTree
            [,Hashmap optionalArgs])
            Returns a new catalog with the given spec and name. Pass optional args in the map
            with these keys "displayAttribute" (path of node), "accessControlGroup" (pass the
            ACG object), "isLookupTable" (default is false--set to true to create a lookup table
            and the Default Lookup Table Hierarchy is used as the category tree). If the
            displayAttribute is not set, the pk attribute is used.
        </text>
    </object>
    <object>
        <id>287</id>
        <text>new$DynamicSelection
            new DynamicSelection(String selectionName, String queryString)
            Returns a dynamic selection named selectionName and corresponding to the query
            queryString
        </text>
    </object>
    <object>
        <id>288</id>
        <text>new$LookupTable
            new LookupTable(Spec spec, String name)
            Returns a new lookuptable with the given spec and name
        </text>
    </object>
    <object>
        <id>289</id>
        <text>removeLocationSpecificData
            void Catalog::removeLocationSpecificData(CategoryTree ctr)
        </text>
    </object>
    <object>
        <id>290</id>
        <text>Sets up location specific data for a catalog. CTR is the category tree that contains the
            locations.
        </text>
    </object>
    <object>
        <id>291</id>
        <text>resetContainerLocalesForRole
            void Container::resetContainerLocalesForRole(Role role)
            Deletes the locales that are allowed for this container specifically for the particular
            role. After this the default list of locales for this role will be applicable.
        </text>
    </object>
    <object>
        <id>292</id>
        <text>saveCatalog
            void Catalog::saveCatalog()
            Saves this catalog. This is used to save new attributes that have been set on the
            catalog.
        </text>
    </object>
    <object>
        <id>293</id>
        <text>saveSelection
            void Selection::saveSelection()
            Save the basic or advanced selection to the database
        </text>
    </object>
    <object>
        <id>294</id>
        <text>setAttributeGroupsToProcess
            void Container::setAttributeGroupsToProcess(AttrGroup[] aAttrGroups)
            Only retrieve attributes that belong to one of the attribute collections specified in the
            list aAttrGroups for the given container
        </text>
    </object>
    <object>
        <id>295</id>
        <text>setCatalogAccessControlGroupName
            void Catalog::setCatalogAccessControlGroupName(String acgName)
            Sets the Access Control Group to the given name for this catalog.
        </text>
    </object>
    <object>
        <id>296</id>
        <text>setContainerAttribute
            void Container::setContainerAttribute(String sAttribName, String[]
            sAttribValues)
            Sets the value for the container attribute with sAttribName to the array of values
        </text>
    </object>
    <object>
        <id>297</id>
        <text>setContainerLocalesForRole
            void Container::setContainerLocalesForRole(Role role, String
            localesCSVString)
            Sets the locales that are allowed for this container for the particular role
        </text>
    </object>
    <object>
        <id>298</id>
        <text>setContainerProperties
            void Container::setContainerProperties(HashMap properties)
            The properties specified in the PROPERTIES hashmap are set for the container in
            question. The hashmap keys can be one of "PRE_SCRIPT_NAME",
            "POST_SCRIPT_NAME", "POST_SAVE_SCRIPT_NAME",
            "ENTRY_BUILD_SCRIPT", "DISPLAY_ATTRIBUTE",
            "USER_DEFINED_CORE_ATTRIBUTE_GROUP", "SCRIPT_RESTRICT_LOCALES"
            or "SCRIPT_NAME"(Deprecated). The values are required to be string names. The
            value for "SCRIPT_RESTRICT_LOCALES" must be "true" or "false". Enforcement of
            locale restrictions on script operations is based on the value of
            "SCRIPT_RESTRICT_LOCALES". "SCRIPT_NAME" is now deprecated and
            "POST_SCRIPT_NAME" should be used in its place.
        </text>
    </object>
    <object>
        <id>299</id>
        <text>setDynamicSelectionQueryString
            void DynamicSelection::setDynamicSelectionQueryString(String queryString)
            Sets the query string for this dynamic selection
        </text>
    </object>
    <object>
        <id>300</id>
        <text>setItemSetFetchLinkedItems
            void ItemSet::setItemSetFetchLinkedItems(Boolean b)
            Sets the item set to fetch or not fetch master linked items
        </text>
    </object>
    <object>
        <id>301</id>
        <text>setItemSetFetchSize
            void ItemSet::setItemSetFetchSize(Integer i)
        </text>
    </object>
    <object>
        <id>302</id>
        <text>Sets the item set fetch size (i.e. the number of items gotten in bulk each time)
        </text>
    </object>
    <object>
        <id>303</id>
        <text>setOrdered
            Boolean Catalog::setOrdered(Boolean bOrder)
            Alters the catalog to allow ordering or not. Returns a flag on whether the update is
            successful or not.
        </text>
    </object>
    <object>
        <id>304</id>
        <text>setSelectionAccessControlGroupName
            void Selection::setSelectionAccessControlGroupName(String acgName)
            Sets the Access Control Group to the given name for this selection.
        </text>
    </object>
    <object>
        <id>305</id>
        <text>setSelectionHierarchy
            void Selection::setSelectionHierarchy(Hierarchy hier)
            Sets the selection's hierarchy. Only applicable to basic selections
        </text>
    </object>
    <object>
        <id>306</id>
        <text>setSelectionName
            void Selection::setSelectionName(String name)
            Returns the name of this selection
        </text>
    </object>
    <object>
        <id>307</id>
        <text>setSequenceValueForMigration
            void setSequenceValueForMigration(String sequenceName, String objName,
            String objType, Integer newValue)
            This operation is only there for migration of environments. Do not use for any other
            purpose.
        </text>
    </object>
    <object>
        <id>308</id>
        <text>sortItemSet
            void ItemSet::sortItemSet()
            Sorts the ItemSet for performance
        </text>
    </object>
    <object>
        <id>309</id>
        <text>operations_category
        </text>
    </object>
    <object>
        <id>310</id>
        <text>addCategoryTreeMapping
            void CategoryTreeMap::addCategoryTreeMapping(Category cat1, Category
            cat2)
            Add a map between the two categories cat1 and cat2
        </text>
    </object>
    <object>
        <id>311</id>
        <text>addChildCategory
            Boolean Category::addChildCategory(Category childCategory)
            Adds childCategory as a child of this category
        </text>
    </object>
    <object>
        <id>312</id>
        <text>addItemSecondarySpecToCategory
            void Category::addItemSecondarySpecToCategory(String sSpecName,
            [Catalog[] ctgs])
            Associates a secondary item spec to this Category - if ctgs are passed, only those
            catalogs are affected by the spec.
        </text>
    </object>
    <object>
        <id>313</id>
        <text>addSecondarySpecToCategory
            void Category::addSecondarySpecToCategory(String sSpecName, [Boolean
            bAdd])
            Associates a secondary spec defining this categories attrs. The optional parameters
            allows for the Spec to be associated with the category but does not build out the
            EntryNode structure, useful to improve performance on imports
        </text>
    </object>
    <object>
        <id>314</id>
        <text>buildCategory
            Category CategoryTree::buildCategory(String path, [String delimiter], [String
            primaryKey])
            Returns a new category object when given the complete path of the new category
            and the delimiter that separates the categories in the path. If the delimiter is not
        </text>
    </object>
    <object>
        <id>315</id>
        <text>specified, it defaults to '/' (except if a filespec is used during an import). If the primary
            key is not specified, then it should either be automatically set via a sequence or value
            rule, or it should be set after creation. If used in workflows and the category path
            already exists in the source category tree, the category will be checked out.
        </text>
    </object>
    <object>
        <id>316</id>
        <text>deleteCategory
            Boolean Category::deleteCategory()
            Deletes this category from it's category tree
        </text>
    </object>
    <object>
        <id>317</id>
        <text>deleteCategoryTree
            ValidationError[] deleteCategoryTree(CategoryTree ctr)
            Delete the category tree ctr. Returns Validation Error array if any validation errors
            occured. Null if successful. WARNING: Transactional disruption will occur: This script
            operation will roll back any existing transaction, and will leave the database
            connection in auto-commit. This script operation should be used carefully; for
            example, it should not be called in a catchError block.
        </text>
    </object>
    <object>
        <id>318</id>
        <text>forEachCategorySetElement
            forEachCategorySetElement(CategorySet categorySet, Object oCategory) {
            statements }
            Executes the statements for each (oCategory) in the categorySet
        </text>
    </object>
    <object>
        <id>319</id>
        <text>getCategoryAttrib
            Object Category::getCategoryAttrib(String sAttribPath)
            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
            category
        </text>
    </object>
    <object>
        <id>320</id>
        <text>getCategoryByPath
            Category CategoryTree::getCategoryByPath (String sNamePath, String sDelim
            [, boolean bLight, boolean bReadOnly])
            Returns the category with a full name path equivalent to sNamePath. sNamePath is
            expected to be delimited by sDelim. sNamePath should not contain the name of the
            root category, since we are already restricted to a spcific category tree. If bLight is
            true, not all data for the category is retrieved. If bReadOnly is true, a read only copy
            of the category is retrieved - bReadOnly should be used in exports, for example
        </text>
    </object>
    <object>
        <id>321</id>
        <text>getCategoryByPathNoCfp
            Category CategoryTree::getCategoryByPathNoCfp (String sNamePath, String
            sDelim [, boolean bLight, boolean bReadOnly])
            Returns the category with a full name path equivalent to sNamePath. sNamePath is
            expected to be delimited by sDelim. sNamePath should not contain the name of the
            root category, since we are already restricted to a spcific category tree. If bLight is
            true, not all data for the category is retrieved. If bReadOnly is true, a read only copy
            of the category is retrieved - bReadOnly should be used in exports, for example
        </text>
    </object>
    <object>
        <id>322</id>
        <text>getCategoryCache
            CategoryCache CategoryTree::getCategoryCache(Integer size, Boolean
            get_all_categories)
            Returns a CategoryCache for this CategoryTree. The cache will be empty if
            get_all_categories is false and the size will be the given size, or 100, whichever is the
            greater. If get_all_categories is true then the cache will contain all the categories for
            the given category tree and the size arguments will be ignored. The size of the cache
            in the latter case will be the greater of the number of categories in the tree or 100
        </text>
    </object>
    <object>
        <id>323</id>
        <text>getCategoryChildren
            Category[] Category::getCategoryChildren([Boolean ordered, Catalog catalog,
            Boolean restrictToSubtreeWithItems])
            Returns the categories immediately below this category. The option Boolean 'ordered'
            being set to true makes the operation return the ordered children of this category if
        </text>
    </object>
    <object>
        <id>324</id>
        <text>the catalog (if not specified, the default catalog) is set up to use ordering. The option
            restrictToSubtreeWithItems being set to true only returns categories that have items
            in their sub-trees
        </text>
    </object>
    <object>
        <id>325</id>
        <text>getCategoryChildrenUsingCache
            Category[] Category::getCategoryChildrenUsingCache (CategoryCache
            cat_cache)
            Returns this category's children, possibly making use of the cache provided
        </text>
    </object>
    <object>
        <id>326</id>
        <text>getCategoryCode
            String Category::getCategoryCode()
            Returns the code of this category.
        </text>
    </object>
    <object>
        <id>327</id>
        <text>getCategoryHasChildren
            Boolean Category::getCategoryHasChildren()
            Returns true if the category has children.
        </text>
    </object>
    <object>
        <id>328</id>
        <text>getCategoryLevels
            Integer[] Category::getCategoryLevels()
            Returns the levels of this category in an array of Integers.
        </text>
    </object>
    <object>
        <id>329</id>
        <text>getCategoryOrganizations
            Organization[] Category::getCategoryOrganizations()
            Return the all organizations this category is mapped to,
        </text>
    </object>
    <object>
        <id>330</id>
        <text>getCategoryParent
            Category Category::getCategoryParent ([CategoryCache cat_cache])
            Returns this category's parent. If there are multiple parents, only the first one is
            returned.
        </text>
    </object>
    <object>
        <id>331</id>
        <text>getCategoryParents
            Category[] Category::getCategoryParents ()
            Returns the parent categories of this Category
        </text>
    </object>
    <object>
        <id>332</id>
        <text>getCategoryParentsUsingCache
            Category[] Category::getCategoryParentsUsingCache (CategoryCache
            cat_cache)
            Returns this category's parents, possibly making use of the cache provided
        </text>
    </object>
    <object>
        <id>333</id>
        <text>getCategorySet
            CategorySet CategoryTree::getCategorySet([Boolean bReadonly])
            Returns a CategorySet for this CategoryTree.
        </text>
    </object>
    <object>
        <id>334</id>
        <text>getCategorySetByAttributeValue
            CategorySet CategoryTree::getCategorySetByAttributeValue(String attribPath,
            Object attribValue, [Boolean bReadOnly])
            Returns a CategorySet with all categories in the category tree which have the given
            AttribPath and AttribValue. Use "" or null AttribValue for searching EMPTY values. An
            exception is thrown if the attribPath is for non indexed attribute.
        </text>
    </object>
    <object>
        <id>335</id>
        <text>getCategorySetByFullNamePath
            CategorySet CategoryTree::getCategorySetByFullNamePath(String[]
            fullNamePaths, String delimiter )
            Returns an CategorySet of the categories in the category tree from the given full
            name paths. Do not include the category tree name in the full name paths
        </text>
    </object>
    <object>
        <id>336</id>
        <text>getCategorySetByItemSecondarySpec
            CategorySet CategoryTree::getCategorySetByItemSecondarySpec(String
            specName)
        </text>
    </object>
    <object>
        <id>337</id>
        <text>Returns an CategorySet that is a subset of the categories of this tree having the
            specified spec in their item secondary spec list
        </text>
    </object>
    <object>
        <id>338</id>
        <text>getCategorySetByLevel
            CategorySet CategoryTree::getCategorySetByLevel(Integer level, [Boolean
            bReadOnly])
            Returns an CategorySet of the categories in the category tree at a particular level
        </text>
    </object>
    <object>
        <id>339</id>
        <text>getCategorySetByPrimaryKey
            CategorySet CategoryTree::getCategorySetByPrimaryKey(String primaryKey,
            [Boolean bReadOnly])
            Returns a CategorySet with the categories in the category tree which have match the
            primary key
        </text>
    </object>
    <object>
        <id>340</id>
        <text>getCategorySetByStandAloneSpec
            CategorySet CategoryTree::getCategorySetByStandAloneSpec(String
            specName)
            Returns an CategorySet that is a subset of the categories of this tree having the
            specified spec in their stand alone spec list
        </text>
    </object>
    <object>
        <id>341</id>
        <text>getCategorySetSize
            Integer CategorySet::getCategorySetSize()
            Returns the number of categories in a category set
        </text>
    </object>
    <object>
        <id>342</id>
        <text>getCategoryTree
            CategoryTree Category::getCategoryTree()
            Returns the category tree object this category belongs to. Use
            getCategoryTreeByName() to get the category tree being used for an
            aggregation/syndication.
        </text>
    </object>
    <object>
        <id>343</id>
        <text>getCategoryTreeByName
            CategoryTree getCategoryTreeByName([String name])
            Returns the category tree object with the corresponding name. If name is not
            provided, return the category tree being used for the aggregation/syndication.
        </text>
    </object>
    <object>
        <id>344</id>
        <text>getCategoryTreeMap
            CategoryTreeMap getCategoryTreeMap(CategoryTree ctr1, CategoryTree ctr2)
            Returns the category tree map between the two category trees ctr1 and ctr2
        </text>
    </object>
    <object>
        <id>345</id>
        <text>getCategoryTreeName
            String CategoryTree::getCategoryTreeName()
            Returns the name of this categoryTree.
        </text>
    </object>
    <object>
        <id>346</id>
        <text>getCategoryTreeNamesList
            String[] getCategoryTreeNamesList([String filterByPrivilege])
            Return the list of names of available category trees filtered by category tree privileges
            LIST (list category tree), VIEW_ITEMS (view items in category tree),
            MODIFY_CATEGORY_ATTRIBUTES (modify category attributes in category tree).
            By default the category tree names for the category tree with LIST privilege access
            are returned.
        </text>
    </object>
    <object>
        <id>347</id>
        <text>getCategoryTreeSpec
            Spec CategoryTree::getCategoryTreeSpec()
            Returns the spec of this category tree
        </text>
    </object>
    <object>
        <id>348</id>
        <text>getCurrentLocation
            ICategory getCurrentLocation()
            Returns the category that identifies the current location if the script is running the
            context of a location
        </text>
    </object>
    <object>
        <id>349</id>
        <text>getDefaultCategoryTreeName
            (deprecated) String getDefaultCategoryTreeName()
            See getCategoryTreeByName(). Returns the name of the category tree being used
            for an aggregation/syndication. Use getCategoryTreeByName() to get the category
            tree being used for the aggregation/syndication.
        </text>
    </object>
    <object>
        <id>350</id>
        <text>getDescendentCategorySetForCategory
            CategorySet Category::getDescendentCategorySetForCategory([Boolean
            bReadonly])
            Returns a CategorySet consisting of all the descendents of this category
        </text>
    </object>
    <object>
        <id>351</id>
        <text>getEntryPosition
            Integer Category::getEntryPosition(Catalog ctg, Entry child)
            Allows users to get the position of a child Entry within a parent category. This will only
            work in an ordered catalog. Returns the position (if it works) or null (if it fails).
        </text>
    </object>
    <object>
        <id>352</id>
        <text>getFullPaths
            String[] Category::getFullPaths ([String sDelimiter], [boolean bWithRootName])
            Returns the full name paths of this Category, using the sDelimiter as the delimiter if
            provided. The full path returned includes the root categories name if bWithRootName
            is true.
        </text>
    </object>
    <object>
        <id>353</id>
        <text>getHierarchyType
            String Hierarchy::getHierarchyType()
            Returns the type of the hierarchy. Types can be one of the following:
            CATEGORY_TREE, ORGANIZATION_TREE, COLLABORATION_AREA
        </text>
    </object>
    <object>
        <id>354</id>
        <text>getItemSecondarySpecsForCategory
            Spec[] Category::getItemSecondarySpecsForCategory([Catalog ctg])
            Returns the item secondary specs associated with this category
        </text>
    </object>
    <object>
        <id>355</id>
        <text>getMappedCategories
            Category[] Category::getMappedCategories(CategoryTree ctr)
            Returns the categories in ctr (if any) to which this category is mapped
        </text>
    </object>
    <object>
        <id>356</id>
        <text>getPathValue
            String Category::getPathValue()
            Returns the path attribute value of this category. Note, this is not the full path.
        </text>
    </object>
    <object>
        <id>357</id>
        <text>getSecondarySpecsForCategory
            Spec[] Category::getSecondarySpecsForCategory()
            Returns the secondary specs defining this categories attrs
        </text>
    </object>
    <object>
        <id>358</id>
        <text>mapCategoryToOrganizations
            void Category::mapCategoryToOrganizations(Category[] categories [, boolean
            bAdd])
            Maps the category to all the organizations provided. If bAdd is true, the old mappings
            are added to otherwise they are overwritten to be the new set of organizations
        </text>
    </object>
    <object>
        <id>359</id>
        <text>new$Category
            new Category(CategoryTree ctr, String path, [String delimiter], [String
            primaryKey]
            Returns a new category object when given the complete path of the new category
            and the delimiter that separates the categories in the path. If the delimiter is not
            specified, it defaults to '/' (except if a filespec is used during an import). If the primary
            key is not specified, then it should either be automatically set via a sequence or value
            rule, or it should be set after creation. If used in workflows and the category path
            already exists in the source category tree, the category will be checked out.
        </text>
    </object>
    <object>
        <id>360</id>
        <text>new$CategoryTree
            new CategoryTree(Spec spec, String name [,HashMap optionalArgs]])
            Returns a new category tree with the given primary spec and name. Pass optional
            args in the map with these keys "useInheritance" (default is false), "displayAttribute"
            (Node object), "pathAttribute" (Node object), "accessControlGroup" (pass the ACG
            object), "isOrganizationTree" (default is false--set to true to create an organization
            tree). If the pathAttribute is not set, the primary key will be used. If the displayAttribute
            is not set, the pathAttribute is used.
        </text>
    </object>
    <object>
        <id>361</id>
        <text>removeCategoryTreeMapping
            void CategoryTreeMap::removeCategoryTreeMapping(Category cat1, Category
            cat2)
            Remove a map between the two categories cat1 and cat2
        </text>
    </object>
    <object>
        <id>362</id>
        <text>removeChildCategory
            void Category::removeChildCategory(String categoryName)
            Remove childCategory from this categorie's children. Only allowed if childCategory
            has at least another parent.
        </text>
    </object>
    <object>
        <id>363</id>
        <text>removeItemSecondarySpecFromCategory
            void Category::removeItemSecondarySpecFromCategory(String sSpecName))
            Disassociates a secondary item spec to from this Category.
        </text>
    </object>
    <object>
        <id>364</id>
        <text>removeSecondarySpecFromCategory
            void Category::removeSecondarySpecFromCategory(String sSpecName))
            Disassociates a secondary spec defining this categories attrs.
        </text>
    </object>
    <object>
        <id>365</id>
        <text>reorderEntry
            Integer Category::reorderEntry(Catalog ctg, Entry child, Integer position [,
            Boolean bInsertBefore])
            Allows users to adjust the ordering of a child Entry within a parent category in catalog
            ctg. Entry child is moved before (bInsertBefore=true) or after (bInsertBefore=false)
            the position (zero is the first element) specified. Returns the ordered entry id (if it
            works) or null (if it fails). This method should not be used in conjunction with a
            transaction. The Boolean flag is optional and if not specified defaults to true.
        </text>
    </object>
    <object>
        <id>366</id>
        <text>saveCategoryTree
            ValidationError[] CategoryTree::saveCategoryTree ()
            Saves this category tree. DO NOT USE in AGGREGATION if you are in a
            item-to-category feed or a category tree feed. The category tree you are aggregating
            to gets saved automatically at the end of an aggregation. However, if you side affect
            another category tree, then call this operation to capture the changes you made.
            Returns Validation Error array if any validation errors occured. Null if successful
        </text>
    </object>
    <object>
        <id>367</id>
        <text>saveCategoryTreeMap
            void CategoryTreeMap::saveCategoryTreeMap()
            Save this category tree map
        </text>
    </object>
    <object>
        <id>368</id>
        <text>setCategoryAttrib
            void Category::setCategoryAttrib(String sAttribPath, Object sValue)
            Sets the attribute sAttribPath (spec_name/attribute_name) of this category to sValue
        </text>
    </object>
    <object>
        <id>369</id>
        <text>setCategoryCacheFetchSize
            void CategoryCache::setCategoryCacheFetchSize(Integer i)
            Sets the category cache fetch size (i.e. the number of categories gotten in bulk each
            time). This is only applicable if the category cache is associated with an ItemSet.
        </text>
    </object>
    <object>
        <id>370</id>
        <text>operations_col_area
        </text>
    </object>
    <object>
        <id>371</id>
        <text>addEntryIntoColArea
            boolean CollaborationArea::addEntryIntoColArea(Entry entry, String stepPath )
            Used for importing new items into a collaboration area. This script operation will post
            a message to add the newly constructed entry to the given stepPath of the
            collaboration area. Returns a boolean. If the entry exists in the collaboration area or
            the source catalog, false will be returned. True indicates the message was
            successfully posted. The import will occur after the current transaction is committed.
            This operation returns false if the entry is a category.
        </text>
    </object>
    <object>
        <id>372</id>
        <text>checkOutEntries
            HashMap CollaborationArea::checkOutEntries(EntrySet entrySet, [String
            stepPath], [boolean waitForStatus)
            Checks out the entries in the entrySet into the collaboration area. If stepPath is not
            specified the entries will be checked-out into the Initial step. If waitForStatus is true,
            the checkout will take place immediately and the statuses will be returned. Otherwise
            the checkout will not take place immediately, instead a message will be posted to
            perform the operation after the current transaction is committed. Returns a HashMap
            of entry primary key to the status of the checkout (or null if waitforStatus is false).
            Checkout status could be one of the following: CHECKOUT_SUCCESSFUL,
            CHECKOUT_FAILED, ALREADY_CHECKED_OUT, ENTRY_LOCKED and
            ATTRIBUTE_LOCKED. ATTRIBUTE_LOCKED indicates one or more attributes
            required for that collaboration area are checked out to another collaboration area.
            waitForStatus is false by default.
        </text>
    </object>
    <object>
        <id>373</id>
        <text>checkOutEntry
            HashMap CollaborationArea::checkOutEntry(Entry entry, [String stepPath],
            [boolean waitForStatus)
            Checks out the entry into the collaboration area. If stepPath is not specified the entry
            will be checked-out into the Initial step. If waitForStatus is true, the checkout will take
            place immediately and the status will be returned. Otherwise the checkout will not
            take place immediately, instead a message will be posted to perform the operation
            after the current transaction is committed. Returns a HashMap of entry primary key to
            the status of the checkout (or null if waitforStatus is false). Checkout status could be
            one of the following: CHECKOUT_SUCCESSFUL, CHECKOUT_FAILED,
            ALREADY_CHECKED_OUT, ENTRY_LOCKED and ATTRIBUTE_LOCKED.
            ATTRIBUTE_LOCKED indicates one or more attributes required for that collaboration
            area are checked out to another collaboration area. waitForStatus is false by default.
        </text>
    </object>
    <object>
        <id>374</id>
        <text>dropEntries
            void CollaborationArea::dropEntries(EntrySet entrySet)
            Posts a message to drop the entries in the entrySet from the collaboration area and
            to unlock the attributes which were locked in the source container for those entries.
            The drop will not take place until after the current transaction has committed.
        </text>
    </object>
    <object>
        <id>375</id>
        <text>dropEntry
            void CollaborationArea::dropEntry(Entry entry)
            Posts a message to drop the entry from the collaboration area and to unlock the
            attributes which were locked in the source container for that entry. The drop will not
            take place until after the current transaction has committed.
        </text>
    </object>
    <object>
        <id>376</id>
        <text>getColAreaAdminRoles
            String[] CollaborationArea::getColAreaAdminRoles()
            Returns the admin role names for the collaboration area.
        </text>
    </object>
    <object>
        <id>377</id>
        <text>getColAreaAdminUsers
            String[] CollaborationArea::getColAreaAdminUsers()
            Returns the admin user names for the collaboration area.
        </text>
    </object>
    <object>
        <id>378</id>
        <text>getColAreaByName
            CollaborationArea getColAreaByName(String colAreaName)
            Return a collaboration area object if exists otherwise null.
        </text>
    </object>
    <object>
        <id>379</id>
        <text>getColAreaContainer
            Container CollaborationArea::getColAreaContainer()
            Returns the collaboration area as a container.
        </text>
    </object>
    <object>
        <id>380</id>
        <text>getColAreaEntryHistory
            ColAreaEntryHistory[] getColAreaEntryHistory(String colAreaName, String
            wflName, String primaryKey)
            Return the entire history of the entry in the given collaboration area.
        </text>
    </object>
    <object>
        <id>381</id>
        <text>getColAreaHistoryByTimePeriod
            ColAreaEntryHistory[] getColAreaHistoryByTimePeriod(String colAreaName,
            Date beginDate, Date endDate)
            Return the entire history given collaboration area for the given time period.
        </text>
    </object>
    <object>
        <id>382</id>
        <text>getColAreaHistoryDate
            Date ColAreaEntryHistory::getColAreaHistoryDate()
            Returns the date for the given collaboration area history event.
        </text>
    </object>
    <object>
        <id>383</id>
        <text>getColAreaHistoryEntryKey
            String ColAreaEntryHistory::getColAreaHistoryEntryKey()
            Returns the entry key for the given collaboration area history event.
        </text>
    </object>
    <object>
        <id>384</id>
        <text>getColAreaHistoryEventAttribute
            String ColAreaEntryHistory::getColAreaHistoryEventAttribute(String attrName)
            Returns the attribute value for the given collaboration area history event type attribute
            name. attrName could be one of the following: COMMENT, EXIT_VALUE,
            ENTRY_DIFFERENCES
        </text>
    </object>
    <object>
        <id>385</id>
        <text>getColAreaHistoryEventType
            String ColAreaEntryHistory::getColAreaHistoryEventType()
            Returns the event type for the given collaboration area history event. Event types
            could be one of the following: CHECKOUT, CHECKIN, BEGINSTEP, ENDSTEP,
            SAVEENTRY, DROP, TIMEOUT.
        </text>
    </object>
    <object>
        <id>386</id>
        <text>getColAreaHistoryStepPath
            String ColAreaEntryHistory::getColAreaHistoryStepPath()
            Returns the step path for the given collaboration area history event.
        </text>
    </object>
    <object>
        <id>387</id>
        <text>getColAreaHistoryUser
            String ColAreaEntryHistory::getColAreaHistoryUser()
            Returns the username for the given collaboration area history event.
        </text>
    </object>
    <object>
        <id>388</id>
        <text>getColAreaHistoryWorkflow
            String ColAreaEntryHistory::getColAreaHistoryWorkflow()
            Returns the workflow name for the given collaboration area history event.
        </text>
    </object>
    <object>
        <id>389</id>
        <text>getColAreaId
            int CollaborationArea::getColAreaId()
            Returns the internal Id for the Collaboration Area.
        </text>
    </object>
    <object>
        <id>390</id>
        <text>getColAreaName
            String CollaborationArea::getColAreaName()
            Returns the name of the collaboration area.
        </text>
    </object>
    <object>
        <id>391</id>
        <text>getColAreaNames
            String[] getColAreaNames()
            Returns all of the Collaboration Area Names for the current Company
        </text>
    </object>
    <object>
        <id>392</id>
        <text>getColAreaNamesForRole
            String[] getColAreaNamesForRole(String role_name)
            Returns a list of collaboration area names that are applicable to a particular role.
        </text>
    </object>
    <object>
        <id>393</id>
        <text>getColAreaNamesForUser
            String[] getColAreaNamesForUser()
            Returns a list of collaboration area names that are applicable to the user.
        </text>
    </object>
    <object>
        <id>394</id>
        <text>getColAreaSrcContainer
            Container CollaborationArea::getColAreaSrcContainer()
            Returns the source container which this collaboration area is tied to.
        </text>
    </object>
    <object>
        <id>395</id>
        <text>getColAreaStepHistory
            ColAreaEntryHistory[] getColAreaStepHistory(String colAreaName, String
            wflName, String stepPath)
            Return the entire history of the step in the given collaboration area.
        </text>
    </object>
    <object>
        <id>396</id>
        <text>getColAreaWorkflow
            Workflow CollaborationArea::getColAreaWorkflow()
            Returns the workflow which this collaboration area is tied to.
        </text>
    </object>
    <object>
        <id>397</id>
        <text>getCountOfEntriesInColArea
            int CollaborationArea::getCountOfEntriesInColArea()
            Returns the entries currently in ALL the steps of the collaboration area.
        </text>
    </object>
    <object>
        <id>398</id>
        <text>getCountOfEntriesInColAreaStep
            int CollaborationArea::getCountOfEntriesInColAreaStep(String stepPath)
            Returns the entries currently in the given stepPath of the collaboration area.
        </text>
    </object>
    <object>
        <id>399</id>
        <text>getEntries
            EntrySet CollaborationArea::getEntries()
            Returns the entry set for the entries currently in the collaboration area.
        </text>
    </object>
    <object>
        <id>400</id>
        <text>getEntriesInfoXMLInStep
            String CollaborationArea::getEntriesInfoXMLInStep(String stepName,HashMap
            itemSet, HashMap hmAttrPaths[, int entriesCount,String dateFormat])
            Returns xml representation of workflow step entries for the given step name. The
            dateFormat is used for formating the date values. The attribute information of
            attributes present in the hmAttrPaths are included in the xml.
        </text>
    </object>
    <object>
        <id>401</id>
        <text>getEntriesInStep
            EntrySet CollaborationArea::getEntriesInStep(String stepPath)
            Returns the entry set for the entries currently in the step of the collaboration area.
            The format of the stepPath is Stepname
        </text>
    </object>
    <object>
        <id>402</id>
        <text>getEntryInStep
            Entry CollaborationArea::getEntryInStep(String stepPath)
            Returns one entry that is currently in the step of the collaboration area, if there is at
            least one. If there is more than one entry currently in the step, then it is undetermined
            which particular one will be returned by a call to this operation. The format of the
            stepPath is Stepname
        </text>
    </object>
    <object>
        <id>403</id>
        <text>getItemsInStepByAttribute
            HashMap CollaborationArea::getItemsInStepByAttribute(String
            stepName,String searchAttributePath,String searchAttrValue,String
        </text>
    </object>
    <object>
        <id>404</id>
        <text>sSortColumn[,boolean isAscending,int startIndex, int endIndex,String
            categoryPKList])
            Returns a HashMap of items for the current pagination with the key ITEMSET and
            total no of matched items with the key ITEMCOUNT. By default isAscending is taken
            as true. startIndex as 0 and endIndex as total number of resultant items.
            categoryPKList is optional argument having comma separated list of category primary
            key for example :'1','3','7' . It is used for filtering items
        </text>
    </object>
    <object>
        <id>405</id>
        <text>getItemsInStepBySelection
            HashMap CollaborationArea::getItemsInStepBySelection(String
            stepName,String selectionString,String sSortColumn[,boolean isAscending,int
            startIndex, int endIndex])
            Returns a HashMap of items for the current pagination with the key ITEMSET and
            total no of matched items with the key ITEMCOUNT. By default isAscending is taken
            as true. startIndex as 0 and endIndex as total number of resultant items.
        </text>
    </object>
    <object>
        <id>406</id>
        <text>getItemSubset
            ItemSet CollaborationArea::getSubset(IItemSet items, Integer start_point [,
            Integer end_point])
            Returns an IItemSet which is a subset cloned from the supplied IItemSet restrained
            by start and optional end index positions. A start point of -1 is interpreted as 0. If the
            end index is omitted, all items are retrieved from the start point.
        </text>
    </object>
    <object>
        <id>407</id>
        <text>getReservedEntriesInStep
            EntrySet CollaborationArea::getReservedEntriesInStep(String stepPath)
            Returns the entry set for the reserved entries currently in the step of the collaboration
            area. The format of the stepPath is Stepname
        </text>
    </object>
    <object>
        <id>408</id>
        <text>getStepEntryTimeout
            Date CollaborationArea::getStepEntryTimeout(Entry entry, String stepPath)
            Expects the given entry to actually be in the given collaboration area's specified
            stepPath. If the entry's really there, the script op returns the moment in time when it
            will time out. If any of the assumptions are not met (collaboration area has no such
            stepPath, entry not in that stepPath, etc.), the operation simply does nothing, i.e. no
            Exception thrown. The operation doesn't modify the collaboration area's underlying
            workflow at all. It should be thought of as operating on an entry in a collaboration
            area, that is expected to be in a particular stepPath at the moment in time when the
            op is executed.
        </text>
    </object>
    <object>
        <id>409</id>
        <text>getStepsForEntry
            String[] CollaborationArea::getStepsForEntry(Entry entry)
            Returns all the steps that the entry is currently in for the given collaboration area. The
            return values is a string array containing the stepPaths. Entry should be retrieved
            using Collaboration Area as Container.
        </text>
    </object>
    <object>
        <id>410</id>
        <text>getUsernameForReservedEntryInStep
            String CollaborationArea::getUsernameForReservedEntryInStep(Entry entry,
            String stepPath)
            Returns the username of the user who locked the entry in a wfl step for a given
            collaboration area, otherwise it returns null.
        </text>
    </object>
    <object>
        <id>411</id>
        <text>getWflStepsForRole
            String[][] CollaborationArea::getWflStepsForRole(String roleName)
            Returns workflow step paths along with the number of entries in it for which the role
            has access.
        </text>
    </object>
    <object>
        <id>412</id>
        <text>getWflStepsForUser
            String[][] CollaborationArea::getWflStepsForUser()
            Returns workflow step paths along with the number of entries in it for which the user
        </text>
    </object>
    <object>
        <id>413</id>
        <text>has access.
        </text>
    </object>
    <object>
        <id>414</id>
        <text>getWflStepsXML
            String CollaborationArea::getWflStepsXML([String roleName])
            Returns xml representation of workflow steps accessible by the given role name. if
            role name is not provided the xml representation of workflow steps accessible by the
            current user is returned.
        </text>
    </object>
    <object>
        <id>415</id>
        <text>getWflStepsXMLByAttrValue
            String CollaborationArea::getWflStepsXMLByAttrValue(String attrPath, String
            attrValue[, String roleName])
            Returns xml representation of workflow steps accessible by the given role name. if
            role name is not provided the xml representation of workflow steps accessible by the
            current user is returned.
        </text>
    </object>
    <object>
        <id>416</id>
        <text>isColAreaLocked
            Boolean CollaborationArea::isColAreaLocked()
            Returns true if the collaboration area is locked, otherwise it returns false.
        </text>
    </object>
    <object>
        <id>417</id>
        <text>isEntryReserved
            Boolean CollaborationArea::isEntryReserved(IEntry entry)
            Returns true if the entry is reserved in a given collaboration area, otherwise it returns
            false.
        </text>
    </object>
    <object>
        <id>418</id>
        <text>isEntryReservedInStep
            Boolean CollaborationArea::isEntryReservedInStep(IEntry entry, String
            stepPath)
            Returns true if the entry is reserved in a wfl step for a given collaboration area,
            otherwise it returns false.
        </text>
    </object>
    <object>
        <id>419</id>
        <text>lockColArea
            Boolean CollaborationArea::lockColArea()
            Locks the Collaboration Area so that no more entries can be checked out into it.
            Returns true or false depending on whether the lock was successfully applied or not.
        </text>
    </object>
    <object>
        <id>420</id>
        <text>moveEntriesToColArea
            boolean CollaborationArea::moveEntriesToColArea(EntrySet entrySet, String
            destColAreaName)
            Applies to items only. Moves the entrySet of entries in the collaboration area to
            another collaboration area. destColAreaName specifies the name of the destination
            collaboration area, into whose Initial step the entries will be checked into. This
            operation is asynchronous which means a message is posted to complete the move
            at some time after the current transaction is committed. Returns a boolean depending
            on whether the message to move the entry was successfully posted. Returns false if
            any of the entries are categories.
        </text>
    </object>
    <object>
        <id>421</id>
        <text>moveEntriesToNextStep
            HashMap CollaborationArea::moveEntriesToNextStep(EntrySet entrySet, String
            stepPath, String exitValue)
            Posts a message to move the entries in the entrySet from the specified stepPath to
            the next step for the given exitValue. Returns a map of Entry primary key to String of
            validation errors. Only valid entries are moved to the next step. The move will not
            take place until after the current transaction has committed.
        </text>
    </object>
    <object>
        <id>422</id>
        <text>moveEntryToColArea
            boolean CollaborationArea::moveEntryToColArea(Entry entry, String
            destColAreaName)
            Applies to items only. Moves the entrySet of entries in the collaboration area to
            another collaboration area. destColAreaName specifies the name of the destination
        </text>
    </object>
    <object>
        <id>423</id>
        <text>collaboration area, into whose Initial step the entries will be checked into. This
            operation is asynchronous which means a message is posted to complete the move
            at some time after the current transaction is committed. Returns a boolean depending
            on whether the message to move the entry was successfully posted. Returns false if
            the entry was a category.
        </text>
    </object>
    <object>
        <id>424</id>
        <text>moveEntryToNextStep
            HashMap CollaborationArea::moveEntryToNextStep(Entry entry, String
            stepPath, String exitValue)
            Posts a message to move the entry from the specified stepPath to the next step for
            the given exitValue. Returns a map of Entry primary key to String of validation errors.
            Only valid entries are moved to the next step. The move will not take place until after
            the current transaction has committed.
        </text>
    </object>
    <object>
        <id>425</id>
        <text>new$CollaborationArea
            new CollaborationArea(String colAreaName, Workflow wfl, Container
            srcContainer)
            Create a new collaboration area with the given name, wfl and srcContainer
        </text>
    </object>
    <object>
        <id>426</id>
        <text>publishEntriesToSrcContainer
            boolean CollaborationArea::publishEntriesToSrcContainer(EntrySet entrySet)
            Posts a message to publish the current attribute values for each entry in the entrySet
            in the collaboration area back to the source catalog or category tree, leaving those
            entries which are able to be published out to the source container unchanged and
            undisturbed in the collaboration area. Entries which cannot, for whatever reason, be
            published out to the source container will be moved to the Fixit step. This is also
            known as an interim checkin. The publish will occur after the current transaction
            completes. Returns a boolean. True indicates that the entire entrySet was valid and a
            publish message was successfully posted.
        </text>
    </object>
    <object>
        <id>427</id>
        <text>releaseEntryInStep
            Boolean CollaborationArea::releaseEntryInStep(Entry entry, String stepPath)
            Returns true if the entry was unlocked in a wfl step for a given collaboration area,
            otherwise it returns false. Operation runs synchronously.
        </text>
    </object>
    <object>
        <id>428</id>
        <text>reserveEntryInStep
            Boolean CollaborationArea::reserveEntryInStep(IEntry entry, String stepPath,
            [String username])
            Returns true if the entry was reserved in a wfl step for a given collaboration area,
            otherwise it returns false. Operation runs synchronously.
        </text>
    </object>
    <object>
        <id>429</id>
        <text>runStepJob
            void CollaborationArea::runStepJob(EntrySet entrySet, String stepPath, String
            jobName, String jobType, Date date [, String username])
            entrySet is an arbitrary EntrySet whose elements are expected to be in the workflow
            step specified by stepPath. jobName is the name of an existing job. jobType is either
            "IMPORT" or "EXPORT". date specifies the time of a one-time run. The optional
            username specifies the User in whose name the job will be run. Default is the User
            who created the job. When the job finishes, if it completes ok, the
            "JOB_SUCCESSFUL" exit value will be set on the elements of entrySet and an
            EndStep event posted. If it completes with error, the "JOB_FAILED" exit value will be
            set on elements of entrySet and a EndStep event posted. No harm done if the
            elements of entrySet are not in stepPath (but are still in the Collaboration Area): the
            EndStepEvent posted when the job finishes presumably will be meaningless and
            harmless. If one or more of the elements of entrySet are no longer in the
            Collaboration Area: they will be excluded from the entrySet of the posted
            EndStepEvent. If no elements of entrySet are still in the CollaborationArea, no
            EndStepEvent will be posted.
        </text>
    </object>
    <object>
        <id>430</id>
        <text>saveColArea
        </text>
    </object>
    <object>
        <id>431</id>
        <text>void CollaborationArea::saveColArea()
            Saves the collaboration area.
        </text>
    </object>
    <object>
        <id>432</id>
        <text>setColAreaAccessControlGroup
            void CollaborationArea::setColAreaAccessControlGroup(String acgName)
            Sets the Access Control Group to the given name for this collaboration area.
        </text>
    </object>
    <object>
        <id>433</id>
        <text>setColAreaAdminRoles
            void CollaborationArea::setColAreaAdminRoles(String[] roles)
            Sets the admin roles for the collaboration area.
        </text>
    </object>
    <object>
        <id>434</id>
        <text>setColAreaAdminUsers
            void CollaborationArea::setColAreaAdminUsers(String[] users)
            Sets the admin users for the collaboration area.
        </text>
    </object>
    <object>
        <id>435</id>
        <text>setStepEntryTimeout
            void CollaborationArea::setStepEntryTimeout(Entry entry, String stepPath, Date
            date)
            Expects the entry to actually be in the given collaboration area's specified stepPath.
            Provided the entry is found to actually be in the step, its timeout is set to be the
            moment in time specified by the date argument. If any of the assumptions are not met
            (collaboration area has no such stepPath, entry are not in that stepPath, etc.), the
            operation simply does nothing, i.e. no Exception thrown. The operation doesn't
            modify the collaboration area's underlying workflow at all. It should be thought of as
            operating on an entry in a collaboration area, that is expected to be in a particular
            stepPath at the moment in time when the op is executed.
        </text>
    </object>
    <object>
        <id>436</id>
        <text>unlockColArea
            Boolean CollaborationArea::unlockColArea()
            Unlocks the Collaboration Area so that entries can be checked out into it again.
            Returns true or false depending on whether the unlock was successful or not.
        </text>
    </object>
    <object>
        <id>437</id>
        <text>operations_ctgaccprv
        </text>
    </object>
    <object>
        <id>438</id>
        <text>getCtgAccessPrvByRole
            CtgAccessPrv Container::getCtgAccessPrvByRole(String sRoleName)
            Returns the catalog access privilege for the catalog and role. Returns catalog access
            privilege with full access if none was found.
        </text>
    </object>
    <object>
        <id>439</id>
        <text>getCtgAccessPrvPermission
            String CtgAccessPrv::getCtgAccessPrvPermission(String
            attributeCollectionName)
            Returns the permission [E-editable|V-viewable] for the given attribute collection in the
            current catalog access prv.
        </text>
    </object>
    <object>
        <id>440</id>
        <text>new$CtgAccessPrv
            new CtgAccessPrv(Container container, String roleName)
            Builds a new ctg access privilege object
        </text>
    </object>
    <object>
        <id>441</id>
        <text>saveCtgAccessPrv
            Boolean CtgAccessPrv::saveCtgAccessPrv()
            Saves the current catalog access prv to the database
        </text>
    </object>
    <object>
        <id>442</id>
        <text>setAccessPrv
            Boolean CtgAccessPrv::setAccessPrv(String attrGroupName, String
            permission)
            Returns an access privilege object with the new permissions set for the
            attrGroupName. Permission is [V|E|null], and in case the permission is NULL the path
        </text>
    </object>
    <object>
        <id>443</id>
        <text>is removed from the access Privilege. Returns TRUE if successful, FALSE if not
        </text>
    </object>
    <object>
        <id>444</id>
        <text>setCtgAccessPrv
            CtgAccessPrv CtgAccessPrv::setCtgAccessPrv(String[] attrGroups, String[]
            permissions)
            Returns a catalog access privilege object with the permissions set according to the
            attribute collections. Permissions are [V|E]
        </text>
    </object>
    <object>
        <id>445</id>
        <text>operations_ctgview
        </text>
    </object>
    <object>
        <id>446</id>
        <text>addCtgTab
            void CtgView::addCtgTab(CtgTab tab)
            Add container tab object to the catalog view. The tab is added to the end of the list of
            tabs already defined for the container ctg view.
        </text>
    </object>
    <object>
        <id>447</id>
        <text>deleteCtgView
            void deleteCtgView(CtgView ctgView)
            Delete the catalog view ctgView.
        </text>
    </object>
    <object>
        <id>448</id>
        <text>getCtgTabAttrGroupsList
            String[] CtgTab::getCtgTabAttrGroupsList()
            Returns a list of ordered attribute collections for the catalog view tab.
        </text>
    </object>
    <object>
        <id>449</id>
        <text>getCtgTabByName
            CtgTab CtgView::getCtgTabByName(String name)
            Returns the tab with the given name, or null if there is no such tab.
        </text>
    </object>
    <object>
        <id>450</id>
        <text>getCtgTabName
            String CtgTab::getCtgTabName()
            Returns the name of the tab.
        </text>
    </object>
    <object>
        <id>451</id>
        <text>getCtgTabRow
            CtgTabRow[] CtgTab::getCtgTabRow()
            get the set of rows in the current container tab object
        </text>
    </object>
    <object>
        <id>452</id>
        <text>getCtgTabs
            CtgTab[] CtgView::getCtgTabs()
            Returns an ordered array of container tab objects for the particular container view
        </text>
    </object>
    <object>
        <id>453</id>
        <text>getCtgViewAttrGroupsList
            String[] CtgView::getCtgViewAttrGroupsList()
            Returns list of ordered attribute collections for the catalog view.
        </text>
    </object>
    <object>
        <id>454</id>
        <text>getCtgViewAttribsList
            String[] CtgView::getCtgViewAttribsList()
            Returns list of ordered attribute paths for the catalog view.
        </text>
    </object>
    <object>
        <id>455</id>
        <text>getCtgViewByName
            CtgView Container::getCtgViewByName([String viewName, String viewType])
            Returns the view with the corresponding name. If no name is specified, returns the
            default view. Use '[System Default]' to refer to the default view. The viewType can be
            'ITEM_LIST', 'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT', 'ITEM_EDIT',
            'CATEGORY_EDIT' or 'CATEGORY_BULK_EDIT'. By default
            ITEM_EDIT/CATEGORY_EDIT is used. If the view is not found, it returns null.
        </text>
    </object>
    <object>
        <id>456</id>
        <text>getCtgViewPermission
            String CtgView::getCtgViewPermission(String attrGroupName)
            Returns the permission [E-editable|V-viewable] for the attribute collection name in the
        </text>
    </object>
    <object>
        <id>457</id>
        <text>current view.
        </text>
    </object>
    <object>
        <id>458</id>
        <text>getCtgViewType
            String CtgView::getCtgViewType()
            Returns the type of the view in question as a string. The values can be 'ITEM_LIST',
            'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT',
            'CATEGORY_BULK_EDIT', 'HIERARCHY_RICH_SEARCH', 'ITEM_RICH_SEARCH'
        </text>
    </object>
    <object>
        <id>459</id>
        <text>getCurrentCtgViewName
            String getCurrentCtgViewName()
            Returns name of current catalog view (only in Data Entry scripts). Returns an empty
            string outside of the Data Entry scripts.
        </text>
    </object>
    <object>
        <id>460</id>
        <text>getDefaultCtgViewName
            String Catalog::getDefaultCtgViewName()
            Returns name of default catalog view.
        </text>
    </object>
    <object>
        <id>461</id>
        <text>getDefaultCtrViewName
            String CategoryTree::getDefaultCtrViewName()
            Returns name of default category tree view.
        </text>
    </object>
    <object>
        <id>462</id>
        <text>getListOfCtgViewNames
            String[] Catalog::getListOfViewNames()
            Returns an array of view names available for this catalog. An entry with '[System
            Default]' is always included as the first entry.
        </text>
    </object>
    <object>
        <id>463</id>
        <text>getNewCtgTab
            CtgTab CtgView::getNewCtgTab(String name, AttrGroup[] rows)
            Builds a new container tab object with the given name and returns it. The tab needs
            to be added to the catalog view in order to save it
        </text>
    </object>
    <object>
        <id>464</id>
        <text>getTabRowPath
            String CtgTabRow::getTabRowPath()
            Returns the attribute path for this tab row
        </text>
    </object>
    <object>
        <id>465</id>
        <text>insertCtgTabAt
            void CtgView::insertCtgTabAt(CtgTab tab, Integer index)
            Insert container tab object to the catalog view at the index position(zero base). If
            index is invalid, tab is added to the end of the list
        </text>
    </object>
    <object>
        <id>466</id>
        <text>new$CtgTabRow
            CtgTabRow CtgTabRow(String path)
            Builds a new container tab row object for the node specified by the path.
        </text>
    </object>
    <object>
        <id>467</id>
        <text>new$CtgView
            new CtgView(Container container, String name)
            Builds a new Ctg View
        </text>
    </object>
    <object>
        <id>468</id>
        <text>removeCtgTabAt
            void CtgView::removeCtgTabAt(Integer index)
            Remove container tab object to the catalog view at the index position(zero base).
        </text>
    </object>
    <object>
        <id>469</id>
        <text>saveCtgTabs
            void CtgView::saveCtgTabs()
            save the container tab objects that were new/modified in the container view
        </text>
    </object>
    <object>
        <id>470</id>
        <text>saveCtgView
            Boolean CtgView::saveCtgView()
            Saves the current ctgview to the database
        </text>
    </object>
    <object>
        <id>471</id>
        <text>setCtgTabRow
            void CtgTab::setCtgTabRow(AttrGroup[] rows)
            Sets the current container tab object to the new set of rows
        </text>
    </object>
    <object>
        <id>472</id>
        <text>setCtgView
            CtgView CtgView::setCtgView(String viewType, String[] attrGroupNames,
            String[] permissions)
            Sets the container view object with the given name/catalog and returns it. The
            viewType can be 'ITEM_LIST', 'ITEM_POPUP', 'ITEM_LOCATION, 'BULK_EDIT' or
            'ITEM_EDIT'. By default ITEM_EDIT is used. Permissions are [V|E]
        </text>
    </object>
    <object>
        <id>473</id>
        <text>setDefaultCtgView
            void Catalog::setDefaultCtgView(CtgView ctgView)
            Sets the ctgview as the default catalog view.
        </text>
    </object>
    <object>
        <id>474</id>
        <text>setDefaultCtrView
            void CategoryTree::setDefaultCtrView(CtgView ctrView)
            Sets the ctrview as the default category tree view.
        </text>
    </object>
    <object>
        <id>475</id>
        <text>operations_distribution
        </text>
    </object>
    <object>
        <id>476</id>
        <text>createDataSource
            String createDataSource(String name, String type, [HashMap extraAttribs])
            Creates a Data Source of the type ("PULL_FTP", "PULL_FTP", "PUSH_WWW",
            "DOC_STORE") with given name. Will not create if a source with same name already
            exists. extraAttribs can be used to set other attributes of the datasource like
            "SERVER_ADDRESS", "SERVER_PORT", "USERNAME", "PASSWORD",
            "FILENAME", "DIRECTORY", "DOC_STORE_PATH"
        </text>
    </object>
    <object>
        <id>477</id>
        <text>getDistributionByName
            Distribution getDistributionByName(String name)
            Gets the distribution with the specified name if one exists, otherwise returns null
        </text>
    </object>
    <object>
        <id>478</id>
        <text>getFtp
            HashMap/Boolean getFtp(String hostname, String port, String userid, String
            password, String path, String filename, String sDocStorePath, Boolean
            deleteRemoteFile, [Boolean detailedTransferStatus, Boolean loggingEnabled])
            Use to get a file via FTP. The seventh parameter set where Trigo will store the
            retrieved file. The eighth and the ninth paramters together are optional. The eigth
            parameter gets the FTP Operation Status and the ninth paramter ensures that the
            FTP operations are logged. Returns the result as true/false if the eighth and the ninth
            are not specified otherwise a HashMap is returned. If a true/false is returned, it
            indicates if the ftp was a success/failure. If the size of the retrieved file is not the
            same as the size of the remote file the status is set to false. If a HashMap is returned,
            the first paramater is the true/false which indicates success/failure, the second
            paramater is the message string of the FTP Operation Status and the third parameter
            is the FTP Operation error code
        </text>
    </object>
    <object>
        <id>479</id>
        <text>getFullHTTPResponse
            HashMap getFullHTTPResponse(String url, HashMap hmRequestProperites,
            HashMap hmParameters, String sRequestMethod , [String sEncoding, Doc doc,
            String sContentType, boolean bGetResponseReader, boolean bPostUserInfo,
            String sDocStorePath])
            Returns a HashMap (with RESPONSE_READER and
            RESPONSE_HEADER_FIELDS) for the response for posting hmParameters or a
            doc of sContentType against the server at url, Use hmRequestProperties to send
            specific header information. An optional parameter bGetReader could be used to
        </text>
    </object>
    <object>
        <id>480</id>
        <text>specify if the function needs to also return the response reader (default is true). An
            optional parameter bPostUserInfo could be used to specify if the function would need
            to post the invoking user information (default is false). The response is optionally
            stored into a document at sDocStorePath in the docstore.
        </text>
    </object>
    <object>
        <id>481</id>
        <text>getHTTPResponse
            BufferedReader getHTTPResponse(String url, HashMap hmRequestProperites,
            HashMap hmParameters, String sRequestMethod [,String sEncoding])
            Returns a reader for the response for posting hmParameters against the server at url,
            Use hmRequestProperties to send specific header information
        </text>
    </object>
    <object>
        <id>482</id>
        <text>new$Distribution
            new Distribution(String name, String type, [HashMap extraAttribs])
            Creates a distribution with the provided name. The type can be: "FTP", "EMAIL",
            "POST", "ARIBA_CATALOG_UPLOAD", "INCOMING_FTP", "CUSTOM". extraAttribs
            should contain the parameters required for the different types which include "email",
            "hostname", "userid", "password", "path", "from", "to", "sub", "localpath"
        </text>
    </object>
    <object>
        <id>483</id>
        <text>saveMultipartRequestData
            Doc[] saveMultipartRequestData(String saveDir, [String charset])
            Saves the documents sent through multipart post in the docstore at location:
            /archives/uploaded/multipart/saveDir/. If a charset is given, that is used. Otherwise,
            the default_charset_value as specified in common.properties is used.
        </text>
    </object>
    <object>
        <id>484</id>
        <text>sendEmail
            void sendEmail(String emailTos, String emailSubject, String emailBody, [Doc
            emailAttachment | Doc[] emailAttatchments])
            Use to send an asynchronous email. The tos parameter is a list of email addresses
            seperated with the semicolon character (;). The 4th parameter could be an Doc or an
            array of Doc
        </text>
    </object>
    <object>
        <id>485</id>
        <text>sendFtp
            void sendFtp(String hostname, String port, String userid, String password,
            String path, Doc doc | Doc[] docs)
            Use to send a file via FTP. The 6th parameter could be an Doc or an array of Doc.
        </text>
    </object>
    <object>
        <id>486</id>
        <text>sendHTMLEmail
            void sendHTMLEmail(String emailTos, String emailSubject, String emailBody,
            [Doc emailAttachment | Doc[] emailAttatchments])
            Same as sendEmail operation, however will allow HTML anchor tags in the message
            body. Use to send an asynchronous email. The tos parameter is a list of email
            addresses seperated with the semicolon character (;). The 4th parameter could be an
            IDoc or an array of IDoc
        </text>
    </object>
    <object>
        <id>487</id>
        <text>sendHttp
            void sendHttp(String url, [Doc doc, [String contentType]])
            Use to do GET or POST to a URL.
        </text>
    </object>
    <object>
        <id>488</id>
        <text>sendHttpString
            void sendHttpString(String url, String content, String contentType)
            Use to do GET or POST to a URL.
        </text>
    </object>
    <object>
        <id>489</id>
        <text>sendMultipartPost
            HashMap sendMultipartPost(String url, HashMap hmRequestProperites,
            HashMap hmParameters, String sRequestMethod, HashMap hmDocs)
            Sends one or more documents of any content type and/or a set of hmParameters
            using multipart post against the server at url, Use hmRequestProperties to send
            specific header information. The hmDocs is the list of pairs ['document path',
            'document content type'] for the documents of a particular content type (eg: text/plain,
        </text>
    </object>
    <object>
        <id>490</id>
        <text>image/gif etc.). Also returns a HashMap (with RESPONSE_READER and
            RESPONSE_HEADER_FIELDS) for the response.
        </text>
    </object>
    <object>
        <id>491</id>
        <text>setHttpServletResponseHeader
            void setHttpServletResponseHeader(HashMap hmNameValuePairs)
            Sets the name, value pairs specified in the hashMap into the header for the current
            HttpServletResponse
        </text>
    </object>
    <object>
        <id>492</id>
        <text>setHttpServletResponseStatus
            void setHttpServletResponseStatus(String statusCode)
            Sets the status (takes one of the values from the set #[#'SC_ACCEPTED', 'SC_OK',
            'SC_CONTINUE', 'SC_PARTIAL_CONTENT', 'SC_CREATED',
            'SC_SWITCHING_PROTOCOLS', 'SC_NO_CONTENT'#]#) for the current
            HttpServletResponse
        </text>
    </object>
    <object>
        <id>493</id>
        <text>operations_docstore
        </text>
    </object>
    <object>
        <id>494</id>
        <text>copyDoc
            Doc Doc::copyDoc(sPath)
            Copy this document to the specified sPath in the docstore. If the path ends with a '/' it
            is assumed that the doc needs to be copied to the specified directory with its current
            name
        </text>
    </object>
    <object>
        <id>495</id>
        <text>deleteDoc
            void Doc::deleteDoc()
            Delete this document from the docstore
        </text>
    </object>
    <object>
        <id>496</id>
        <text>forEachDocument
            forEachDocument([Doc[] docs_list, ], Doc doc) { statements }
            Executes the statements for each document (used in distribution scripts). If the
            optional docs_list parameter is provided, however, the statements are executed for
            each element of docs_list
        </text>
    </object>
    <object>
        <id>497</id>
        <text>getDocAttribute
            String Doc::getDocAttribute(String sAttributeName)
            Return the attribute sAttributeName from this document
        </text>
    </object>
    <object>
        <id>498</id>
        <text>getDocAttributes
            HashMap Doc::getDocAttributes()
            Return the attributes of this document
        </text>
    </object>
    <object>
        <id>499</id>
        <text>getDocByPath
            Doc getDocByPath(String sPath)
            Return the document with path sPath
        </text>
    </object>
    <object>
        <id>500</id>
        <text>getDocContentAsString
            String Doc::getDocContentAsString()
            Return the content of this document as a string. WARNING - this means that the
            entire content of the document, however big, will be returned in a string so the uer
            needs to make sure that any call of this operation is not going to be used in a
            situation where the content of the document is too big (too big being defined by the
            amount of memory available to the process this operation is running in).
        </text>
    </object>
    <object>
        <id>501</id>
        <text>getDocLastModifiedTimeStamp
            Date Doc::getDocLastModifiedTimeStamp()
            Returns the date/time this document was last modified
        </text>
    </object>
    <object>
        <id>502</id>
        <text>getDocLength
        </text>
    </object>
    <object>
        <id>503</id>
        <text>Integer Doc::getDocLength([Boolean bBytes])
            Returns the length of the document in kilo bytes. If bBytes is true, value is returned in
            bytes instead of Kb. Important when smaller files are concerned
        </text>
    </object>
    <object>
        <id>504</id>
        <text>getDocListByPaths
            Doc[] getDocListByPaths(String[] sPaths)
            Return the document at each path specified in sPaths
        </text>
    </object>
    <object>
        <id>505</id>
        <text>getDocPath
            String Doc::getDocPath()
            Return this document path
        </text>
    </object>
    <object>
        <id>506</id>
        <text>getDocStoreDirectoriesInDirectory
            String[] getDocStoreDirectoriesInDirectory(String sPath)
            Return the list of paths of directories under the directory sPath
        </text>
    </object>
    <object>
        <id>507</id>
        <text>getDocStoreFilesInDirectory
            String[] getDocStoreFilesInDirectory(String sPath)
            Return the list of paths of documents under the directory sPath
        </text>
    </object>
    <object>
        <id>508</id>
        <text>getDocStoreSubtreeList
            String[] getDocStoreSubtreeList(String sPath)
            Return the list of documents under sPath
        </text>
    </object>
    <object>
        <id>509</id>
        <text>getHrefForDocPath
            String getHrefForDocPath(String sDocPath)
            Return a absolute path for the document with path sDocPath. This can be used in an
            HTML reference to provide a link to the document.
        </text>
    </object>
    <object>
        <id>510</id>
        <text>moveDoc
            Doc Doc::moveDoc(sPath)
            Move this document to the specified sPath in the docstore. If the path ends with a '/' it
            is assumed that the doc needs to be moved to the specified directory with the same
            doc name as the source
        </text>
    </object>
    <object>
        <id>511</id>
        <text>setDocAttribute
            void Doc::setDocAttribute(String sAttributeName, String sAttributeValue)
            Set the attribute sAttributeName to sAttributeValue for this document
        </text>
    </object>
    <object>
        <id>512</id>
        <text>operations_entry
        </text>
    </object>
    <object>
        <id>513</id>
        <text>deleteEntryNode
            void EntryNode::deleteEntryNode()
            Remove this entrynode from the Entry. This operation will only work on
            Mutli-Occurance attributes, an error will be thrown if used on a non-mulit-occurance
            entryNode.
        </text>
    </object>
    <object>
        <id>514</id>
        <text>displayEntryAttrib
            String Entry::displayEntryAttrib(String sAttribPath)
            Returns the html string for displaying entry attribute specified by attribute path
        </text>
    </object>
    <object>
        <id>515</id>
        <text>forEachEntrySetElement
            forEachEntrySetElement(EntrySet entrySet, Object oEntry) { statements }
            Executes the statements for each (oEntry) in the entrySet
        </text>
    </object>
    <object>
        <id>516</id>
        <text>getAddedAttributePathsNewEntry
            String[] EntryChangedData::getAddedAttributePathsNewEntry([Category
            location])
        </text>
    </object>
    <object>
        <id>517</id>
        <text>Returns the paths of all attributes in LOCATION that (1) are not present in the old
            entry and (2) are present in the new entry from which this EntryChangedData object
            was created. If LOCATION is not specified or is null, then the comparison is done for
            global attributes.
        </text>
    </object>
    <object>
        <id>518</id>
        <text>getCheckedOutEntryColAreas
            String[] Entry::getCheckedOutEntryColAreas()
            Return a list of collaboration area names in which the entry is checked out. Returns
            empty list if entry is not checked out.
        </text>
    </object>
    <object>
        <id>519</id>
        <text>getCtgItemLocationAttribsForKeys
            String Item::getCtgItemLocationAttribsForKeys(Category location, Object[]
            aAttribPath [, String sDelimiter])
            Gets the attributes for an item based upon the passed location category and a
            Object[] (declared: var aAttribs = [];) of attribute keys (paths). The resultant values are
            loaded into the value pair of the mapping. If the value for one key is unset, it defaults
            to a blank string. If the key does not correspond with an attribute, a null is entered
            instead.
        </text>
    </object>
    <object>
        <id>520</id>
        <text>getDeletedAttributePathsOldEntry
            String[] EntryChangedData::getDeletedAttributePathsOldEntry([Category
            location])
            Returns the paths of all attributes in LOCATION that (1) are not present in the new
            entry and (2) are present in the old entry from which this EntryChangedData object
            was created. If LOCATION is not specified or is null, then the comparison is done for
            global attributes.
        </text>
    </object>
    <object>
        <id>521</id>
        <text>getDestinationEntrySetForRelatedEntries
            EntrySet Entry::getDestinationEntrySetForRelatedEntries(Container
            filterContainer)
            Returns EntrySet with all entries this entry is related to filtering by container if
            filterContainer is provided.
        </text>
    </object>
    <object>
        <id>522</id>
        <text>getDisplayValue
            String Entry::getDisplayValue(Locale locale)
            Returns the display value for the entry. If no display value is available then the
            primary key value is returned.
        </text>
    </object>
    <object>
        <id>523</id>
        <text>getEntry
            Entry EntryNode::getEntry()
            Returns the Entry behind the EntryNode.
        </text>
    </object>
    <object>
        <id>524</id>
        <text>getEntryAttrib
            Object Entry::getEntryAttrib(String sAttribPath)
            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
            entry
        </text>
    </object>
    <object>
        <id>525</id>
        <text>getEntryAttribs
            (deprecated)HashMap Entry::getEntryAttribs()
            Returns an HashMap mapping the paths (spec_name/attribute_name) of attributes to
            their respective values
        </text>
    </object>
    <object>
        <id>526</id>
        <text>getEntryAttribsList
            String[] Entry::getEntryAttribsList()
            Returns an array of String containing the paths (spec_name/attribute_name) of all the
            attributes of this entry
        </text>
    </object>
    <object>
        <id>527</id>
        <text>getEntryAttribValues
            Object[] Entry::getEntryAttribValues(String sAttribPath)
        </text>
    </object>
    <object>
        <id>528</id>
        <text>Returns the values of the multi-value attribute given by sAttribPath
            (spec_name/attribute_name) of this entry
        </text>
    </object>
    <object>
        <id>529</id>
        <text>getEntryByPrimaryKey
            Object Container::getEntryByPrimaryKey(String primaryKey)
            Gets the entry given the primary key.
        </text>
    </object>
    <object>
        <id>530</id>
        <text>getEntryChangedData
            EntryChangedData ::getEntryChangedData(Entry oldEntry, Entry newEntry)
            Return an EntryChangedData object encapsulating the changes in data and locations
            between two entries at a point in time at which the EntryChangedData object is
            created,such that the returned object is a static object. Note, this script operation is
            very CPU intensive on large items (many locations and many attributes). Please see
            script operation getEntryChangedDataSinceLastSave.
        </text>
    </object>
    <object>
        <id>531</id>
        <text>getEntryChangedDataSinceLastSave
            EntryChangedData Entry::getEntryChangedDataSinceLastSave()
            Return an EntryChangedData object encapsulating the changes in data and locations
            between this entry and the value since the last save (including save as draft). Note,
            this script operation should be much faster than 'getEntryChangedData(oldEntry,
            newEntry).
        </text>
    </object>
    <object>
        <id>532</id>
        <text>getEntryContainer
            Object Entry::getEntryContainer()
            Gets the holding container for this Entry. Could be a catalog or category tree. Use
            isEntryAnItem to determine which one.
        </text>
    </object>
    <object>
        <id>533</id>
        <text>getEntryId
            Integer Entry::getEntryId()
            Returns this entry's id
        </text>
    </object>
    <object>
        <id>534</id>
        <text>getEntryNode
            EntryNode EntryNode::getEntryNode(String sPath)
            Return the entryNode with path sPath relative to EntryNode. If the path is not already
            built a NULL will be returned. Use the Entry::setEntryAttrib script operation to create a
            path that might not exist.
        </text>
    </object>
    <object>
        <id>535</id>
        <text>getEntryNodeChildren
            EntryNode[] EntryNode::getEntryNodeChildren()
            Return the children of this EntryNode
        </text>
    </object>
    <object>
        <id>536</id>
        <text>getEntryNodeExactPath
            String EntryNode::getEntryNodeExactPath()
            Returns the exact path of this entry node - the following is always true:
            rootNode.getEntryNode(entryNode.getEntryNodeExactPath()) == entryNode
        </text>
    </object>
    <object>
        <id>537</id>
        <text>getEntryNodeInheritedValue
            Object EntryNode::getEntryNodeInheritedValue()
            If this EntryNode inherits its value, return the value. Otherwise, return null.
        </text>
    </object>
    <object>
        <id>538</id>
        <text>getEntryNodeParent
            EntryNode EntryNode::getEntryNodeParent()
            Return the parent of this EntryNode. If it is the root node, NULL is returned.
        </text>
    </object>
    <object>
        <id>539</id>
        <text>getEntryNodePath
            String EntryNode::getEntryNodePath()
            Returns the Spec Node path of this entry node, NOT the relative path of this attr.
        </text>
    </object>
    <object>
        <id>540</id>
        <text>getEntryNodes
        </text>
    </object>
    <object>
        <id>541</id>
        <text>EntryNode[] EntryNode::getEntryNodes(String sPath)
            Return the entry nodes matching the path sPath
        </text>
    </object>
    <object>
        <id>542</id>
        <text>getEntryNodeType
            String EntryNode::getEntryNodeType()
            return "V" = value, "G" = Grouping or top level of spec directory, "M" = Multi-directory
            (contains multiple occurrances of values or groupings))
        </text>
    </object>
    <object>
        <id>543</id>
        <text>getEntryNodeValue
            Object EntryNode::getEntryNodeValue()
            Return the value of this EntryNode
        </text>
    </object>
    <object>
        <id>544</id>
        <text>getEntryRelatedItemInfo
            String[] Entry::getEntryRelatedItemInfo(int iItemId)
            (Deprecated, see String[] Entry::getEntryRelationshipAttrib(String sEntryAttrib))
            Returns an array of length 2 containing: [0]=Related Item's Catalog's Name,
            [1]=Related Item's Primary Key, for the related item represented by the given internal
            unique item id, at the browsing version of the catalog of the given entry
        </text>
    </object>
    <object>
        <id>545</id>
        <text>getEntryRelationshipAttrib
            String[] Entry::getEntryRelationshipAttrib(String sAttribPath)
            Given a relationship attribute path, returns an array of length 2 containing:
            [0]=Related Item's Catalog's Name, [1]=Related Item's Primary Key, for the related
            item. Exception will be thrown if attribute sAttribPath doesn't exist or it's not of
            relationship type
        </text>
    </object>
    <object>
        <id>546</id>
        <text>getEntrySaveResult
            String Entry::getEntrySaveResult()
            Returns the result of the last save called on this entry. Returns one of the following
            strings {ADDED,DELETED,MODIFIED,UNKNOWN}
        </text>
    </object>
    <object>
        <id>547</id>
        <text>getEntryStatus
            String Entry::getEntryStatus()
            Returns the status of the entry
        </text>
    </object>
    <object>
        <id>548</id>
        <text>getEntryXMLRepresentation
            String Entry::getEntryXMLRepresentation(Spec spec, boolean
            includePrimaryKeyValue[, boolean addNameSpace, String dateFormat, Locale[]
            aLocales, AttrGroup[] aAttrGroups])
            Returns the XML representation of this entry specific to the given spec which can be
            consumed by WPC-WPS integration WPS portion's XML parser. The optional
            parameter; addNameSpace allows the user to specify that the XML returned is in a
            format that can immediately be read in using the
            setEntryAttributesFromXMLRepresentation function. The default of false for this
            parameter allows user to prepend and append to the XML as required. The date
            format is the pattern by which dates should be converted. A Simple Date Format is
            normally used. If aLocales is specified, restrict to those locales. If AttrGroup[] is
            specified only return attribute belonging to one of the AttrGroup
        </text>
    </object>
    <object>
        <id>549</id>
        <text>getFlatEntryNodes
            EntryNode[] Entry::getFlatEntryNodes([Boolean skipEmptyGrouping])
            Returns an array of flat EntryNodes of this entry.
        </text>
    </object>
    <object>
        <id>550</id>
        <text>getFlatEntryNodesOf
            EntryNode[] getFlatEntryNodesOf(EntryNode en)
            Returns an array of all the entrynodes under this entrynode in depth first order
        </text>
    </object>
    <object>
        <id>551</id>
        <text>getFlatPrimaryEntryNodes
            EntryNode[] Entry::getFlatPrimaryEntryNodes([Boolean skipEmptyGrouping])
        </text>
    </object>
    <object>
        <id>552</id>
        <text>Returns an array of flat primary EntryNodes of this entry
        </text>
    </object>
    <object>
        <id>553</id>
        <text>getFlatSecondaryEntryNodes
            EntryNode[] Entry::getFlatSecondaryEntryNodes([Boolean
            skipEmptyGrouping])
            Returns an array of flat secondary EntryNodes of this entry
        </text>
    </object>
    <object>
        <id>554</id>
        <text>getItemLocationAttrib
            Object Item::getItemLocationAttrib(Category location, String sAttribPath)
            Gets a location attribute for an item. Note -- if you specify an occurence (grouping or
            value) that does not exist, then an exception is thrown.
        </text>
    </object>
    <object>
        <id>555</id>
        <text>getItemUsingEntryRelationshipAttrib
            Item Entry::getItemUsingEntryRelationshipAttrib(String sAttribPath)
            return the related item object for given relationship attribute path. Exception will be
            thrown if attribute sAttribPath doesn't exist or it's not of relationship type
        </text>
    </object>
    <object>
        <id>556</id>
        <text>getLocation
            Category Object::getLocation()
            If the caller object is the entry node, return the location (category) or null if a global
            entry node; if the caller object is a SearchResultSet, return the value of the
            designated column in the current row of this SearchResultSet object as a Location
            (Category).
        </text>
    </object>
    <object>
        <id>557</id>
        <text>getLocationPathForInheritedValue
            String EntryNode::getLocationPathForInheritedValue(String delimiter)
            Returns the path for the location from which this EntryNode inherits, or null if it does
            not inherit its value. The given delimiter is used.
        </text>
    </object>
    <object>
        <id>558</id>
        <text>getLocationsAddedAvailability
            CategorySet EntryChangedData::getLocationsAddedAvailability(CategoryTree
            locationHierarchy)
            Returns all locations in LOCATIONHIERARCHY that are available in the new entry
            but not the old entry from which this EntryChangedData object was created.
        </text>
    </object>
    <object>
        <id>559</id>
        <text>getLocationsChangedToHaveData
            CategorySet
            EntryChangedData::getLocationsChangedToHaveData(CategoryTree
            locationHierarchy)
            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
            entry and the new entry from which this EntryChangedData object was created, and
            (2) contain no data in the old entry but do contain data in the new entry. Note,
            Override is considered as having data, and Inherit is considered as not having data.
        </text>
    </object>
    <object>
        <id>560</id>
        <text>getLocationsChangedToHaveNoData
            CategorySet
            EntryChangedData::getLocationsChangedToHaveNoData(CategoryTree
            locationHierarchy)
            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
            entry and the new entry from which this EntryChangedData object was created, and
            (2) contain no data in the new entry but do contain data in the old entry. Note,
            Override is considered as having data, and Inherit is considered as not having data.
        </text>
    </object>
    <object>
        <id>561</id>
        <text>getLocationsHavingChangedData
            CategorySet
            EntryChangedData::getLocationsHavingChangedData(CategoryTree
            locationHierarchy)
            Returns all locations in LOCATIONHIERARCHY that (1) are available in both the old
            entry and the new entry from which this EntryChangedData object was created, and
        </text>
    </object>
    <object>
        <id>562</id>
        <text>(2) have at least one attribute path for which the old and new entries contain different
            values. Note that this operation will return a superset of all locations returned by the
            getLocationsChangedToHaveData and getLocationsChangedToHaveNoData script
            operations.
        </text>
    </object>
    <object>
        <id>563</id>
        <text>getLocationsRemovedAvailability
            CategorySet
            EntryChangedData::getLocationsRemovedAvailability(CategoryTree
            locationHierarchy)
            Returns all locations in LOCATIONHIERARCHY that are available in the old entry but
            not the new entry from which this EntryChangedData object was created.
        </text>
    </object>
    <object>
        <id>564</id>
        <text>getModifiedAttributePathsNewEntry
            String[] EntryChangedData::getModifiedAttributePathsNewEntry([Category
            location])
            Returns the paths of all attributes in LOCATION that (1) are present in both the old
            entry and the new entry from which this EntryChangedData object was created, and
            (2) contain different data in the old and new entries. It is possible for an attribute to
            have different attribute paths across the old entry and the new entry, for example
            because a multioccurrence sibling has been deleted. In this case, we return the
            attribute path for the new entry. If LOCATION is not specified or is null, then the
            comparison is done for global attributes.
        </text>
    </object>
    <object>
        <id>565</id>
        <text>getModifiedAttributePathsOldEntry
            String[] EntryChangedData::getModifiedAttributePathsOldEntry([Category
            location])
            Returns the paths of all attributes in LOCATION that (1) are present in both the old
            entry and the new entry from which this EntryChangedData object was created, and
            (2) contain different data in the old and new entries. It is possible for the same
            attribute to have different attribute paths across the old entry and the new entry, for
            example because a multioccurrence sibling has been deleted. In this case, we return
            the attribute path for the old entry. If LOCATION is not specified or is null, then the
            comparison is done for global attributes.
        </text>
    </object>
    <object>
        <id>566</id>
        <text>getNodeFromEntryNode
            Node EntryNode::getNodeFromEntryNode()
            Returns the Node object for this entry node.
        </text>
    </object>
    <object>
        <id>567</id>
        <text>getOriginalEntry
            Entry Entry::getOriginalEntry()
            Returns the original picture of the entry as stored in the database. If the entry is new
            or deleted, this operation returns null.
        </text>
    </object>
    <object>
        <id>568</id>
        <text>getPipeDelimitedCSVRepresentation
            String Entry::getPipeDelimitedCSVRepresentation()
            Returns a CSV representation of this entry with fields that are name value pairs
            separated by the pipe character. All attribute values have the exact path of the
            attribute with occurrence numbers as the name. All category paths have CATEGORY
            or PATH as the name for items and categories respectively.
        </text>
    </object>
    <object>
        <id>569</id>
        <text>getPossibleEntryNodeValues
            String[] EntryNode::getPossibleEntryNodeValues()
            Returns the possible values of string enumeration, number enumeration, timezone or
            lookuptable entrynode.For other type of entrynodes an empty array would be
            returned.
        </text>
    </object>
    <object>
        <id>570</id>
        <text>getPrimaryKey
            String Entry::getPrimaryKey()
            Returns the primary key value of this entry.
        </text>
    </object>
    <object>
        <id>571</id>
        <text>getRootEntryNode
            EntryNode Entry::getRootEntryNode()
            Return the root entry node for this entry
        </text>
    </object>
    <object>
        <id>572</id>
        <text>getSourceEntrySetForRelatedEntries
            EntrySet Entry::getSourceEntrySetForRelatedEntries(Container filterContainer)
            Returns EntrySet with all entries that have an attribute related to this entry filtering by
            container if filterContainer is provided.
        </text>
    </object>
    <object>
        <id>573</id>
        <text>getXMLRepresentation
            String Entry::getXMLRepresentation()
            Returns an XML representation of this entry with the structure Nodes/Node/Name,
            Nodes/Node/Value, Paths/Path.
        </text>
    </object>
    <object>
        <id>574</id>
        <text>hasInheritedValue
            Boolean EntryNode::hasInheritedValue()
            Returns TRUE if this entry node WOULD inherit some non-null value if set to do so.
        </text>
    </object>
    <object>
        <id>575</id>
        <text>hasNonInheritedValue
            Boolean EntryNode::hasNonInheritedValue()
            Returns TRUE if there is a non-null non-inherited value. The presence or absence of
            inherited values makes no difference.
        </text>
    </object>
    <object>
        <id>576</id>
        <text>isEntryAnItem
            Boolean Entry::isEntryAnItem()
            Returns TRUE if this entry is an Item, FALSE if it is a Category.
        </text>
    </object>
    <object>
        <id>577</id>
        <text>isEntryCheckedOut
            Boolean Entry::isEntryCheckedOut()
            Returns true if the entry is checked out into a collaboration area otherwise it returns
            false.
        </text>
    </object>
    <object>
        <id>578</id>
        <text>isInheriting
            Boolean Item::isInheriting(Category location, String sAttribPath)
            Return true if the item inherits at a location for sAttribPath. The attribute will contain
            an unset value and will support inheritance. Note, no check is made that there is a
            value to inherit.
        </text>
    </object>
    <object>
        <id>579</id>
        <text>populateAllNonPersisted
            Boolean Entry::populateAllNonPersisted()
            Execute non-persisted script for all entrynodes in the entry. Return true if the script
            was completed succesfully, false otherwise
        </text>
    </object>
    <object>
        <id>580</id>
        <text>populateNonPersistedForEntryNode
            Boolean EntryNode::populateNonPersistedForEntryNode()
            Execute non-persisted script for this entrynode. Return true if the script was
            completed succesfully, false otherwise
        </text>
    </object>
    <object>
        <id>581</id>
        <text>previewEntryAttrib
            String Entry::previewEntryAttrib(String sAttribPath)
            Returns the preview string for displaying entry attribute specified by attribute path.
            Returns "" if sAttribPath refers to a non existing attribute or to a non-existing
            multi-occurrence instance
        </text>
    </object>
    <object>
        <id>582</id>
        <text>setEntryAttrib
            void Entry::setEntryAttrib(String sAttribPath, Object sValue)
            Sets the attribute sAttribPath (spec_name/attribute_name) of this entry to sValue.
            Perform optional checks before update if bDoChecks is true.
        </text>
    </object>
    <object>
        <id>583</id>
        <text>setEntryAttribValues
            void Entry::setEntryAttribValues(String sAttribPath, Object[] sValues)
            Sets the values of the multi-value attribute given sAttribPath
            (spec_name/attribute_name) of this entry.
        </text>
    </object>
    <object>
        <id>584</id>
        <text>setEntryNode
            EntryNode EntryNode::setEntryNode(String sPath)
            Return the entryNode with path sPath relative to EntryNode. If the path is not already
            built a NULL will be returned. Use the Entry::setEntryAttrib script operation to create a
            path that might not exist. Deprecated.
        </text>
    </object>
    <object>
        <id>585</id>
        <text>setEntryNodeRelationshipValue
            Integer EntryNode::setEntryNodeRelationshipValue(Catalog relatedItemCtg,
            String sRelatedItemPrimaryKey)
            Set the value of this EntryNode of type RELATIONSHIP to the related item
            represented by the given catalog and primary key. Return 1 if the value was set, 0 if
            nothing changed, and -1 if the item with the PK was not found.
        </text>
    </object>
    <object>
        <id>586</id>
        <text>setEntryNodeRelationshipValueUsingItem
            Integer EntryNode::setEntryNodeRelationshipValueUsingItem(Item relatedItem)
            Set the value of this EntryNode of type RELATIONSHIP to the related item given.
            Return 1 if the value was set, 0 if nothing changed, and -1 if the item with the PK was
            not found.
        </text>
    </object>
    <object>
        <id>587</id>
        <text>setEntryNodeValue
            Integer EntryNode::setEntryNodeValue(Object value)
            Set the value of this EntryNode and return 1 if the value was set, 0 if nothing
            changed, and -1 if there was a type conversion error.
        </text>
    </object>
    <object>
        <id>588</id>
        <text>setEntryRelationshipAttrib
            void Entry::setEntryRelationshipAttrib(String sAttribPath, Catalog
            relatedItemCtg, String sRelatedItemPrimaryKey)
            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
            this entry to the related item represented by the given catalog and primary key
        </text>
    </object>
    <object>
        <id>589</id>
        <text>setEntryRelationshipAttribUsingItem
            void Entry::setEntryRelationshipAttribUsingItem(String sAttribPath, Item
            relatedItem)
            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
            this entry to the related item given
        </text>
    </object>
    <object>
        <id>590</id>
        <text>setEntryStatus
            void Entry::setEntryStatus(String status)
            Sets the status of the entry
        </text>
    </object>
    <object>
        <id>591</id>
        <text>setInheriting
            void Item::setInheriting(Category location, String sAttribPath, [Boolean flag])
            By default or if flag is true, then set an item location's attribute to an unset value or a
            grouping to inheriting, which means that the attribute will inherit at this location. If flag
            is false, then the attribute will not inherit, meaning that the attribute holds a null
            override.
        </text>
    </object>
    <object>
        <id>592</id>
        <text>setPrimaryKey
            void Entry::setPrimaryKey(String value)
            Sets the primary key value of this entry.
        </text>
    </object>
    <object>
        <id>593</id>
        <text>throwValidationError
            void EntryNode::throwValidationError(String errorType[, String errorString])
            Sets up a validation error that shows up in validation errors in the gui and the list of
        </text>
    </object>
    <object>
        <id>594</id>
        <text>errors returned when an entry is saved in a script. ERRORTYPE should be one of
            "UNIQUENESS", "VALIDATION_RULE", "PATTERN", "MIN_OCCURENCE",
            "LENGTH".
        </text>
    </object>
    <object>
        <id>595</id>
        <text>operations_export
        </text>
    </object>
    <object>
        <id>596</id>
        <text>addAllObjectsToExport
            void EnvObjectList::addAllObjectsToExport([String sObjectType, [String
            sActionMode]])
            Notifies that all the entities of specific object type be exported. sObjectType is
            optional. sActionMode is used to specify the action mode in which the object has to
            be exported. It is optional. In case it is not specified, the value set using
            setActionModeForExport() is used. If no action mode has been set,
            CREATE_OR_UPDATE is used. List of acceptable values for sObjectType are:
            "ACG", "ALERT", "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT",
            "CATALOG_VIEW", "COLLABORATION_AREA",
            "COLLABORATION_AREA_CONTENT", "COMPANY_ATTRIBUTES",
            "CONTAINER_ACCESSPRV", "DATASOURCE", "DESTINATION_SPEC",
            "DISTRIBUTION", "DISTRIBUTION_GROUP", "DOC_STORE", "EXPORTS",
            "FEEDS", "FILE_SPEC", "HIERARCHY", "HIERARCHY_CONTENT",
            "HIERARCHY_MAPS", "HIERARCHY_VIEW", "JOBS", "LOOKUP_TABLE",
            "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC", "MAPS",
            "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
            "WEBSERVICE", "WORKFLOW" List of acceptable values for sObjectType are:
            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
        </text>
    </object>
    <object>
        <id>597</id>
        <text>addObjectByNameToExport
            void EnvObjectList::addObjectByNameToExport(String sEntityName[, String
            sObjectType, [String sActionMode]])
            Sets the entity to be exported by specifying the entity name as an argument.
            sObjectType is optional. sActionMode is used to specify the action mode in which the
            object has to be exported. It is optional. In case it is not specified, the value set using
            setActionModeForExport() is used. If no action mode has been set,
            CREATE_OR_UPDATE is used. In case of Catalog and Hierarchy Content export,
            this operation is used to specify the attribute collection associated with the object. In
            case of DocStore partial export, this operation is used to specify the DocStore path.
            List of acceptable values for sObjectType are: "ACG", "ALERT",
            "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT", "CATALOG_VIEW",
            "COLLABORATION_AREA", "COLLABORATION_AREA_CONTENT",
            "COMPANY_ATTRIBUTES", "CONTAINER_ACCESSPRV", "DATASOURCE",
            "DESTINATION_SPEC", "DISTRIBUTION", "DISTRIBUTION_GROUP",
            "DOC_STORE", "EXPORTS", "FEEDS", "FILE_SPEC", "HIERARCHY",
            "HIERARCHY_CONTENT", "HIERARCHY_MAPS", "HIERARCHY_VIEW",
            "ITEM_CATEGORY_MAPS", "JOBS", "LOOKUP_TABLE",
            "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC", "MAPS",
            "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
            "WEBSERVICE", "WORKFLOW" List of acceptable values for sObjectType are:
            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
        </text>
    </object>
    <object>
        <id>598</id>
        <text>exportEnv
            String exportEnv(EnvObjectList envObjList, String sDocFilePath)
            Exports the WebSphere Product Center objects specified in envObjList at the
            specified DocStore path. sDocFilePath is the filepath of the zip file that will be
            exported into the document store - returns the log as a string.
        </text>
    </object>
    <object>
        <id>599</id>
        <text>getCatalogNameToExport
            String EnvObjectList::getCatalogNameToExport()
            Returns the last value set with setCatalogByNameToExport
        </text>
    </object>
    <object>
        <id>600</id>
        <text>getHierarchyNameToExport
            String EnvObjectList::getHierarchyNameToExport()
            Returns the last value set with setHierarchyByNameToExport
        </text>
    </object>
    <object>
        <id>601</id>
        <text>getTypesToExport
            String[] EnvObjectList::getTypesToExport()
            Returns all the object types, set with setTypeToExport, for exporting
        </text>
    </object>
    <object>
        <id>602</id>
        <text>getTypeToExport
            String EnvObjectList::getTypeToExport()
            Returns the last object type set with setTypeToExport
        </text>
    </object>
    <object>
        <id>603</id>
        <text>new$EnvObjectList
            new EnvObjectList()
            Returns a container for the WebSphere Product Center objects to be exported. This
            class is used to add and retrieve the objects to be exported.
        </text>
    </object>
    <object>
        <id>604</id>
        <text>setActionModeToExport
            void EnvObjectList::setActionModeToExport(String sActionMode)
            Sets the default action mode for objects to be exported. The value specified in this
            method can be overridden by specifying the action mode in addAllObjectsToExport()
            or addObjectByNameToExport(). List of acceptable values for sObjectType are:
            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
        </text>
    </object>
    <object>
        <id>605</id>
        <text>setCatalogByNameToExport
            void EnvObjectList::setCatalogByNameToExport(String sCatalog)
            Sets the Catalog whose contents are to be exported
        </text>
    </object>
    <object>
        <id>606</id>
        <text>setHierarchyByNameToExport
            void EnvObjectList::setHierarchyByNameToExport(String sHierarchy)
            Sets the Hierarchy whose contents are to be exported
        </text>
    </object>
    <object>
        <id>607</id>
        <text>setHierarchyMapToExport
            void EnvObjectList::setHierarchyMapToExport(String sourceHierarchy, String
            destHierarchy [,String sActionMode])
            Sets the source and destination Hierarchies whose mappings need to be exported.
            sActionMode is used to specify the action mode in which the object has to be
            exported. It is optional. In case it is not specified, the value set using
            setActionModeForExport() is used. If no action mode has been set,
            CREATE_OR_UPDATE is used. List of acceptable values for sObjectType are:
            "CREATE_OR_UPDATE", "CREATE", "UPDATE", "DELETE"
        </text>
    </object>
    <object>
        <id>608</id>
        <text>setItemCategoryMapToExport
            void EnvObjectList::setItemCategoryMapToExport(String sCatalog, String
            sHierarchy [,String sActionMode)
            Sets the Catalog and Hierarchy whose Item-Category mappings need to be exported
        </text>
    </object>
    <object>
        <id>609</id>
        <text>setTypeToExport
            void EnvObjectList::setTypeToExport(String sObjectType)
            Sets the object type to be exported. List of acceptable values for sObjectType are:
            "ACG", "ALERT", "ATTRIBUTE_COLS", "CATALOG", "CATALOG_CONTENT",
            "CATALOG_VIEW", "COLLABORATION_AREA",
            "COLLABORATION_AREA_CONTENT", "COMPANY_ATTRIBUTES",
            "CONTAINER_ACCESSPRV", "DATASOURCE", "DESTINATION_SPEC",
            "DISTRIBUTION", "DISTRIBUTION_GROUP", "DOC_STORE", "EXPORTS",
        </text>
    </object>
    <object>
        <id>610</id>
        <text>"FEEDS", "FILE_SPEC", "HIERARCHY", "HIERARCHY_CONTENT",
            "HIERARCHY_MAPS", "HIERARCHY_VIEW", "ITEM_CATEGORY_MAPS", "JOBS",
            "LOOKUP_TABLE", "LOOKUP_TABLE_CONTENT", "LOOKUP_TABLE_SPEC",
            "MAPS", "MY_SETTINGS", "PRIMARY_SPEC", "QUEUE", "REPORTS", "ROLES",
            "ROLE_LOCALE_ACCESS" "SELECTION", "SCRIPT_INPUT_SPEC",
            "SECONDARY_SPEC", "SPEC", "SUB_SPEC", "UDL", "UDL_CONTENT", "USERS",
            "WEBSERVICE", "WORKFLOW"
        </text>
    </object>
    <object>
        <id>611</id>
        <text>operations_import
        </text>
    </object>
    <object>
        <id>612</id>
        <text>createExport
            String createExport(String marketSpecName, String catalogName, String
            specMapName, String exportScriptName, String syndicationName, [HashMap
            optionalArgs])
            Creates the Export with given params. An optional parameter "charsetName", which
            may be set in the "optionalArgs" parameter, describes the file encoding of the export.
            Otherwise, the Cp1252 is chosen as the default file encoding. Returns Done if
            successful, Error if not. Here is a complete list of the optional arguments which may
            be set in the "optionalArgs" parameter: String approverUserName, String
            charsetName, String distributionName, String distributionGroupName, String
            selectionName, String synType, String diffType,String sParamsDocPath. The
            distributionName and distributionGroupName can be a list of distribution names
            delimited by the string returned by
            getStringValueForClassMember("com.ibm.ccd.common.util.Const",
            "CATEGORY_PATH_DELIMITER")
        </text>
    </object>
    <object>
        <id>613</id>
        <text>createImport
            String createImport(String sImportName, String sImportType, String
            sSourceName, String sFileSpecName, String sCatalogName, String
            sSpecMapName, String sCategoryTreeName, String sScriptName, String
            sACGName, [HashMap optionalArgs])
            Creates the Feed with given params. An optional argument "sCharsetName", which
            may be defined in the optionalArgs HashMap, describes the file encoding of the feed.
            Otherwise, Cp1252 is chosen as the default file encoding. Also, optional parameters
            to describe if the current container is a collaboration area, and the step path of the
            workflow step in to which the feed is to be done, could be specified. Returns Done if
            successful, Error if not. The complete list of optional arguments, which may be set in
            the optionalArgs parameter, is as follows: String sCharsetName, Boolean
            bIsCollaborationArea, String sWflStepPath, String sParamsDocPath, String
            sImportSemantic, and String sApproverUserName.
        </text>
    </object>
    <object>
        <id>614</id>
        <text>disableBatchProcessingForItems
            void disableBatchProcessingForItems()
            Sets up the import to not process items in bulk. This used to be achieved in earlier
            releases by setting up an import on a catalog different than the one the user wanted
            to import into.
        </text>
    </object>
    <object>
        <id>615</id>
        <text>loadImport
            String loadImport(String sImportName, String sPath)
            Loads file from the given DocStore path into the given Import. Returns Done if
            successful, Error if not.
        </text>
    </object>
    <object>
        <id>616</id>
        <text>startAggregationByName
            void startAggregationByName(String sName, String sDocPath)
            Run the feed called sName on the file sDocPath
        </text>
    </object>
    <object>
        <id>617</id>
        <text>startExportByName
            Boolean startExportByName(String sName)
        </text>
    </object>
    <object>
        <id>618</id>
        <text>Run the export called sName. Returns TRUE if success.
        </text>
    </object>
    <object>
        <id>619</id>
        <text>operations_import
        </text>
    </object>
    <object>
        <id>620</id>
        <text>importEnv
            String importEnv(String sDocFilePath, [bFromFileSystem])
            Imports the content of the archive in the docstore at sDocFilePath into this company.
            Returns the log as a String. WARNING: Transactional disruption will occur: This
            script operation will disrupt the current transaction - resulting in possible commit or
            rollback of prior data. The transactional state on completion is not guaranteed. This
            script operation should not be used inside a useTransaction or catchError block. This
            operation is very disruptive to a WPC company and should not be used on a live
            system.
        </text>
    </object>
    <object>
        <id>621</id>
        <text>operations_item
        </text>
    </object>
    <object>
        <id>622</id>
        <text>buildCtgItem
            (deprecated) see new$CtgItem
        </text>
    </object>
    <object>
        <id>623</id>
        <text>cloneItem
            Item Item::cloneItem()
            Create and return a clone of this item.
        </text>
    </object>
    <object>
        <id>624</id>
        <text>deleteCtgItem
            void deleteCtgItem(Item itm)
            Delete the catalog item itm
        </text>
    </object>
    <object>
        <id>625</id>
        <text>displayCtgItemAttrib
            String Item::displayCtgItemAttrib(String sAttribPath)
            Returns the html string for displaying item attribute specified by attribute path
        </text>
    </object>
    <object>
        <id>626</id>
        <text>getAvailableLocations
            CategorySet Item::getAvailableLocations(Object locationOrCategoryTree)
            Returns CategorySet of available locations.
        </text>
    </object>
    <object>
        <id>627</id>
        <text>getCatalog
            Catalog Item::getCatalog() | Catalog SearchResultSet::getCatalog([int
            columnIndex])
            Return the catalog object this item belongs to, or return the value of the designated
            column in the current row of this SearchResultSet object as a Catalog.
        </text>
    </object>
    <object>
        <id>628</id>
        <text>getCtgItemAllCategories
            Category[] Item::getCtgItemCategories()
            (Deprecated) See getCtgItemCategories. Return the all categories this item is
            mapped to,
        </text>
    </object>
    <object>
        <id>629</id>
        <text>getCtgItemAtOldVersion
            Item Item::getCtgItemAtOldVersion()
            Returns the old version of the item in the differences syndication.
        </text>
    </object>
    <object>
        <id>630</id>
        <text>getCtgItemAttrib
            Object Item::getCtgItemAttrib(String sAttribPath)
            Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
            item
        </text>
    </object>
    <object>
        <id>631</id>
        <text>getCtgItemAttribByPk
            Object Catalog::getCtgItemAttribByPk(String pk, String sAttribPath)
        </text>
    </object>
    <object>
        <id>632</id>
        <text>Returns the value of the attribute sAttribPath (spec_name/attribute_name) of this
            item
        </text>
    </object>
    <object>
        <id>633</id>
        <text>getCtgItemAttribNamesList
            String[] Item::getCtgItemAttribNamesList([Boolean bAllAttributes])
            Returns an array of String containing the attribute name of all the attributes of this
            item (optional parameter allows option exclude categorySpecificAttribute - true by
            default)
        </text>
    </object>
    <object>
        <id>634</id>
        <text>getCtgItemAttribsForKeys
            String Item::getCtgItemAttribsForKeys (Object[] aAttribs [, String sDelimiter])
            Gets the attributes for an item based upon the passed Object[] (declared: var aAttribs
            = [];) of attribute keys (paths). The resultant values are loaded into the value pair of
            the aAttribs mapping. By specifying the delimiter parameter, in addition to populating
            aAttribs mapping the operation returns a CSV string representation of the retrieved
            values separated by the delimiter character.
        </text>
    </object>
    <object>
        <id>635</id>
        <text>getCtgItemAttribsList
            String[] Item::getCtgItemAttribsList()
            Returns an array of String containing the paths (spec_name/attribute_name) of all the
            attributes of this item
        </text>
    </object>
    <object>
        <id>636</id>
        <text>getCtgItemAttributeNewValue
            (deprecated) use Item::getCtgItemAttrib()
        </text>
    </object>
    <object>
        <id>637</id>
        <text>getCtgItemAttributeOldValue
            (deprecated) use Item::getCtgItemAtOldVersion()
        </text>
    </object>
    <object>
        <id>638</id>
        <text>getCtgItemCategories
            Category[] Item::getCtgItemCategories([String catTreeName] [, CategoryCache
            catCache])
            Return the categories this item is mapped to. If catTreeName is given, returns the
            categories within that ctr only (use the default category tree if no category tree is
            passed). Also, can use an optional CategoryCache passed in catCache
        </text>
    </object>
    <object>
        <id>639</id>
        <text>getCtgItemCategoryPaths
            String[] Item::getCtgItemCategoryPaths(String sPathDelimiter, [Boolean
            bWithRoot], [CategoryTree ctr])
            Returns an array of delimited strings of the category paths this item belongs to. If ctr
            is given, returns the paths of the categories within that ctr only.
        </text>
    </object>
    <object>
        <id>640</id>
        <text>getCtgItemCategoryPathsForPrimaryKey
            String[] Catalog::getCtgItemCategoryPathsForPrimaryKey(String sPrimaryKey,
            String sPathDelimiter, [Boolean bWithRoot], [CategoryTree ctr])
            Returns an array of delimited strings of the category paths for the item with
            sPrimaryKey in Catalog. If ctr is given, returns the paths of the categories within that
            ctr only
        </text>
    </object>
    <object>
        <id>641</id>
        <text>getCtgItemCatSpecificAttribsList
            String[] Item::getCtgItemCatSpecificAttribsList()
            Returns an array of String containing the paths (spec_name/attribute_name) of all the
            category specific attributes of this item
        </text>
    </object>
    <object>
        <id>642</id>
        <text>getCtgItemDiffStatus
            String Item::getCtgItemDiffStatus()
            For content difference syndications, returns this item''s difference status (A, M, D, U)
        </text>
    </object>
    <object>
        <id>643</id>
        <text>getCtgItemId
            Integer Item::getCtgItemId()
        </text>
    </object>
    <object>
        <id>644</id>
        <text>Returns this item's Id
        </text>
    </object>
    <object>
        <id>645</id>
        <text>getCtgItemMappedAttrib
            String Item::getCtgItemMappedAttrib(String sAttribMappedPath)
            Returns the value of the attribute mapped to/from sAttribMappedPath
            (mapped_spec_name/attribute_name) of this item
        </text>
    </object>
    <object>
        <id>646</id>
        <text>getCtgItemMappedAttribs
            HashMap Item::getCtgItemMappedAttribs()
            Returns a HashMap with the mapped attributes values indexed by their path
            (mapped_spec_name/attribute_name) of this item
        </text>
    </object>
    <object>
        <id>647</id>
        <text>getCtgItemMappedAttribsList
            String[] Item::getCtgItemMappedAttribsList()
            Returns an array of String containing the paths
            (mapped_spec_name/attribute_name) of all the mapped attributes of this item
        </text>
    </object>
    <object>
        <id>648</id>
        <text>getCtgItemOrganizations
            Organization[] Item::getCtgItemOrganizations()
            Return the all organizations this item is mapped to,
        </text>
    </object>
    <object>
        <id>649</id>
        <text>getCtgItemOrganizations
            Organization[] Item::getCtgItemOrganizations()
            Return the all organizations this item is mapped to,
        </text>
    </object>
    <object>
        <id>650</id>
        <text>getCtgItemPrimaryKey
            String Item::getCtgItemPrimaryKey()
            Returns this item's primary key value
        </text>
    </object>
    <object>
        <id>651</id>
        <text>getErrorsForLocation
            [ValidationError[] LocationErrors::getErrorsForLocation ()
            [Returns the validation errors for the current location errors. There will be at least one
            validation error.
        </text>
    </object>
    <object>
        <id>652</id>
        <text>getExitValue
            String Entry::getExitValue()
            Returns the exit value, if set, of an entry in a workflow step. Assumed to be called
            from an IN(), OUT(), or TIMEOUT() step script function.
        </text>
    </object>
    <object>
        <id>653</id>
        <text>getGlobalErrors
            ValidationError[] EntryValidationErrors::getGlobalErrors ()
            Returns the validation errors for the global attributes. Will return an empty array if no
            such errors exists.
        </text>
    </object>
    <object>
        <id>654</id>
        <text>getItemRootEntryNodeForLocation
            EntryNode Item::getItemRootEntryNodeForLocation(Category location)
            Returns the root EntryNode for this item at the given location.
        </text>
    </object>
    <object>
        <id>655</id>
        <text>getItemRootEntryNodesHavingLocationData
            EntryNode[] Item::getItemRootEntryNodesHavingLocationData()
            Returns a list of EntryNodes, each is a root entryNode per location that has data
            defined.
        </text>
    </object>
    <object>
        <id>656</id>
        <text>getItemStatus
            String Item::getItemStatus()
            Return UNKNOWN, ADDED, MODIFIED, DELETED
        </text>
    </object>
    <object>
        <id>657</id>
        <text>getItemXMLRepresentation
            String Item::getItemXMLRepresentation(Spec spec, boolean
        </text>
    </object>
    <object>
        <id>658</id>
        <text>includePrimaryKeyValue[, String dateFormat])
            Returns the XML representation of this item which is specific to the given spec. This
            representation can be consumed by the XML parser in the WPS portion of the WPC
            and WPS integration
        </text>
    </object>
    <object>
        <id>659</id>
        <text>getLinkedItemForNode
            Item Item::getLinkedItemForNode(String node_path)
            Returns the linked item associated with the specified node.
        </text>
    </object>
    <object>
        <id>660</id>
        <text>getLinkedItems
            Hashmap[] Item::getLinkedItems()
            Returns a list containing a Hashmap for each item linked to this item's primary key.
            Keys in the HashMap include "item_key","item_id","catalog_id", and "catalog_name".
        </text>
    </object>
    <object>
        <id>661</id>
        <text>getLocationErrors
            LocationErrors[] EntryValidationErrors::getLocationErrors ()
            Returns the locations errors for locations having validation errors. Will return an
            empty array if no such errors exists.
        </text>
    </object>
    <object>
        <id>662</id>
        <text>getLocationForErrors
            ICategory LocationErrors::getLocationForErrors ()
            Returns the category associted with the current location errors.
        </text>
    </object>
    <object>
        <id>663</id>
        <text>getLocationsHavingData
            CategorySet Item::getLocationsHavingData(Object locationOrCategoryTree)
            Returns the category set of locations for which this entry has location specific
            attributes defined under the specified location or category tree..
        </text>
    </object>
    <object>
        <id>664</id>
        <text>getOriginalItem
            Item Item::getOriginalItem()
            Returns the original picture of the item before modification. Deprecated. Please use
            Entry::getOriginalEntry
        </text>
    </object>
    <object>
        <id>665</id>
        <text>getValidationErrorEntryNode
            EntryNode ValidationError::getValidationErrorEntryNode()
            Return the EntryNode associated with this ValidationError
        </text>
    </object>
    <object>
        <id>666</id>
        <text>getValidationErrorMsg
            String ValidationError::getValidationErrorMsg()
            Return the error message associated with this ValidationError
        </text>
    </object>
    <object>
        <id>667</id>
        <text>getValidationErrorType
            String ValidationError::getValidationErrorType()
            Return the type associated with this ValidationError
        </text>
    </object>
    <object>
        <id>668</id>
        <text>initializeKeyValueMapping
            Object[] initializeKeyValueMapping(Object[] aKeyset)
            Create a linked hash map.
        </text>
    </object>
    <object>
        <id>669</id>
        <text>isCtgItemMappedToCategories
            Boolean Item::isCtgItemMappedToCategories([CategoryTree ctr])
            Returns true if the item is mapped to categories. If the optional argument ctr is given,
            returns true if the item is mapped to a category in ctr.
        </text>
    </object>
    <object>
        <id>670</id>
        <text>isItemAvailableInLocation
            Boolean Item::isItemAvailableInLocation(Category location)
            Returns true if item is mapped to the given location in the specified category tree.
        </text>
    </object>
    <object>
        <id>671</id>
        <text>locationHasData
        </text>
    </object>
    <object>
        <id>672</id>
        <text>Boolean Item::locationHasData(Category location)
            Returns true if the location has data.
        </text>
    </object>
    <object>
        <id>673</id>
        <text>makeItemAvailableInLocation
            void Item::makeItemAvailableInLocation(Category location, [Boolean
            bRecursive])
            Makes this item available in a given location. Available means that an item can have
            location data for the given location. If bRecursive is true than make item available in
            all descendent locations.
        </text>
    </object>
    <object>
        <id>674</id>
        <text>makeItemAvailableInLocations
            void Item::makeItemAvailableInLocations(Category[] locations, [Boolean
            bRecursive])
            Makes this item available in the given locations. Available means that an item can
            have location data for the given location. If bRecursive is true than make item
            available in all descendent locations.
        </text>
    </object>
    <object>
        <id>675</id>
        <text>makeItemUnavailableInLocation
            void Item::makeItemUnavailableInLocation(Category location, [Boolean
            bRecursive])
            Makes this item unavailable in a given location. If bRecursive is true than make item
            unavailable in all descendent locations.
        </text>
    </object>
    <object>
        <id>676</id>
        <text>makeItemUnavailableInLocations
            void Item::makeItemUnavailableInLocations(Category[] locations, [Boolean
            bRecursive])
            Makes this item unavailable in the given locations. If bRecursive is true then make
            item unavailable in all descendent locations.
        </text>
    </object>
    <object>
        <id>677</id>
        <text>mapCtgItemToCategory
            void Item::mapCtgItemToCategory(Category category, [Boolean addToPicture],
            [Boolean validateCategory])
            Map this item to this category. If optional boolean addToPicture is false, the
            secondary specs will not be associated and cannot be set; useful for performance. If
            optional boolean validateCategory is true and the category's hierarchy does not have
            the VALIDATION_RULES option disabled, the mapping will only occur if the category
            passes validation. Validation is false by default.
        </text>
    </object>
    <object>
        <id>678</id>
        <text>mapCtgItemToOrganizations
            void Item::mapCtgItemToOrganizations(Category[] organizations [, boolean
            bAdd])
            Maps the item to all the organizations provided. If bAdd is true, the old mappings are
            added to otherwise they are overwritten to be the new set of organizations.
            Deprecated--Call moveCtgItemToCategories
        </text>
    </object>
    <object>
        <id>679</id>
        <text>moveCtgItemToCategories
            void Item::moveCtgItemToCategories(Category[] categories), [, boolean bAdd])
            Move item from existing categories to new set of categories, if bAdd is true, then
            category mappings will be added.
        </text>
    </object>
    <object>
        <id>680</id>
        <text>new$CtgItem
            new CtgItem(String sCtgName/Catalog ctg], [Boolean bRunEntryBuildScript],
            [Boolean bBuildNonPersisted], [Boolean bBuildEmptyEntryPicture])
            Returns a new item object. The argument can be a catalog name or a catalog object.
            The argument being a catalog object allows the propagation of attribute collections to
            process settings etc. to new items being built with this operation. If no catalog
            name/object is provided, then the default catalog from the current script context is
            used. bRunEntryBuildScript or bBuildNonPersisted should be set to false to disable
            the default behavior of this script operation to run the entry build script or build the
        </text>
    </object>
    <object>
        <id>681</id>
        <text>non-persisted attributes respectively for this new item.
        </text>
    </object>
    <object>
        <id>682</id>
        <text>removeCtgItemFromCategory
            void Item::removeCtgItemFromCategory(Category category)
            Remove mapping from this item to this category, if the mapping exists.
        </text>
    </object>
    <object>
        <id>683</id>
        <text>saveCtgItem
            EntryValidationErrors Item::saveCtgItem()
            Saves the item and returns the EntryValidationErrors object. Use operations
            EntryValidationErrors::getGlobalErrors() and
            EntryValidationErrors::getLocationErrors() to get the validation errors that may have
            prevented the save. WARNING: Transactional disruption will occur: When used in an
            import script, this script operation will commit any existing transaction, and will open a
            new transaction if a transaction did exist. This script operation should be used
            carefully; for example, it should not be called in a catchError block.
        </text>
    </object>
    <object>
        <id>684</id>
        <text>setCtgItemAttrib
            boolean Item::setCtgItemAttrib(String sAttribPath, Object sValue)
            Sets the attribute sAttribPath (spec_name/attribute_name) of this item to sValue.
            Returns true if it was set succesfully. Returns false if operation failed to set, or if old
            and new values are same
        </text>
    </object>
    <object>
        <id>685</id>
        <text>setCtgItemMappedAttrib
            void Item::setCtgItemMappedAttrib(String sAttribPath, Object oValue)
            Sets the attribute mapped to/from sAttribMappedPath
            (mapped_spec_name/attribute_name) of this item to sValue
        </text>
    </object>
    <object>
        <id>686</id>
        <text>setCtgItemMappedAttribs
            void Item::setCtgItemMappedAttribs(HashMap hmPathValue, [SpecMap
            specmap])
            Set the attributes of this item: hmPathValue should contain (path_y, value_x)'s; the
            item attribute path_x receives value_x if path_y is mapped to path_x in specmap - if
            no spec map is specified, the specmap of the import is being used.
        </text>
    </object>
    <object>
        <id>687</id>
        <text>setCtgItemPrimaryKey
            void Item::setCtgItemPrimaryKey(String pk)
            Sets this item's primary key value
        </text>
    </object>
    <object>
        <id>688</id>
        <text>setCtgItemRelationshipAttrib
            void Item::setCtgItemRelationshipAttrib(String sAttribPath, Catalog
            relatedItemCtg, String sRelatedItemPrimaryKey)
            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
            this item to the related item represented by the given catalog and primary key
        </text>
    </object>
    <object>
        <id>689</id>
        <text>setCtgItemRelationshipAttribUsingItem
            void Item::setCtgItemRelationshipAttribUsingItem(String sAttribPath, Item
            relatedItem)
            Sets the attribute sAttribPath (spec_name/attribute_path) of type RELATIONSHIP of
            this item to the related item given
        </text>
    </object>
    <object>
        <id>690</id>
        <text>setExitValue
            Entry::setExitValue(String exitValue)
            Set the exit value of an entry in a workflow step. Assumed to be called from an IN(),
            OUT(), or TIMEOUT() step script function.
        </text>
    </object>
    <object>
        <id>691</id>
        <text>setIgnoreCategorySpecificAttributes
            void Item::setIgnoreCategorySpecificAttributes(Boolean bIgnore)
            Set whether or not category specific attributes should be processed for the item
        </text>
    </object>
    <object>
        <id>692</id>
        <text>setItemAttributesFromXMLRepresentation
            void Item::setItemAttributesFromXMLRepresentation(String xmlStr [,String
            dateFormat)
            Updates this item based upon an XML representation which is created by the XML
            parser in the WPS portion of the WPC and WPS integration
        </text>
    </object>
    <object>
        <id>693</id>
        <text>setItemLocationAttrib
            void Item::setItemLocationAttrib(Category location, String sAttribPath, Object
            sValue)
            Sets the attribute sAttribPath (spec_name/attribute_name) of this item for the given
            location to sValue.
        </text>
    </object>
    <object>
        <id>694</id>
        <text>validateMappedAttribs
            HashMap validateMappedAttribs(HashMap hmPathValue, [SpecMap specmap])
            Validate a set of attribute values indexed by their mapped path against the
            destination spec
        </text>
    </object>
    <object>
        <id>695</id>
        <text>operations_jms
        </text>
    </object>
    <object>
        <id>696</id>
        <text>jmsCreateTextMsg
            JMSMessage QueueSession::jmsCreateTextMsg(String msgText)
            Creates a new JMS TextMessage using QueueSession information with the text
            provided.
        </text>
    </object>
    <object>
        <id>697</id>
        <text>jmsDisconnect
            void QueueSession::jmsDisconnect(QueueConnection qcon)
            Disconnects from the given queue manager.
        </text>
    </object>
    <object>
        <id>698</id>
        <text>jmsGetConnectionFactory
            QueueConnectionFactory Context::jmsGetConnectionFactory(String
            jmsFactory)
            Creates and returns a jms connection factory with the specified context.
        </text>
    </object>
    <object>
        <id>699</id>
        <text>jmsGetContext
            Context jmsGetContext(String url, String jndiFactory)
            Creates a JMS context.
        </text>
    </object>
    <object>
        <id>700</id>
        <text>jmsGetMessageCorrelationID
            String JMSMessage::jmsGetMessageCorrelationID()
            Returns a string containing Correlation Id for the JMS message.
        </text>
    </object>
    <object>
        <id>701</id>
        <text>jmsGetMessageID
            String JMSMessage::jmsGetMessageID()
            Returns a string containing the JMS message id.
        </text>
    </object>
    <object>
        <id>702</id>
        <text>jmsGetMessageProperties
            HashMap JMSMessage::jmsGetMessageProperties()
            Returns a hashmap from string property names to string values for those priorities.
        </text>
    </object>
    <object>
        <id>703</id>
        <text>jmsGetMQConnectionFactory
            QueueConnectionFactory jmsGetMQConnectionFactory(String
            mqQueueManager, String mqHostname, String mqChannel, Integer mqPort)
            Creates and returns a jms connection factory for communicating with MQ queues.
            Note that you do not need a Context to get an MQ connection factory whereas you
            need a Context for connecting to other JMS queues.
        </text>
    </object>
    <object>
        <id>704</id>
        <text>jmsGetQueue
            javax.jms.Queue QueueSession::jmsGetQueue(String name)
        </text>
    </object>
    <object>
        <id>705</id>
        <text>(DEPRECATED: use jmsGetQueueByName() instead). Returns a javax.jms.Queue
            object from the given QueueSession. NAME identifies the desired queue in a
            vendor-specific format.
        </text>
    </object>
    <object>
        <id>706</id>
        <text>jmsGetQueueByName
            javax.jms.Queue jmsGetQueueByName(Context ctx, String name)
            Returns a javax.jms.Queue object from the given JNDI Name and Context.
        </text>
    </object>
    <object>
        <id>707</id>
        <text>jmsGetQueueConnection
            QueueConnection QueueConnectionFactory::jmsGetQueueConnection([String
            username], [String password])
            Returns a JMS queue connection from the given connection factory. Uses the
            username and password supplied, or if no username or password is supplied, uses
            the defaults in common.properties if they exist, otherwise attempts to connect as the
            user running WebSphere Product Center.
        </text>
    </object>
    <object>
        <id>708</id>
        <text>jmsGetQueueSession
            QueueSession QueueConnection::jmsGetQueueSession()
            Returns a JMS queue session from the given connection factory.
        </text>
    </object>
    <object>
        <id>709</id>
        <text>jmsGetTextFromMsg
            String JMSMessage::jmsGetTextFromMsg()
            Returns a string containing the entire content of a JMS message, including headers.
        </text>
    </object>
    <object>
        <id>710</id>
        <text>jmsReceiveMsg
            JMSMessage QueueSession::jmsReceiveMsg(String queueName, Integer
            timeout[, String messageSelector, JMSMessage messageToReceiveReplyFor,
            Context ctx])
            (METHOD DEPRECATED. Use jmsReceiveMsgFromQueue() instead). Receives a
            JMS Message. Times out after TIMEOUT milliseconds. If INBOUNDQUEUE is not
            null, looks on that queue. If ctx is provided, INBOUNDQUEUE is assumed to be a
            JNDI name: otherise INBOUNDQUEUE is assumed to be a queue name in
            vendor-specific format. If INBOUNDQUEUE is null, and
            MESSAGETORECEIVEREPLYFOR is not null, looks on the queue defined in the
            "Reply-To" field of MESSAGETORECEIVEREPLYFOR. If INBOUNDQUEUE is null
            and MESSAGETORECEIVEREPLYFOR is null, throws an AustinException. We now
            know which queue will be used. If MESSAGESELECTOR and
            MESSAGETORECEIVEREPLYFOR are both null, selects the first message from that
            queue. Otherwise selects the first message from the queue (if any) fulfilling all of the
            conditions defined by MESSAGESELECTOR and
            MESSAGETORECEIVEREPLYFOR. If MESSAGETORECEIVEREPLYFOR is not
            null, rejects any message not having a correlation ID equal to
            MESSAGETORECEIVEREPLYFOR's message ID. If MESSAGESELECTOR is not
            null, rejects any message not fulfilling the condition defined in messageSelector. If no
            appropriate message is found, returns null.
        </text>
    </object>
    <object>
        <id>711</id>
        <text>jmsReceiveMsgFromQueue
            JMSMessage QueueSession::jmsReceiveMsgFromQueue(javax.jms.Queue
            queue, Integer timeout[, String messageSelector, JMSMessage
            messageToReceiveReplyFor])
            Receives a JMS Message. Times out after TIMEOUT milliseconds. If
            INBOUNDQUEUE is not null, looks on that queue. If INBOUNDQUEUE is null, and
            MESSAGETORECEIVEREPLYFOR is not null, looks on the queue defined in the
            "Reply-To" field of MESSAGETORECEIVEREPLYFOR. If INBOUNDQUEUE is null
            and MESSAGETORECEIVEREPLYFOR is null, throws an AustinException. We now
            know which queue will be used. If MESSAGESELECTOR and
            MESSAGETORECEIVEREPLYFOR are both null, selects the first message from that
            queue. Otherwise selects the first message from the queue (if any) fulfilling all of the
            conditions defined by MESSAGESELECTOR and
            MESSAGETORECEIVEREPLYFOR. If MESSAGETORECEIVEREPLYFOR is not
        </text>
    </object>
    <object>
        <id>712</id>
        <text>null, rejects any message not having a correlation ID equal to
            MESSAGETORECEIVEREPLYFOR's message ID. If MESSAGESELECTOR is not
            null, rejects any message not fulfilling the condition defined in messageSelector. If no
            appropriate message is found, returns null.
        </text>
    </object>
    <object>
        <id>713</id>
        <text>jmsSendMsg
            JMSMessage QueueSession::jmsSendMsg(JMSMessage msg, String
            queueName[, HashMap properties, JMSMessage messageToReplyTo, Context
            ctx])
            (METHOD DEPRECATED. Use jmsSendMsgToQueue() instead). Sends message
            MSG and returns MSG or null. The message is sent to the queue specified by
            OUTBOUNDQUEUE, unless OUTBOUNDQUEUE is null. If ctx is provided,
            OUTBOUNDQUEUE is assumed to be a JNDI name. If ctx is not provided,
            OUTBOUNDQUEUE is assumed to be a queue name in vendor-specific format. If
            OUTBOUNDQUEUE is null, MSG is sent to the reply-to queue of
            MESSAGETOREPLYTO, if MESSAGETOREPLYTO is provided. If
            OUTBOUNDQUEUE is null and MESSAGETOREPLYTO is not provided, throws an
            AustinException. If MESSAGETOREPLYTO is provided, the message id is read from
            it. PROPERTIES is a map from string keys to string values. There is one special
            (non-JMS) key: "TRIGO_INCOMING_REPLY_QUEUE".
            "TRIGO_INCOMING_REPLY_QUEUE" indicates the queue name to which an
            external application should send replies to this message. If ctx is provided, the value
            of "TRIGO_INCOMING_REPLY_QUEUE" is assumed to be a JNDI name: otherwise
            it is assumed to be a queue name in vendor-specific format.
        </text>
    </object>
    <object>
        <id>714</id>
        <text>jmsSendMsgToQueue
            JMSMessage QueueSession::jmsSendMsgToQueue(JMSMessage msg,
            javax.jms.Queue outboundQueue [, HashMap properties, JMSMessage
            messageToReplyTo,])
            Sends message MSG and returns MSG or null. The message is sent to the queue
            specified by OUTBOUNDQUEUE, unless OUTBOUNDQUEUE is null. If
            OUTBOUNDQUEUE is null, MSG is sent to the reply-to queue of
            MESSAGETOREPLYTO, if MESSAGETOREPLYTO is provided. If
            OUTBOUNDQUEUE is null and MESSAGETOREPLYTO is not provided, throws an
            AustinException. If MESSAGETOREPLYTO is provided, the message id is read from
            it. PROPERTIES is a map of string keys to string values with a single key value that
            is acted on. This special (non-JMS) key is "TRIGO_INCOMING_REPLY_QUEUE"
            whose value is the javax.jms.Queue object to which an external application should
            send the replies to this message.
        </text>
    </object>
    <object>
        <id>715</id>
        <text>jmsSetMessageText
            void JMSMessage::jmsSetMessageText(String msgText)
            Sets the provided text for the JMS TextMessage. Only JMS TextMessage type is
            supported.
        </text>
    </object>
    <object>
        <id>716</id>
        <text>operations_lkp
        </text>
    </object>
    <object>
        <id>717</id>
        <text>addRow
            Boolean LookupTable::addRow(String sKey, String sValue), Boolean
            LookupTable::addRow(String sKey, String[] asValues)
            Add a new row to this lookup table - with value(s) sValue/asValues for the key sKey.
            Returns TRUE if and only if the add was successful.
        </text>
    </object>
    <object>
        <id>718</id>
        <text>addRowByOrder
            Boolean LookupTable::addRowByOrder(String sKey, String sValue), void
            LookupTable::addRow(String sKey, String[] asValues)
            Add a new row to this lookup table - with value(s) sValue/asValues for the key sKey
        </text>
    </object>
    <object>
        <id>719</id>
        <text>containsUsingLookupTable
            Boolean String::containsUsingLookupTable(LookupTable lkp)
            Return true if and only if the string contains at least one of the keys from the lookup
            table
        </text>
    </object>
    <object>
        <id>720</id>
        <text>deleteLookupTable
            deleteLookuptable(LookupTable lkp)
            Delete the lookup table lkp. WARNING: Transactional disruption will occur: This
            script operation will roll back any existing transaction, and will leave the database
            connection in auto-commit. This script operation should be used carefully; for
            example, it should not be called in a catchError block.
        </text>
    </object>
    <object>
        <id>721</id>
        <text>getKeysFromValues
            String[] LookupTable::getKeysFromValues(String[] values)
            Reverse lookup of keys using values from the lookup table. The values can either be
            Paths in the Spec or the column number of the lookup table starting from 0 and not
            including the Key column.
        </text>
    </object>
    <object>
        <id>722</id>
        <text>getLkpByName
            LookupTable getLkpByName(String name, [Boolean isReadOnly])
            Returns the lookup table object with the corresponding name. By default the lookup
            table is read-only, but can be made mutable by setting the isReadOnly parameter to
            false.
        </text>
    </object>
    <object>
        <id>723</id>
        <text>getLkpId
            Integer LookupTable::getLkpId()
            Return the id of this lookup table.
        </text>
    </object>
    <object>
        <id>724</id>
        <text>getLkpKeys
            String[] LookupTable::getLkpKeys()
            Return the keys of this lookup table
        </text>
    </object>
    <object>
        <id>725</id>
        <text>lookup
            String lookup(String sLookupTableName, String sKey [, String sSecKey]),
            String lookup(LookupTable lkp, String sKey [, String sSecKey])
            Returns the sSecKey-th value for sKey in the lookup table sLookupTableName or lkp
        </text>
    </object>
    <object>
        <id>726</id>
        <text>lookupValues
            String[] lookupValues(LookupTable lkp, String sKey)
            Returns values for sKey in the lookup table lkp
        </text>
    </object>
    <object>
        <id>727</id>
        <text>put
            void put(String sLkpTableName, String sStartKey, String sValue), void
            put(String sLkpTableName, String sStartKey, String[] asValues)
            Put a new row in the lookup table sLkpTableName
        </text>
    </object>
    <object>
        <id>728</id>
        <text>replaceUsingLookupTable
            String String::replaceUsingLookupTable(LookupTable lkp)
            Return a string in which any substring matching a key in the lookup table is replace
            by the corresponding value
        </text>
    </object>
    <object>
        <id>729</id>
        <text>operations_locale
        </text>
    </object>
    <object>
        <id>730</id>
        <text>addToCompanyLocales
            void addToCompanyLocales(Locale []companyLocales)
            Adds the given locales to the list of locales that are defined for the company.
        </text>
    </object>
    <object>
        <id>731</id>
        <text>getCompanyLocales
        </text>
    </object>
    <object>
        <id>732</id>
        <text>Locale[] getCompanyLocales()
            Returns the locales that are part of the current company
        </text>
    </object>
    <object>
        <id>733</id>
        <text>getCustomMessage
            String getCustomMessage(String id, [Locale loc])
            Given message id (and locale), returns description of the message.
        </text>
    </object>
    <object>
        <id>734</id>
        <text>getDefaultACGName
            String getDefaultACGName()
            Returns the name of default ACG in the current company
        </text>
    </object>
    <object>
        <id>735</id>
        <text>getDefaultAttrCollectionName
            String getDefaultAttrCollectionName(String specName)
            Returns the name of default lookup table hierarchy in the current company
        </text>
    </object>
    <object>
        <id>736</id>
        <text>getDefaultCharset
            Locale getDefaultCharset()
            Returns default charset of the current company
        </text>
    </object>
    <object>
        <id>737</id>
        <text>getDefaultLktHierarchyName
            String getDefaultLktHierarchyName()
            Returns the name of default lookup table hierarchy in the current company
        </text>
    </object>
    <object>
        <id>738</id>
        <text>getDefaultLocale
            Locale getDefaultLocale()
            Returns default locale of the current company
        </text>
    </object>
    <object>
        <id>739</id>
        <text>getDefaultOrgHierarchyName
            String getDefaultOrgHierarchyName()
            Returns the name of default organization hierarchy in the current company
        </text>
    </object>
    <object>
        <id>740</id>
        <text>getDefaultSpecDispNameAttribute
            String getDefaultSpecDispNameAttribute()
            Returns the display name attribute of default spec in the current company
        </text>
    </object>
    <object>
        <id>741</id>
        <text>getDefaultSpecName
            String getDefaultSpecName()
            Returns the name of default spec in the current company
        </text>
    </object>
    <object>
        <id>742</id>
        <text>getDefaultSpecNameAttribute
            String getDefaultSpecNameAttribute()
            Returns the name attribute of default spec in the current company
        </text>
    </object>
    <object>
        <id>743</id>
        <text>getDefaultSpecPathAttribute
            String getDefaultSpecPathAttribute()
            Returns the path attribute of default spec in the current company
        </text>
    </object>
    <object>
        <id>744</id>
        <text>getLocaleCode
            String Locale::getLocaleCode()
            Returns the 5 letter code (2 letter language code + underscore + 2 letter country
            code) for the given locale.
        </text>
    </object>
    <object>
        <id>745</id>
        <text>getLocaleDisplayName
            String Locale::getLocaleDisplayName()
            Returns a description of the locale suitable for display.
        </text>
    </object>
    <object>
        <id>746</id>
        <text>getLocalizedSpecNames
            Spec[] getLocalizedSpecNames()
            Returns all the specs that are localized.
        </text>
    </object>
    <object>
        <id>747</id>
        <text>getSystemMessageById
            String getSystemMessageById(int id, [Locale loc])
            Given message id (and locale), returns description of the message.
        </text>
    </object>
    <object>
        <id>748</id>
        <text>getSystemMessageByName
            String getSystemMessageByName(String msg_name, [Locale loc])
            Given message name (and locale), returns description of the message.
        </text>
    </object>
    <object>
        <id>749</id>
        <text>getUserLocale
            Locale getUserLocale()
            Returns the locale that is selected by the user for browsing content
        </text>
    </object>
    <object>
        <id>750</id>
        <text>new$Locale
            new Locale(String language_code, String country_code)
            Returns a locale with the language and country (two letter codes) combination
            specified. Throws exception if it is not supported.
        </text>
    </object>
    <object>
        <id>751</id>
        <text>removeFromCompanyLocales
            void removeFromCompanyLocales(Locale []companyLocales)
            Removes the given locales from the list of locales that are defined for the company.
            This will also remove the given locales from any specs that are localized using them.
        </text>
    </object>
    <object>
        <id>752</id>
        <text>replaceCompanyLocales
            void replaceCompanyLocales(Locale []companyLocales)
            Sets the given locales for the company. Removes any existing locales. This will also
            remove any locales removed as a result of this operation, from any specs that are
            localized using them. For example: Current locales are en_US and fr_FR. Calling
            replaceCompanyLocales({en_US,de_DE}) will result in (1) en_US and de_DE are
            removed from company. (2) company locales are set to en_US and de_DE (3) any
            specs localized with fr_FR will have fr_FR removed from them.
        </text>
    </object>
    <object>
        <id>753</id>
        <text>operations_mq
        </text>
    </object>
    <object>
        <id>754</id>
        <text>mqDisconnect
            void MQQueueManager::mqDisconnect()
            Disconnects from the given queue manager.
        </text>
    </object>
    <object>
        <id>755</id>
        <text>mqGetMessageDiagnostics
            String mqGetMessageDiagnostics(MQMessage message)
            Returns a string containing diagnostic information about the given message.
        </text>
    </object>
    <object>
        <id>756</id>
        <text>mqGetMessageId
            String MQMessage::mqGetMessageId()
            Returns the ID of the given message as a String containing a hexadecimal number.
        </text>
    </object>
    <object>
        <id>757</id>
        <text>mqGetQueueMgr
            MQQueueManager mqGetQueueMgr(String hostname, String port, String
            channel, String queueMgrName)
            Creates and returns a new MQ queue manager with the given properties.
        </text>
    </object>
    <object>
        <id>758</id>
        <text>mqGetReceivedMsg
            MQMessage MQQueueManager::mqGetReceivedMsg(String queueName, String
            queueOpenOptions, String messageGetOptions)
            Receives a message from queueName. Returns the message, as a MQMessage, or
            null.
        </text>
    </object>
    <object>
        <id>759</id>
        <text>mqGetReceivedMsgByMessageID
        </text>
    </object>
    <object>
        <id>760</id>
        <text>MQMessage MQQueueManager::mqGetReceivedMsgByMessageID(String
            queueName, String messageId, String passedInQueueOpenOptions, String
            passedInMessageGetOptions)
            Finds the message in the given queue with given message ID. The ID is passed in a
            a String containing a hexadecimal number. Returns null if there is no such message
            in the given queue.
        </text>
    </object>
    <object>
        <id>761</id>
        <text>mqGetResponseToMsg
            MQMessage MQQueueManager::mqGetResponseToMsg(MQMessage
            outgoingMessage, String queueOptions, String messageOptions)
            Gets the response to the given message from the given queue.
        </text>
    </object>
    <object>
        <id>762</id>
        <text>mqGetTextFromMsg
            String mqGetTextFromMsg(MQMessage mqMessage)
            Returns a string containing the entire content of a MQMessage, including headers.
        </text>
    </object>
    <object>
        <id>763</id>
        <text>mqGetXMLMessageContent
            String mqGetXMLMessageContent(String orgXmlMsg)
            Discards any garbage at the beginning of the input string to get a XML document.
            More precisely, behaves as follows: If the input string is of the form A + B, where B is
            a valid XML document and A is any (possibly empty) string, this operation returns B.
            Otherwise, returns null.
        </text>
    </object>
    <object>
        <id>764</id>
        <text>mqSendReply
            MQMessage MQQueueManager::mqSendReply(MQMessage receivedMsg,
            String msgText, String passedInQueueOpenOptions, String
            passedInMessagePutOptions)
            Sends a reply to the given message, without indicating success or failure.
        </text>
    </object>
    <object>
        <id>765</id>
        <text>mqSendReplyWithStatus
            MQMessage MQQueueManager::mqSendReplyWithStatus(MQMessage
            receivedMsg, String msgText, String status, String
            passedInQueueOpenOptions, String passedInMessagePutOptions)
            Sends a reply to the given message, setting the feedback field to indicate the given
            status. Status must be one of the following (in upper or lower case): "SUCCESS",
            "FAIL", "VALCHANGE", "VALDUPES", "MULTIPLE_HITS",
            "FAIL_RETRIEVE_BY_CONTENT", "BO_DOES_NOT_EXIST",
            "UNABLE_TO_LOGIN", "APP_RESPONSE_TIMEOUT", "NONE".
        </text>
    </object>
    <object>
        <id>766</id>
        <text>mqSendTextMsg
            MQMessage MQQueueManager::mqSendTextMsg(String msgText, String
            queueName, String queueOpenOptions, String messagePutOptions)
            Sends a message provided in the String msgText over queueName. Returns the
            MQMessage
        </text>
    </object>
    <object>
        <id>767</id>
        <text>mqSendTextMsgWithReply
            MQMessage MQQueueManager::mqSendTextMsgWithReply(String msgText,
            String queueName, String replyQueueName, String queueOpenOptions, String
            messagePutOptions)
            Sends a message provided in the String msgText over queueName. The reply queue
            is specified. Returns the MQMessage object.
        </text>
    </object>
    <object>
        <id>768</id>
        <text>operations_mutablespec
        </text>
    </object>
    <object>
        <id>769</id>
        <text>addSubSpec
            Boolean Spec::addSubSpec(Spec subSpec)
            Adds an entire SubSpec using a SubSpec.
        </text>
    </object>
    <object>
        <id>770</id>
        <text>buildSpec
            Spec buildSpec(String specName, String specType, [Spec specFileType])
            Returns a new spec object with the given name and type. Valid types are
            PRIMARY_SPEC, SECONDARY_SPEC, FILE_SPEC, MKT_SPEC, SUB_SPEC,
            LKP_SPEC, SCRIPT_INPUT_SPEC. The optional parameter specFileType is
            actually mandatory for the spec of type FILE_SPEC but not applicable to any other
            type. specFileType specifies the data file type of the file spec. Valid data file types are
            "D", "T", "C", "F", "X", and "G" which stand for DELIMITED, TAB_DELIMITED, CSV,
            FIXEDWIDTH, XML, GENERATED_DURING_FEED. If the specFileType field is
            omitted when specifying a FILE_SPEC an AustinException is thrown.
        </text>
    </object>
    <object>
        <id>771</id>
        <text>buildSpecNode
            Node buildSpecNode(Spec spec, String path, Integer order)
            Returns a new node object of a spec with the given path and node order. Please
            make sure to use a spec that has been obtained using the new Spec() or buildSpec
            operation
        </text>
    </object>
    <object>
        <id>772</id>
        <text>buildTestSpec
            Spec buildTestSpec(String name, String type, Integer fields)
            Returns a new spec object with the specified name, type and number of fields in the
            spec
        </text>
    </object>
    <object>
        <id>773</id>
        <text>deleteSpec
            void Spec::deleteSpec()
            Delete this spec
        </text>
    </object>
    <object>
        <id>774</id>
        <text>exportXML
            String IMutableSpec::exportXML()
            Exports a WebSphere Product Center Spec to a String representing a XML file.
        </text>
    </object>
    <object>
        <id>775</id>
        <text>exportXSD
            String IMutableSpec::exportXSD()
            Exports a WebSphere Product Center Spec to a String representing the contents of
            XML Schema Definition.
        </text>
    </object>
    <object>
        <id>776</id>
        <text>importXML
            IMutableSpec importXML(String filename)
            Imports a XML file to a WebSphere Product Center Spec.
        </text>
    </object>
    <object>
        <id>777</id>
        <text>importXSD
            IMutableSpec importXSD(String filename, String specName, String specType,
            String primaryKeyPath, String maxAncestors, String topLevelNamespace,
            String topLevelName, String archivedFilename)
            Imports a XML Schema Definition file (.xsd) to a WebSphere Product Center Spec,
            using the given parameters.
        </text>
    </object>
    <object>
        <id>778</id>
        <text>new$Spec
            new Spec(String specName, String specType, [String specFileType])
            Returns a new spec object with the given name and type. Valid types are
            PRIMARY_SPEC, SECONDARY_SPEC, FILE_SPEC, MKT_SPEC, SUB_SPEC,
            LKP_SPEC, SCRIPT_INPUT_SPEC. The optional parameter specFileType is
            actually mandatory for the spec of type FILE_SPEC but not applicable to any other
            type. specFileType specifies the data file type of the file spec. Valid data file types are
            "D", "T", "C", "F", "X", and "G" which stand for DELIMITED, TAB_DELIMITED, CSV,
            FIXEDWIDTH, XML, GENERATED_DURING_FEED. If the specFileType field is
            omitted when specifying a FILE_SPEC an AustinException is thrown.
        </text>
    </object>
    <object>
        <id>779</id>
        <text>new$SpecLookupTableNode
            new SpecLookupTableNode(Spec spec, String path, String lookupTableName,
        </text>
    </object>
    <object>
        <id>780</id>
        <text>Integer order)
            Returns a new node created in the spec according to the path and order with the
            specified Look up table attached.
        </text>
    </object>
    <object>
        <id>781</id>
        <text>new$SpecNode
            new SpecNode(Spec spec, String path, Integer order)
            Returns a new node created in the spec according to the path and order.
        </text>
    </object>
    <object>
        <id>782</id>
        <text>removeNode
            Boolean Spec::removeNode(String path)
            Removes a node from a spec.
        </text>
    </object>
    <object>
        <id>783</id>
        <text>saveSpec
            void Spec::saveSpec()
            Save this spec to the database
        </text>
    </object>
    <object>
        <id>784</id>
        <text>setAttribute
            void Node::setAttribute(String sAttributeName, String sValue, [Boolean
            dontReplace])
            Set an attribute of a node or a spec. Please consult the documentation for allowable
            values of sAttributeName. Common values are MAX_OCCURRENCE,
            MIN_OCCURRENCE, TYPE, DEFAULT_VALUE. If the optional third parameter
            "dontReplace" is supplied, and is true, or we are dealing with a node rather than a
            spec, sValue is added to any existing values for this attribute rather than replacing
            them.
        </text>
    </object>
    <object>
        <id>785</id>
        <text>setAttributes
            void Node::setAttributes(String sAttributeName, HashMap sValues)
            Set an attribute of a node or a spec to a set of values contained in the sValues
            HashMep. Any existing values are deleted before the new values are added. Please
            consult the documentation for allowable values of sAttributeName.
        </text>
    </object>
    <object>
        <id>786</id>
        <text>setNodeName
            void IMutableSpec::setNodeName(String path, String newNodeName)
            Renames the node in the given spec with the given path to newNodeName. Throws
            an exception if any of the following conditions is true: (i) there is no node at the given
            path in the given spec. (ii) there is a node at the given path in the given spec, but it is
            not a leaf node. (iii) there is a node at the given path in the given spec, but it is a
            primary key. (iv) there is already a node at the given path with newNodeName. (v) the
            name is an invalid name.
        </text>
    </object>
    <object>
        <id>787</id>
        <text>setPrimaryKeyPath
            void Spec::setPrimaryKeyPath(String primaryKeyPath)
            Sets the primaryKeyPath of this spec to the given path. Throws an AustinException
            under any of the following conditions: 1. The spec is not a primary spec or lookup
            spec. 2. The path does not exist in the spec. 3. The path refers to a node included
            from a SubSpec, and the node does not have minimum occurrence and maximum
            occurrence both set to 1.
        </text>
    </object>
    <object>
        <id>788</id>
        <text>operations_perf
        </text>
    </object>
    <object>
        <id>789</id>
        <text>beginPerf
            beginPerf(String name)
            Starts timing current block for perf. logging
        </text>
    </object>
    <object>
        <id>790</id>
        <text>endPerf
            endPerf(String name)
            Ends timing current block for perf. logging
        </text>
    </object>
    <object>
        <id>791</id>
        <text>getTimerElapsedTime
            Integer Timer::getTimerElapsedTime()
            Return the time elapsed between start and stop.
        </text>
    </object>
    <object>
        <id>792</id>
        <text>new$Timer
            new Timer()
            Create (and start) a timer.
        </text>
    </object>
    <object>
        <id>793</id>
        <text>startTimer
            Timer::startTimer()
            Start the timer.
        </text>
    </object>
    <object>
        <id>794</id>
        <text>stopTimer
            Timer::stopTimer()
            Stop the timer.
        </text>
    </object>
    <object>
        <id>795</id>
        <text>operations_queuemgr
        </text>
    </object>
    <object>
        <id>796</id>
        <text>createQueue
            IMsgQueue createQueue (String queueName, String queueDesc,
            MsgQueueProtocolEnum protocol, String syncScriptPath))
            Creates a new queue with the given parameters.
        </text>
    </object>
    <object>
        <id>797</id>
        <text>getMessageFromQueue
            Message getMessageFromQueue (String queueName, Integer index)
            Gets the indexth oldest message from the given queue, index starting with 1. For
            example, getMessageFromQueue("Queue1", 2) would return the 2nd oldest message
            from the queue with name "Queue1". If there is no such message or queue, returns
            null.
        </text>
    </object>
    <object>
        <id>798</id>
        <text>getMsgAppResponse
            Void Message::getMsgAppResponse()
            Initiates the request for response for a message.
        </text>
    </object>
    <object>
        <id>799</id>
        <text>getMsgAppResponseDoc
            Doc Message::getMsgAppResponseDoc()
            Returns the Doc object for the message.
        </text>
    </object>
    <object>
        <id>800</id>
        <text>getMsgAttachments
            HashMap Message::getMsgAttachments ()
            Returns a HashMap of attachment names to attachments for the given message..
        </text>
    </object>
    <object>
        <id>801</id>
        <text>getMsgByMsgId
            Message getMsgByMsgId(String msgId)
            Returns the message object with the message id msgId null otherwise.
        </text>
    </object>
    <object>
        <id>802</id>
        <text>getMsgDoc
            Doc Message::getMsgDoc()
            Returns the Doc object for the message.
        </text>
    </object>
    <object>
        <id>803</id>
        <text>getMsgId
            String Message::getMsgId()
            Returns the generated unique id for the message.
        </text>
    </object>
    <object>
        <id>804</id>
        <text>getMsgProtocolResponseDoc
            Doc Message::getMsgProtocolResponseDoc()
            Returns the Doc object for the message.
        </text>
    </object>
    <object>
        <id>805</id>
        <text>getMsgQueue
            MsgQueue Message::getMsgQueue()
            Returns the MsgQueue object for the message.
        </text>
    </object>
    <object>
        <id>806</id>
        <text>getMsgQueueName
            String MsgQueue::getMsgQueueName()
            Returns the name of this message queue.
        </text>
    </object>
    <object>
        <id>807</id>
        <text>qmgrGetMsgQueueByName
            MsgQueue qmgrGetMsgQueueByName(String queueName)
            Returns the queue if present in the system.
        </text>
    </object>
    <object>
        <id>808</id>
        <text>sendMsg
            Message MsgQueue::sendMsg(Doc doc)
            Sends the message. If successful, will return a message object. If it fails it will return
            null.
        </text>
    </object>
    <object>
        <id>809</id>
        <text>setMsgDoc
            void Message::setMsgDoc(IDoc doc)
            Sets the Doc object for the message.
        </text>
    </object>
    <object>
        <id>810</id>
        <text>operations_report
        </text>
    </object>
    <object>
        <id>811</id>
        <text>getReportByName
            Report getReportByName(String reportName)
            Return a report if one exists with the specified name and null otherwise
        </text>
    </object>
    <object>
        <id>812</id>
        <text>new$Report
            new Report(String reportName, String reportScriptName, Distribution dist)
            Return a new report object
        </text>
    </object>
    <object>
        <id>813</id>
        <text>renderHorizontalBars
            String renderHorizontalBars(Integer barWidth, Integer barHeight, Integer[]
            anLengths, String[] asLabels)
            Return an HTML table to display horizontal bars - anHeights[i] should have the length
            of the i-th bar and asLabels[i] the tooltip for the i-th bar
        </text>
    </object>
    <object>
        <id>814</id>
        <text>renderVerticalBars
            String renderVerticalBars(Integer barWidth, Integer barHeight, Integer[]
            anLengths, String[] asLabels)
            Return an HTML table to display vertical bars - anHeights[i] should have the length of
            the i-th column and asLabels[i] the tooltip for the i-th column
        </text>
    </object>
    <object>
        <id>815</id>
        <text>operations_scheduler
        </text>
    </object>
    <object>
        <id>816</id>
        <text>queryJobCompletionPercentage
            Integer queryJobCompletionPercentage(Integer scheduleID)
            Queries the completion percentage of the specified job. Method will return percent
            complete as Integer if the job is currently running, null otherwise.
        </text>
    </object>
    <object>
        <id>817</id>
        <text>queryJobStatus
            String queryJobStatus(Integer scheduleID)
            Queries the specified job if it is currently running. Method will return one of
            "Completed Running", "Running", "System Error", "Error Completing", "Not Started".
        </text>
    </object>
    <object>
        <id>818</id>
        <text>runJob
        </text>
    </object>
    <object>
        <id>819</id>
        <text>Integer runJob(String jobName, String jobType)
            Runs the specified job immediately. Returns the scheduleID for the job. Job type will
            be one of "CTGTODB", "DBTOMKT", "REPORTEXE", or
            "CATALOGTOCATALOGEXPORT". * CTGTODB should be used for imports *
            DBTOMKT should be used for exports * REPORTEXE should be used for reports *
            CATALOGTOCATALOGEXPORT should be used for catalog exports
        </text>
    </object>
    <object>
        <id>820</id>
        <text>stopJob
            void stopJob(Integer scheduleID)
            Stops the specified job if it is currently running.
        </text>
    </object>
    <object>
        <id>821</id>
        <text>operations_search
        </text>
    </object>
    <object>
        <id>822</id>
        <text>copySearchItemData
            void Selection::copySearchItemData(Item searchItem[, Boolean append])
            Copy item search data to search selection where the item was retrieved from a
            search result set. Use the optional append argument if you want to add data to
            existing data.
        </text>
    </object>
    <object>
        <id>823</id>
        <text>copySearchItemLocationTreeData
            void Selection::copySearchItemLocationTreeData(Item searchItem,
            CategoryTree locationTree[, Boolean append])
            Copy item search data to search selection where the item was retrieved from a
            search result set. Data is added for locations for given location tree. Use the optional
            append argument if you want to add data to existing data.
        </text>
    </object>
    <object>
        <id>824</id>
        <text>deleteSearchTemplate
            void SearchTemplate::deleteSearchTemplate()
            Delete this search template
        </text>
    </object>
    <object>
        <id>825</id>
        <text>execute
            SearchResultSet SearchQuery::execute()
            Execute the search query.
        </text>
    </object>
    <object>
        <id>826</id>
        <text>executeInBackground
            Schedule SearchQuery::executeInBackground(String selectionName)
            Execute the search query in background and save result as a selection.
        </text>
    </object>
    <object>
        <id>827</id>
        <text>getBoolean
            boolean SearchResultSet::getBoolean(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a boolean.
        </text>
    </object>
    <object>
        <id>828</id>
        <text>getCategory
            Category SearchResultSet::getCategory(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a Category.
        </text>
    </object>
    <object>
        <id>829</id>
        <text>getDate
            Date SearchResultSet::getDate(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a Date.
        </text>
    </object>
    <object>
        <id>830</id>
        <text>getDouble
            double SearchResultSet::getDouble(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a double.
        </text>
    </object>
    <object>
        <id>831</id>
        <text>getFloat
            float SearchResultSet::getFloat(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a float.
        </text>
    </object>
    <object>
        <id>832</id>
        <text>getHierarchy
            CategoryTree SearchResultSet::getHierarchy(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a CategoryTree.
        </text>
    </object>
    <object>
        <id>833</id>
        <text>getInt
            int SearchResultSet::getInt(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as an int.
        </text>
    </object>
    <object>
        <id>834</id>
        <text>getItem
            Item SearchResultSet::getItem(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as an Item.
        </text>
    </object>
    <object>
        <id>835</id>
        <text>getLong
            long SearchResultSet::getLong(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a long.
        </text>
    </object>
    <object>
        <id>836</id>
        <text>getSearchTemplateByName
            SearchTemplate getSearchTemplateByName(String name)
            Return the search template with the given name. Otherwise it becomes null.
        </text>
    </object>
    <object>
        <id>837</id>
        <text>getSearchTemplateName
            String SearchTemplate::getSearchTemplateName()
            Return the name of this search template
        </text>
    </object>
    <object>
        <id>838</id>
        <text>getSpec
            Spec SearchResultSet::getSpec(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a Spec.
        </text>
    </object>
    <object>
        <id>839</id>
        <text>getString
            String SearchResultSet::getString(int columnIndex)
            Get the value of the designated column in the current row of this SearchResultSet
            object as a String.
        </text>
    </object>
    <object>
        <id>840</id>
        <text>isDefined
            boolean SearchResultSet::isDefined(int columnIndex)
            Return true if the value of the designated column in the current row of this
            SearchResultSet object is defined; otherwise, return false.
        </text>
    </object>
    <object>
        <id>841</id>
        <text>moveCursor
            boolean SearchResultSet::moveCursor(int position)
            Change cursor position, where 0 &lt;= position &lt; size(). So if size() = 100, you can set
            the position to 0, 1, ..., 98, 99. The return value is true if the cursor was moved (note
            that you will have to call next() to fetch the row), or false if the cursor could not be
            moved due to an incorrect position .
        </text>
    </object>
    <object>
        <id>842</id>
        <text>new$SearchQuery
            new SearchQuery(String queryString)
            Create a search query.
        </text>
    </object>
    <object>
        <id>843</id>
        <text>new$SearchSelection
            new SearchSelection(Catalog catalog, String name)
            Return an empty search selection.
        </text>
    </object>
    <object>
        <id>844</id>
        <text>new$SearchTemplate
            new SearchTemplate(String name, Array attrGroupNames, Container container,
            String desc, [String colAreaName, String stepPath])
            Return a new search template with the given name, container, and the set of attribute
            group names. Also, search templates in a collaboration area step can be defined by
            providing optional parameters colAreaName and stepPath.
        </text>
    </object>
    <object>
        <id>845</id>
        <text>reset
            SearchResultSet::reset()
            Reset cursor position to first position. Similar to calling moveCursor(0)
        </text>
    </object>
    <object>
        <id>846</id>
        <text>setItemLocationData
            void Selection::setItemLocationData(Item item, CategoryTree locationTree,
            String[] locFullPaths, String delimiter, Boolean rootIncluded[, Boolean append])
            Add item search data to search selection. Data is added for locations for given
            location tree as an array of full category paths. Use the given delimiter to delimit the
            path elements and set rootIncluded to true if path includes category tree root name.
            Use the optional append argument if you want to add to existing data.
        </text>
    </object>
    <object>
        <id>847</id>
        <text>operations_soap
        </text>
    </object>
    <object>
        <id>848</id>
        <text>invokeSoapServer
            Object invokeSoapServer(String sURL, String sMethodName, Object[]
            aParamValues [,String[] aParamNames[, String userName, String password]] )
            Invoke a soap server. SURL is the URL of the service. SMETHODNAME is the name
            of the operation called. APARAMVALUES is an array containing the request
            parameters. APARAMNAMES is an optional array containing the names of the
            paramters. USERNAME is a username and company code separated by @, for
            example user@company to be passed in and used if authentication is required for
            this web service. PASSWORD is the password for the corresponding user in the
            company, and is only used if authentication is required for this web service. Returns
            the return value of the SOAP operation call.
        </text>
    </object>
    <object>
        <id>849</id>
        <text>invokeSoapServerForDocLit
            Object invokeSoapServerForDocLit(String sURL, String xmlRequestMsg)
            Invoke a soap server for Document-Literal based web services. SURL is the URL of
            the service. XMLREQUESTMSG is a string containing the request message in XML
            format.
        </text>
    </object>
    <object>
        <id>850</id>
        <text>operations_spec
        </text>
    </object>
    <object>
        <id>851</id>
        <text>addToSpecLocales
            void Spec::addToSpecLocales(Locale []newLocales)
            Adds the given locales to the list of locales that are defined for the spec.
        </text>
    </object>
    <object>
        <id>852</id>
        <text>buildSpecNodeName
            String buildSpecNodeName(String name)
            Returns the parsed name that was passed in so that it can be used as a spec node
            name (spec node name only accept letters and characters, others are converted to
            an underscore _)
        </text>
    </object>
    <object>
        <id>853</id>
        <text>getLocaleNode
            Node Node::getLocaleNode(Locale locale)
        </text>
    </object>
    <object>
        <id>854</id>
        <text>Returns the localized node for the supplied locale.
        </text>
    </object>
    <object>
        <id>855</id>
        <text>getLocales
            Object Spec::getLocales()
            returns the locales associated with the spec
        </text>
    </object>
    <object>
        <id>856</id>
        <text>getNodeAttributeValue
            String Node::getNodeAttributeValue(String attributeName)
            Returns the value of this node's attribute, i.e. MAXLENGTH, MAX_OCCURRENCE,
            MIN_OCCURRENCE, HELP_URL, TYPE, etc.
        </text>
    </object>
    <object>
        <id>857</id>
        <text>getNodeAttributeValues
            HashMap Node::getNodeAttributeValues(String attributeName)
            Returns the values of this node's attributes in a Hash Map, i.e.
            STRING_ENUMERATION.
        </text>
    </object>
    <object>
        <id>858</id>
        <text>getNodeByPath
            Node Spec::getNodeByPath(String path)
            Returns the node object for path in this spec.
        </text>
    </object>
    <object>
        <id>859</id>
        <text>getNodeChildren
            INode[] Node::getNodeChildren()
            Returns the children for the node
        </text>
    </object>
    <object>
        <id>860</id>
        <text>getNodeDisplayName
            String Node::getNodeDisplayName([Locale locale])
            Returns the display name of a locale node. Optionally, if the node is the parent of the
            locale nodes, pass in the locale for a particular locale node display name. If it is not
            valid for the node to have a display name, will return null.
        </text>
    </object>
    <object>
        <id>861</id>
        <text>getNodeLocale
            Locale Node::getNodeLocale()
            Returns the locale object for this node if it is a locale specific node.
        </text>
    </object>
    <object>
        <id>862</id>
        <text>getNodeLookupTableName
            String Node::getNodeLookupTableName()
            Returns the name of the Lookup Table associated with this node, if one exists.
        </text>
    </object>
    <object>
        <id>863</id>
        <text>getNodeName
            String Node::getNodeName()
            Returns the name of this node.
        </text>
    </object>
    <object>
        <id>864</id>
        <text>getNodePath
            String Node::getNodePath()
            Returns the path of this node.
        </text>
    </object>
    <object>
        <id>865</id>
        <text>getNodeSpec
            Spec Node::getNodeSpec()
            Returns the spec object for this node.
        </text>
    </object>
    <object>
        <id>866</id>
        <text>getPrimaryKeyNode
            Node Spec::getPrimaryKeyNode()
            Returns the primary-key node of this primary spec. If this is not a primary spec,
            returns null.
        </text>
    </object>
    <object>
        <id>867</id>
        <text>getSpecAttribNames
            String[] Spec::getSpecAttribNames()
            Returns the names of each attribute(node) specified in the spec
        </text>
    </object>
    <object>
        <id>868</id>
        <text>getSpecAttribPaths
            String[] Spec::getSpecAttribPaths()
            Returns the paths of each attribute(node) specified in the spec
        </text>
    </object>
    <object>
        <id>869</id>
        <text>getSpecByName
            Spec getSpecByName(String name, [Boolean bImmutable])
            Returns the spec object with the corresponding name. By default, a mutable spec is
            returned. If an immutable spec is needed, then an optional boolean parameter
            bImmutable is specified to be true. Please note that only mutable specs can be
            modified.
        </text>
    </object>
    <object>
        <id>870</id>
        <text>getSpecMultiOccurAttributePaths
            HashMap Spec::getSpecMultiOccurAttributePaths()
            Returns the multi occurence attribute paths for this spec.
        </text>
    </object>
    <object>
        <id>871</id>
        <text>getSpecName
            String Spec::getSpecName()
            Returns the name of this spec
        </text>
    </object>
    <object>
        <id>872</id>
        <text>getSpecNameList
            String[] getSpecNameList(HashMap filters)
            Returns the names of the Specs that match the given filters. VALID Filters:
            ("PATTERN", String) ("CONTAINER", Container Object) Will return only specs
            attached to container ("SPECTYPE", String {"PRIMARY_SPEC",
            "SECONDARY_SPEC", "LOOKUPTABLE_SPEC", "FILE_SPEC"} comma separated
            list) ("LOCALIZED", String {YES, NO}) Will return only localized or only non-localized
            specs
        </text>
    </object>
    <object>
        <id>873</id>
        <text>getSpecNodes
            HashMap Spec::getSpecNodes()
            Returns map of node paths to node objects for this spec.
        </text>
    </object>
    <object>
        <id>874</id>
        <text>getSpecPrimaryKeyAttributePath
            String Spec::getSpecPrimaryKeyAttributePath()
            Returns the primary key attribute path for this spec. Returns null if the path is not
            valid for this spec.
        </text>
    </object>
    <object>
        <id>875</id>
        <text>getSpecSequenceAttributePaths
            HashMap Spec::getSpecSequenceAttributePaths()
            Returns the sequence attribute paths for this spec.
        </text>
    </object>
    <object>
        <id>876</id>
        <text>getSpecType
            String Spec::getSpecType()
            Returns the type of this spec
        </text>
    </object>
    <object>
        <id>877</id>
        <text>getSpecUniqueAttributePaths
            HashMap Spec::getSpecUniqueAttributePaths()
            Returns the unique attribute paths for this spec.
        </text>
    </object>
    <object>
        <id>878</id>
        <text>isLocalized
            Boolean Spec::isLocalized()
            Returns a boolean to indicate whether or not a spec is localized
        </text>
    </object>
    <object>
        <id>879</id>
        <text>isNodeEditable
            Boolean Node::isNodeEditable()
            Returns true if the node is editable. Returns false otherwise
        </text>
    </object>
    <object>
        <id>880</id>
        <text>isNodeGrouping
            Boolean Node::isNodeGrouping()
        </text>
    </object>
    <object>
        <id>881</id>
        <text>Returns true if the node is a grouping node, false otherwise
        </text>
    </object>
    <object>
        <id>882</id>
        <text>isNodeIndexed
            Boolean Node::isNodeIndexed()
            Returns true if this node is indexed
        </text>
    </object>
    <object>
        <id>883</id>
        <text>isNodeNonPersisted
            Boolean Node::isNodeNonPersisted()
            Returns true if the node is a non-persisted node, false otherwise
        </text>
    </object>
    <object>
        <id>884</id>
        <text>isNodeSpecRoot
            Boolean Node::isNodeSpecRoot()
            Returns true if the node is a spec root node, false otherwise
        </text>
    </object>
    <object>
        <id>885</id>
        <text>loadSpecFromXML
            void loadSpecFromXML(String specXml)
            Creates spec defined in XMLSTRING. This spec can be loaded into different
            companies, like you would do from the command line
        </text>
    </object>
    <object>
        <id>886</id>
        <text>removeFromSpecLocales
            void Spec::removeFromSpecLocales(Locale []newLocales)
            Removes the given locales from the list of locales that are defined for the spec.
        </text>
    </object>
    <object>
        <id>887</id>
        <text>replaceSpecLocales
            void Spec::replaceSpecLocales(Locale []newLocales)
            Sets the given locales for the spec. Removes any existing locales.
        </text>
    </object>
    <object>
        <id>888</id>
        <text>setLocalized
            void Spec::setLocalized(Boolean localized)
            Sets the localized property of a spec
        </text>
    </object>
    <object>
        <id>889</id>
        <text>setNodeEditable
            void Node::setNodeEditable(Boolean)
            Sets the node to be editable or non-editable
        </text>
    </object>
    <object>
        <id>890</id>
        <text>setNodeIndexed
            void Node::setNodeIndexed(Boolean)
            Sets the node to be indexed or not
        </text>
    </object>
    <object>
        <id>891</id>
        <text>operations_specmap
        </text>
    </object>
    <object>
        <id>892</id>
        <text>buildTestSpecMap
            SpecMap buildTestSpecMap(String mapName, String mapType, Object source,
            Object destination)
            Returns a new spec map on the specified map type between the source and the
            destination - first delete existing map if there is one. The mapType can be
            FILE_CAT_MAP or CAT_MKT_MAP or FILE_CATALOG_MAP or
            CATALOG_MKT_MAP or CATALOG_CATALOG_MAP. If source or destination is
            catalog, user should pass Catalog object, else pass Spec object.
        </text>
    </object>
    <object>
        <id>893</id>
        <text>getDefaultSpecMapName
            (deprecated) String getDefaultSpecMapName()
            See getSpecMapByName. Returns the name of the spec map being used for an
            aggregation/syndication.
        </text>
    </object>
    <object>
        <id>894</id>
        <text>getSpecMapByName
            SpecMap getSpecMapByName([String name])
            Returns the specmap object with the corresponding name
        </text>
    </object>
    <object>
        <id>895</id>
        <text>getSpecMapDstObject
            Object SpecMap::getSpecMapDstObject()
            Returns the destination object of this spec map
        </text>
    </object>
    <object>
        <id>896</id>
        <text>getSpecMapSrcObject
            Object SpecMap::getSpecMapSrcObject()
            Returns the source object of this specmap
        </text>
    </object>
    <object>
        <id>897</id>
        <text>map
            void SpecMap::map(String sSrcPath, String sDstPath)
            Add a mapping from sSrcPath to sDstPath to this spec map
        </text>
    </object>
    <object>
        <id>898</id>
        <text>new$SpecMap
            new SpecMap(String mapName, String mapType, Object source, Object
            destination)
            Creates a new spec map of the given type between the source and destination
            objects. The mapType can be FILE_CAT_MAP or CAT_MKT_MAP or
            FILE_CATALOG_MAP or CATALOG_MKT_MAP or CATALOG_CATALOG_MAP.
        </text>
    </object>
    <object>
        <id>899</id>
        <text>saveSpecMap
            void SpecMap::saveSpecMap()
            Save this spec map to the database
        </text>
    </object>
    <object>
        <id>900</id>
        <text>operations_userdefinedlog
        </text>
    </object>
    <object>
        <id>901</id>
        <text>dumpUserDefinedLog
            void UserDefinedLog::dumpUserDefinedLog(Writer out, String delim, String
            outputType, String docTag, HashMap hmNodeTags)
            Dump all log entries from the user defined log to the Writer provided in no specific
            order. out - this is the output writer you want to dump the UDL to delim - the delimiter
            used for the current UDL entries outputType - one of COPY_UDE_OUTPUT,
            CSV_OUTPUT, XML_OUTPUT COPY_UDE_OUTPUT: dump each UDL entry
            exactly how it is currently stored CSV_OUTPUT: dump each UDL entry as comma
            seperated values XML_OUTPUT: dump each UDL entry within XML tags; docTag
            and hmNodeTags must also be specified docTag - this will comprise the XML tag
            surrounding the UDL dump hmNodeTags - this is the array of labels for each subtag
            to surround each delimited value
        </text>
    </object>
    <object>
        <id>902</id>
        <text>forEachUserDefinedLogEntry
            forEachUserDefinedLogEntry(UserDefinedLog UDL, [Entry e,] String[]
            logEntries [, Boolean bReturnMultipleLogEntries = true]) { statements }
            Executes the statements for each group of log entries in the given UserDefinedLog
            or, if Entry e is defined, each log entry for that specific Entry. If
            bReturnMultipleLogEntries is false, the array of log entries will contain only the first
            (oldest) log in chronological order. This is only a valid option if Entry e is not defined.
            If bReturnMultipleLogEntries is true, all logs are populated in the array in ascending
            chronological order for a given Entry (oldest first). By default,
            bReturnMultipleLogEntries is true.
        </text>
    </object>
    <object>
        <id>903</id>
        <text>getUserDefinedLog
            UserDefinedLog Container::getUserDefinedLog(String name)
            Returns the user defined log object having the given name, for this container
        </text>
    </object>
    <object>
        <id>904</id>
        <text>insertUserDefinedLog
            void UserDefinedLog::insertUserDefinedLog()
            Persist the new user defined log object to the database.
        </text>
    </object>
    <object>
        <id>905</id>
        <text>isUserDefinedLogNew
            Boolean UserDefinedLog::isUserDefinedLogNew()
            Check if the user defined log has been saved in the database.
        </text>
    </object>
    <object>
        <id>906</id>
        <text>newUserDefinedLog
            UserDefinedLog Container::newUserDefinedLog(String name, String
            description, Boolean isRunningLog)
            Returns a new user defined log object for this container with the given name and
            description. Will throw an exception if a log with the same name already exists for the
            container.
        </text>
    </object>
    <object>
        <id>907</id>
        <text>newUserDefinedLogEntry
            newUserDefinedLogEntry(Date date, Container container, Entry entry, String
            log [, Entry category])
            Returns a new user defined log entry object with for the specified entry which is either
            an item or category (with date/timestamp and log). If the category is also provided the
            logs will only be associated to that category.
        </text>
    </object>
    <object>
        <id>908</id>
        <text>saveUserDefinedLog
            void UserDefinedLog::saveUserDefinedLog()
            Update the persisted user defined log object in the database.
        </text>
    </object>
    <object>
        <id>909</id>
        <text>startBatchProcessingForUserDefinedLog
            void UserDefinedLog::startBatchProcessingForUserDefinedLog()
            Setup batch processing for the given User Defined Log. This operation is to be used
            mainly during import/mass update jobs.
        </text>
    </object>
    <object>
        <id>910</id>
        <text>stopBatchProcessingForUserDefinedLog
            void UserDefinedLog::stopBatchProcessingForUserDefinedLog()
            Stop batch processing for the given User Defined Log. This operation is to be used
            mainly during import/mass update jobs.
        </text>
    </object>
    <object>
        <id>911</id>
        <text>userDefinedLogAddEntry
            void UserDefinedLog::userDefinedLogAddEntry(Entry entry, [String
            log_message], [Entry category])
            Add an entry to the user defined log. If a message is specified, set that for the
            UserDefinedLogEntry. If the category is provided then the logs are only restricted for
            that category.
        </text>
    </object>
    <object>
        <id>912</id>
        <text>userDefinedLogDelete
            void UserDefinedLog::userDefinedLogDelete()
            Remove the user defined log object from the database. This action will also drop all
            entries to the log.
        </text>
    </object>
    <object>
        <id>913</id>
        <text>userDefinedLogDeleteEntriesFor
            void UserDefinedLog::userDefinedLogDeleteEntriesFor(Entry entry [, Entry
            category])
            Delete all log entries for an entry from the user defined log.
        </text>
    </object>
    <object>
        <id>914</id>
        <text>userDefinedLogDeleteEntry
            void UserDefinedLog::userDefinedLogDeleteEntry(UserDefinedLogEntry entry)
            Delete a particular entry from the user defined log.
        </text>
    </object>
    <object>
        <id>915</id>
        <text>userDefinedLogEntryGetDate
            Date UserDefinedLogEntry::userDefinedLogEntryGetDate()
            Get the date of the user defined log entry.
        </text>
    </object>
    <object>
        <id>916</id>
        <text>userDefinedLogEntryGetTarget
            Entry UserDefinedLogEntry::userDefinedLogEntryGetTarget([Boolean
        </text>
    </object>
    <object>
        <id>917</id>
        <text>containerIsCatalog)]
            Get the entry object of the user defined log entry. If CONTAINERISCATALOG is true
            or is left unspecified, the entry must be in a catalog. If CONTAINERISCATALOG is
            false, the entry must be in a hierarchy.
        </text>
    </object>
    <object>
        <id>918</id>
        <text>userDefinedLogEntryGetValue
            String UserDefinedLogEntry::userDefinedLogEntryGetValue()
            Get the value of the user defined log entry.
        </text>
    </object>
    <object>
        <id>919</id>
        <text>userDefinedLogEntrySetDate
            void UserDefinedLogEntry::userDefinedLogEntrySetDate(Date date)
            Set the date of the user defined log entry.
        </text>
    </object>
    <object>
        <id>920</id>
        <text>userDefinedLogEntrySetValue
            void UserDefinedLogEntry::userDefinedLogEntrySetValue(String log_message)
            Set the log of the user defined log entry.
        </text>
    </object>
    <object>
        <id>921</id>
        <text>userDefinedLogGetContainer
            Container UserDefinedLog::userDefinedLogGetContainer()
            Get the container that is logged by the user defined log.
        </text>
    </object>
    <object>
        <id>922</id>
        <text>userDefinedLogGetDescription
            String UserDefinedLog::userDefinedLogGetDescription()
            Get the description of the user defined log.
        </text>
    </object>
    <object>
        <id>923</id>
        <text>userDefinedLogGetEntriesFor
            UserDefinedLogEntry[] UserDefinedLog::userDefinedLogGetEntriesFor(Entry
            entry[, Entry category])
            Get all log entries for an entry from the user defined log. The category can be
            provided in order to get the logs associated for that category only.
        </text>
    </object>
    <object>
        <id>924</id>
        <text>userDefinedLogGetName
            String UserDefinedLog::userDefinedLogGetName()
            Get the name of the user defined log.
        </text>
    </object>
    <object>
        <id>925</id>
        <text>userDefinedLogIsRunningLog
            Boolean UserDefinedLog::userDefinedLogIsRunningLog()
            Returns whether this user defined log is a running-log.
        </text>
    </object>
    <object>
        <id>926</id>
        <text>userDefinedLogSetDescription
            void UserDefinedLog::userDefinedLogSetDescription(String desc)
            Set the description of the user defined log. NOTE: You need to call
            insertUserDefinedLog/saveUserDefinedLog to persist this change.
        </text>
    </object>
    <object>
        <id>927</id>
        <text>userDefinedLogSetName
            void UserDefinedLog::userDefinedLogSetName(String name)
            Set the name of the user defined log. NOTE: You need to call
            insertUserDefinedLog/saveUserDefinedLog to persist this change.
        </text>
    </object>
    <object>
        <id>928</id>
        <text>operations_webservices
        </text>
    </object>
    <object>
        <id>929</id>
        <text>createWebService
            WebService createWebService(String name, String implclass, String desc,
            String wsdlDocPath, String wsddDocPath, String protocol, String style, String
            implScriptPath, Boolean storeIncoming, Boolean storeOutgoing, Boolean
            deployed [, Boolean authRequired, Boolean skipRequestValidation, Boolean
            skipResponseValidation])
            Creates a new web service with the given parameters. To save and deploy the web
        </text>
    </object>
    <object>
        <id>930</id>
        <text>service(if DEPLOYED is true), call saveWebService(). NAME is the name of the
            service. IMPLCLASS is the java class for java based web services or "" for script
            based ones, DESC is the description of the service. WSDLDOCPATH is the doc path
            at which the WSDL is stored. WSDDDOCPATH is the doc path at which the WSDD is
            stored. PROTOCOL is the protocol. Currently, "SOAP_HTTP" is the only supported
            protocol. STYLE is the message style. Currently, RPC_ENCODED and
            DOCUMENT_LITERAL are supported. IMPLSCRIPTPATH is the doc path of the
            service implementation script. It is the callers responsibility to ensure that
            WSDLDOCPATH, WSDDDOCPATH and IMPLSCRIPTPATH do not cause the
            documents for any other web service to be overwritten. STOREINCOMING
            determines whether incoming requests are stored. STOREOUTGOING determines
            whether outgoing request are stored. DEPLOYED determines whether the service will
            be deployed. AUTH_REQUIRED determines whether a username, company name,
            and password are required to invoke this web service. SKIPREQUESTVALIDATION
            determines whether the inbound SOAP message is validated against WSDL schema.
            SKIPRESPONSEVALIDATION determines whether the outbound SOAP message is
            validated against WSDL schema. If a web service with the name of NAME already
            exists, throws an AustinException.
        </text>
    </object>
    <object>
        <id>931</id>
        <text>deleteWebService
            void WebService::deleteWebService()
            Deletes the web service in the DB and undeploys it.
        </text>
    </object>
    <object>
        <id>932</id>
        <text>getDesc
            String WebService::getDesc()
            Returns the description of this web service
        </text>
    </object>
    <object>
        <id>933</id>
        <text>getImplclass
            String WebService::getImplclass()
            Returns the fully qualified name of the implementation class of this web service
        </text>
    </object>
    <object>
        <id>934</id>
        <text>getImplScriptPath
            String WebService::getImplScriptPath()
            Returns the docstore path where the implementation script for this web service is
            stored.
        </text>
    </object>
    <object>
        <id>935</id>
        <text>getName
            String WebService::getName()
            Returns the name of this web service
        </text>
    </object>
    <object>
        <id>936</id>
        <text>getProtocol
            String WebService::getProtocol()
            Returns the protocol for this web service.
        </text>
    </object>
    <object>
        <id>937</id>
        <text>getStoreIncoming
            Boolean WebService::getStoreIncoming()
            Returns whether incoming messages for this web service are stored.
        </text>
    </object>
    <object>
        <id>938</id>
        <text>getStoreOutgoing
            Boolean WebService::getStoreOutgoing()
            Returns whether outgoing messages for this web service are stored.
        </text>
    </object>
    <object>
        <id>939</id>
        <text>getStyle
            String WebService::getStyle()
            Returns the style for this web service.
        </text>
    </object>
    <object>
        <id>940</id>
        <text>getUrl
            String WebService::getUrl()
            Returns the URL for this web service
        </text>
    </object>
    <object>
        <id>941</id>
        <text>getWebServiceByName
            WebService getWebServiceByName (String name)
            Returns the web service with the given name. If there is no such web service, returns
            null.
        </text>
    </object>
    <object>
        <id>942</id>
        <text>getWsddDocPath
            String WebService::getWsddDocPath()
            Returns the docstore path where the WSDD for this web service is stored.
        </text>
    </object>
    <object>
        <id>943</id>
        <text>getWsdlDocPath
            String WebService::getWsdlDocPath()
            Returns the docstore path where the WSDL for this web service is stored.
        </text>
    </object>
    <object>
        <id>944</id>
        <text>getWsdlUrl
            String WebService::getWsdlUrl()
            Returns the WSDL URL for this web service
        </text>
    </object>
    <object>
        <id>945</id>
        <text>isAuthRequired
            Boolean WebService::isAuthRequired()
            Returns whether this web service requires authentication
        </text>
    </object>
    <object>
        <id>946</id>
        <text>isDeployed
            Boolean WebService::isDeployed()
            Returns whether this web service is deployed.
        </text>
    </object>
    <object>
        <id>947</id>
        <text>listTransactions
            void WebService::listTransactions()
            List the recorded transactions in order of date (undocumented, for internal use only).
        </text>
    </object>
    <object>
        <id>948</id>
        <text>saveWebService
            void WebService::saveWebService()
            Saves the web service in the DB. If deployment setting have changed, they take
            effect upon saving.
        </text>
    </object>
    <object>
        <id>949</id>
        <text>setAuthRequired
            void WebService::setAuthRequired(Boolean authRequired)
            Sets whether this WebService requires authentication. The setting will take effect
            upon saving.
        </text>
    </object>
    <object>
        <id>950</id>
        <text>setDeployed
            void WebService::setDeployed(Boolean deployed)
            Sets whether this WebService is deployed. The setting will take effect upon saving..
        </text>
    </object>
    <object>
        <id>951</id>
        <text>setDesc
            void WebService::setDesc(String desc)
            Sets the description of the given WebService.
        </text>
    </object>
    <object>
        <id>952</id>
        <text>setImplclass
            void WebService::setImplclass(String implclass)
            Sets the fully qualified name of the implementation class of the given WebService.
        </text>
    </object>
    <object>
        <id>953</id>
        <text>setImplScriptPath
            void WebService::setImplScriptPath(String implScriptPath)
            Sets the docstore path of the implementation script for this webservice. The caller
            must ensure that this does not overwrite the implementation script for any other
            service.
        </text>
    </object>
    <object>
        <id>954</id>
        <text>setName
            void WebService::setName(String name)
        </text>
    </object>
    <object>
        <id>955</id>
        <text>Sets the name of the given WebService.
        </text>
    </object>
    <object>
        <id>956</id>
        <text>setProtocol
            void WebService::setProtocol(String protocol)
            Sets the protocol of the given WebService.
        </text>
    </object>
    <object>
        <id>957</id>
        <text>setStoreIncoming
            void WebService::setStoreIncoming(Boolean storeIncoming)
            Sets the storeIncoming of the given WebService.
        </text>
    </object>
    <object>
        <id>958</id>
        <text>setStoreOutgoing
            void WebService::setStoreOutgoing(Boolean storeOutgoing)
            Sets whether this WebService should store outgoing messages.
        </text>
    </object>
    <object>
        <id>959</id>
        <text>setStyle
            void WebService::setStyle(String style)
            Sets the style of the given WebService.
        </text>
    </object>
    <object>
        <id>960</id>
        <text>setWsddDocPath
            void WebService::setWsddDocPath(String wsddDocPath)
            Sets the docstore path of the WSDD document. The caller must ensure that this does
            not overwrite the WSDD for any other service.
        </text>
    </object>
    <object>
        <id>961</id>
        <text>setWsdlDocPath
            void WebService::setWsdlDocPath(String wsdlDocPath)
            Sets the docstore path of the WSDL document. The caller must ensure that this does
            not overwrite the WSDL for any other service.
        </text>
    </object>
    <object>
        <id>962</id>
        <text>operations_wfl
        </text>
    </object>
    <object>
        <id>963</id>
        <text>createNestedWflStep
            WorkflowStep Workflow::createNestedWflStep(Workflow nestedWfl)
            Adds a nested workflow step to the workflow. Returns the WorkflowStep object.
        </text>
    </object>
    <object>
        <id>964</id>
        <text>createWflStep
            WorkflowStep Workflow::createWflStep(String stepType, String stepName)
            Adds a new step to the workflow if the step with the given name does not exists.
            StepType can be one of the following: AND_APPROVAL, OR_APPROVAL, MODIFY,
            DISPATCH, MERGE, GENERAL, AUTOMATED, INTERIM_CHECKOUT,
            CONDENSER. Returns the WorkflowStep object.
        </text>
    </object>
    <object>
        <id>965</id>
        <text>deleteWfl
            void Workflow::deleteWfl()
            Delete a workflow. It throws an exception if the workflow can not be deleted, for
            example, if it is used by any collaboration area
        </text>
    </object>
    <object>
        <id>966</id>
        <text>getAllWflNames
            String[] getAllWflNames()
            Returns a list of all workflow names.
        </text>
    </object>
    <object>
        <id>967</id>
        <text>getWflAccessControlGroup
            String Workflow::getWflAccessControlGroup()
            Returns access control group name of the workflow.
        </text>
    </object>
    <object>
        <id>968</id>
        <text>getWflByName
            Workflow getWflByName(String wflName)
            Returns the workflow if found otherwise null.
        </text>
    </object>
    <object>
        <id>969</id>
        <text>getWflContainerType
            String Workflow::getWflContainerType()
            Returns the workflow container type. The type could be either 'CATALOG' or
            'CATEOGRY_TREE'
        </text>
    </object>
    <object>
        <id>970</id>
        <text>getWflDesc
            String Workflow::getWflDesc()
            Returns the workflow name.
        </text>
    </object>
    <object>
        <id>971</id>
        <text>getWflFailureStep
            WorkflowStep Workflow::getWflFailureStep()
            Returns the failure step of the workflow.
        </text>
    </object>
    <object>
        <id>972</id>
        <text>getWflInitialStep
            WorkflowStep Workflow::getWflInitialStep()
            Returns the initial step of the workflow.
        </text>
    </object>
    <object>
        <id>973</id>
        <text>getWflName
            String Workflow::getWflName()
            Returns the workflow name.
        </text>
    </object>
    <object>
        <id>974</id>
        <text>getWflStepByName
            WorkflowStep Workflow::getWflStepByName(String stepName)
            Returns the step of the workflow otherwise null.
        </text>
    </object>
    <object>
        <id>975</id>
        <text>getWflStepPaths
            String[] Workflow::getWflStepPaths()
            Returns the paths for all the steps of the workflow.
        </text>
    </object>
    <object>
        <id>976</id>
        <text>getWflSteps
            WorkflowStep[] Workflow::getWflSteps()
            Returns the list of all the steps in the workflow.
        </text>
    </object>
    <object>
        <id>977</id>
        <text>getWflSuccessStep
            WorkflowStep Workflow::getWflSuccessStep()
            Returns the success step of the workflow.
        </text>
    </object>
    <object>
        <id>978</id>
        <text>new$Workflow
            new Workflow(String wflName, String containerType)
            Create a new workflow of the given container type and with the given name.
            Container type can be one of the following: CATALOG, CATEGORY_TREE
        </text>
    </object>
    <object>
        <id>979</id>
        <text>saveWfl
            Boolean Workflow::saveWfl()
            Saves the workflow. Returns true or false depending on whether the workflow was
            successfully saved or not.
        </text>
    </object>
    <object>
        <id>980</id>
        <text>setCategoryTreesForRecategorization
            void Workflow::setCategoryTreesForRecategorization(String[]
            categoryTreeNames)
            Sets the category trees which will be modified by this workflow. If no category trees
            are set that would mean that ALL of the category trees associated to the source
            container will be modified by this workflow.
        </text>
    </object>
    <object>
        <id>981</id>
        <text>setWflAccessControlGroup
            void Workflow::setWflAccessControlGroup(String acg)
            Sets access control group name of the workflow.
        </text>
    </object>
    <object>
        <id>982</id>
        <text>setWflDesc
        </text>
    </object>
    <object>
        <id>983</id>
        <text>void Workflow::setWflDesc(String wflDesc)
            Sets the workflow description
        </text>
    </object>
    <object>
        <id>984</id>
        <text>setWflName
            void Workflow::setWflName(String wflName)
            Sets the workflow name
        </text>
    </object>
    <object>
        <id>985</id>
        <text>operations_wflstep
        </text>
    </object>
    <object>
        <id>986</id>
        <text>getEditableAttributeGroups
            String[] WorkflowStep::getEditableAttributeGroups([String subViewType],
            [String locationHierarchyName])
            Gets the editable attribute groups of a workflow step. The result is an array attribute
            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
            optional parameter locationHierarchyName is required when the subViewType is
            'ITEM_LOCATION'.
        </text>
    </object>
    <object>
        <id>987</id>
        <text>getLocationHierarchyNames
            String[] WorkflowStep::getLocationHierarchyNames([Boolean
            canModifyAvailability])
            Returns the list of location hierarchy names defined in the given workflow step. The
            optional parameter canModifyAvailability filters the list of location hierarchy names
            based on the 'modify location hierarchy availability' flag. If not specified, no filtering
            takes place.
        </text>
    </object>
    <object>
        <id>988</id>
        <text>getModifyLocationHierarchyAvailability
            Boolean WorkflowStep::getModifyLocationHierarchyAvailability(String
            locationHierarchyName)
            Returns the 'modify location hierarchy availability' flag for a given location hierarchy in
            the given workflow step.The optional parameter locationHierarchyName is required
            when the subViewType is 'ITEM_LOCATION'.
        </text>
    </object>
    <object>
        <id>989</id>
        <text>getNextWflStepsForExitValue
            String[] WorkflowStep::getNextWflStepsForExitValue(String exitValue)
            Returns the names of the next steps for a particular exitValue of a WorkflowStep.
        </text>
    </object>
    <object>
        <id>990</id>
        <text>getRequiredAttributeGroups
            String[] WorkflowStep::getRequiredAttributeGroups([String subViewType],
            [String locationHierarchyName])
            Gets the required attribute groups of a workflow step. The result is an array attribute
            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
            optional parameter locationHierarchyName is required when the subViewType is
            'ITEM_LOCATION'.
        </text>
    </object>
    <object>
        <id>991</id>
        <text>getViewableAttributeGroups
            String[] WorkflowStep::getViewableAttributeGroups([String subViewType],
            [String locationHierarchyName])
            Gets the viewable attribute groups of a workflow step. The result is an array attribute
            collection names. The optional parameter subViewType can be 'ITEM_LOCATION',
            'BULK_EDIT', 'ITEM_EDIT', 'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The
            optional parameter locationHierarchyName is required when the subViewType is
            'ITEM_LOCATION'.
        </text>
    </object>
    <object>
        <id>992</id>
        <text>getWflStepAddEntries
            Boolean WorkflowStep::getWflStepAddEntries()
            Returns value of 'allow import into step' flag.
        </text>
    </object>
    <object>
        <id>993</id>
        <text>getWflStepAttributeGroups
            String[] WorkflowStep::getWflStepAttributeGroups()
            Returns an array of all the attribute group names for the workflow step.
        </text>
    </object>
    <object>
        <id>994</id>
        <text>getWflStepCategorizeEntries
            Boolean WorkflowStep::getWflStepCategorizeEntries()
            Returns value of 'allow recategorization' flag.
        </text>
    </object>
    <object>
        <id>995</id>
        <text>getWflStepDefaultScriptPath
            String WorkflowStep::getWflStepDefaultScriptPath()
            Gets the default path of the workflow script for the step: scripts/workflow/&lt;workflow
            name&gt;/&lt;step name&gt;.
        </text>
    </object>
    <object>
        <id>996</id>
        <text>getWflStepDesc
            String WorkflowStep::getWflStepDesc()
            Returns the workflow step name.
        </text>
    </object>
    <object>
        <id>997</id>
        <text>getWflStepEntryNotification
            String WorkflowStep::getWflStepEntryNotification()
            Gets the notification emails which will get sent when the item gets into the step.
        </text>
    </object>
    <object>
        <id>998</id>
        <text>getWflStepExitValues
            String[] WorkflowStep::getWflStepExitValues()
            Retrieve the exit values of the WorkflowStep.
        </text>
    </object>
    <object>
        <id>999</id>
        <text>getWflStepName
            String WorkflowStep::getWflStepName()
            Returns the workflow step name.
        </text>
    </object>
    <object>
        <id>1000</id>
        <text>getWflStepPerformerRoles
            String[] WorkflowStep::getWflStepPerformerRoles()
            Returns the list of user roles for the workflow step.
        </text>
    </object>
    <object>
        <id>1001</id>
        <text>getWflStepPerformerUsers
            String[] WorkflowStep::getWflStepPerformerUsers()
            Returns the list of user names for the workflow step.
        </text>
    </object>
    <object>
        <id>1002</id>
        <text>getWflStepReserveToEdit
            Boolean WorkflowStep::getWflStepReserveToEdit()
            Returns the reserve for edit flag for a workflow step.
        </text>
    </object>
    <object>
        <id>1003</id>
        <text>getWflStepScriptPath
            String WorkflowStep::getWflStepScriptPath()
            Gets the path of the workflow script for the step. If no script is defined, returns null.
        </text>
    </object>
    <object>
        <id>1004</id>
        <text>getWflStepTimeoutDate
            Date WorkflowStep::getWflStepTimeoutDate()
            Gets the timeout date for the workflow step. If no timeout date was set, a null is
            returned.
        </text>
    </object>
    <object>
        <id>1005</id>
        <text>getWflStepTimeoutDuration
            String WorkflowStep::getWflStepTimeoutDuration()
            Gets the timeout duration for the workflow step. Returns an integer in seconds. If no
            timeout duration was set, 0 is returned.
        </text>
    </object>
    <object>
        <id>1006</id>
        <text>getWflStepTimeoutNotification
            String WorkflowStep::getWflStepTimeoutNotification()
            Gets the notification emails which will get sent when the step times out.
        </text>
    </object>
    <object>
        <id>1007</id>
        <text>getWflStepType
            String WorkflowStep::getWflStepType()
            Returns the workflow step type.
        </text>
    </object>
    <object>
        <id>1008</id>
        <text>getWflStepView
            CtgView WorkflowStep::getWflStepView(String subViewType, [String
            locationHierarchyName])
            Returns a ctg view with a give subViewType for the workflow step. The parameter
            subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
        </text>
    </object>
    <object>
        <id>1009</id>
        <text>getWflStepViews
            CtgView[] WorkflowStep::getWflStepViews()
            Returns an array of all the step views for the workflow step.
        </text>
    </object>
    <object>
        <id>1010</id>
        <text>mapWflStepExitValueToNextStep
            void WorkflowStep::mapWflStepExitValueToNextStep(String exitValue, String |
            WorkflowStep | String[] nextStep | WorkflowStep[] nextStep)
            Maps the exit value of the WorkflowStep to the nextStep. The nextStep can either be
            the stepName or one WorkflowStep or an array of StepNames or an array of
            WorkflowSteps.
        </text>
    </object>
    <object>
        <id>1011</id>
        <text>setEditableAttributeGroups
            void WorkflowStep::setEditableAttributeGroups(String subViewType,
            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
            Sets the editable attrinute groups for the workflow step for a given subViewType. The
            parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
            validate against its Container Spec in order to leave the Success step.
        </text>
    </object>
    <object>
        <id>1012</id>
        <text>setModifyLocationHierarchyAvailability
            void WorkflowStep::setModifyLocationHierarchyAvailability(String
            locationHierarchyName, Boolean canModifyAvailability)
            Sets the 'modify location hierarchy availability' flag for a given location hierarchy in
            the given workflow step.
        </text>
    </object>
    <object>
        <id>1013</id>
        <text>setRequiredAttributeGroups
            void WorkflowStep::setRequiredAttributeGroups(String subViewType,
            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
            Sets the required attrinute groups for the workflow step for a given subViewType. The
            parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
            validate against its Container Spec in order to leave the Success step.
        </text>
    </object>
    <object>
        <id>1014</id>
        <text>setViewableAttributeGroups
            void WorkflowStep::setViewableAttributeGroups(String subViewType,
            String[]/AttrGroup[] attrGroups, [String locationHierarchyName])
            Sets the viewable attrinute groups for the workflow step for a given subViewType.
            The parameter subViewType can be 'ITEM_LOCATION', 'BULK_EDIT', 'ITEM_EDIT',
            'CATEGORY_EDIT', or 'CATEGORY_BULK_EDIT'. The optional parameter
            locationHierarchyName is required when the subViewType is 'ITEM_LOCATION'.
            WorflowStep cannot be of type "SUCCESS", as it is hardwired that an Entry must
            validate against its Container Spec in order to leave the Success step.
        </text>
    </object>
    <object>
        <id>1015</id>
        <text>setWflStepAddEntries
            void WorkflowStep::setWflStepAddEntries(Boolean flag)
            Sets value of 'allow import into step' flag.
        </text>
    </object>
    <object>
        <id>1016</id>
        <text>setWflStepCategorizeEntries
            void WorkflowStep::setWflStepCategorizeEntries(Boolean flag)
            Sets value of 'allow recategorization' flag.
        </text>
    </object>
    <object>
        <id>1017</id>
        <text>setWflStepDesc
            void WorkflowStep::setWflStepDesc(String desc)
            Sets the desc for the workflow step.
        </text>
    </object>
    <object>
        <id>1018</id>
        <text>setWflStepEntryNotification
            void WorkflowStep::setWflStepEntryNotification(String emailAdresses)
            Sets up the notification emails which will get sent when the item gets into the step.
            Email addresses must be seperated by semi-colons.
        </text>
    </object>
    <object>
        <id>1019</id>
        <text>setWflStepExitValues
            void WorkflowStep::setWflStepExitValues(String[] exitValues)
            Sets the exit values for the workflow step.
        </text>
    </object>
    <object>
        <id>1020</id>
        <text>setWflStepPerformerRoles
            void WorkflowStep::setWflStepPerformerRoles(String[] roles)
            Sets the user roles for the workflow step.
        </text>
    </object>
    <object>
        <id>1021</id>
        <text>setWflStepPerformerUsers
            void WorkflowStep::setWflStepPerformerUsers(String[] users)
            Sets the users for the workflow step.
        </text>
    </object>
    <object>
        <id>1022</id>
        <text>setWflStepReserveToEdit
            void WorkflowStep::setWflStepReserveToEdit(Boolean flag)
            Sets the reserve for edit flag for a workflow step.
        </text>
    </object>
    <object>
        <id>1023</id>
        <text>setWflStepScriptPath
            void WorkflowStep::setWflStepScriptPath([String scriptPath])
            Sets up the workflow script path for this step. If no argument is passed, the defaut
            location is used (script/&lt;workflow name&gt;/&lt;step name&gt;). Note that this operation does
            not check that the script is already loaded (it allows you to load the script later if
            needed).
        </text>
    </object>
    <object>
        <id>1024</id>
        <text>setWflStepTimeoutDate
            void WorkflowStep::setWflStepTimeoutDate(Date date)
            Sets up the timeout date for the workflow step.
        </text>
    </object>
    <object>
        <id>1025</id>
        <text>setWflStepTimeoutDuration
            void WorkflowStep::setWflStepTimeoutDuration(Integer seconds)
            Sets up the timeout duration for the workflow step. The duration is in seconds.
        </text>
    </object>
    <object>
        <id>1026</id>
        <text>setWflStepTimeoutNotification
            void WorkflowStep::setWflStepTimeoutNotification(String emailAdresses)
            Sets up the notification emails which will get sent when the step times out. Email
            addresses must be seperated by semi-colons.
        </text>
    </object>
    <object>
        <id>1027</id>
        <text>operations_widget
        </text>
    </object>
    <object>
        <id>1028</id>
        <text>buildWidget
            Widget buildWidget(String sType, String sName)
        </text>
    </object>
    <object>
        <id>1029</id>
        <text>Creates a widget of type sType and name sName
        </text>
    </object>
    <object>
        <id>1030</id>
        <text>getWidgetProperty
            Object Widget::getWidgetProperty(String sPropertyName)
            Return the property sPropertyName of this widget
        </text>
    </object>
    <object>
        <id>1031</id>
        <text>invalidate
            void invalidate()
            Invalidates this widget
        </text>
    </object>
    <object>
        <id>1032</id>
        <text>pullPropertyFromWidget
            pullPropertyFromWidget(String sDestProperty, Object oSrcWidget, String
            sSrcWidgetProperty
            The value of sDestProperty on this widget will always reflect the value of
            sSrcWidgetProperty on oSrcWidget - oSrcWidget is either a widget or a property of
            this widget that holds a widget
        </text>
    </object>
    <object>
        <id>1033</id>
        <text>pushPropertyToWidget
            pullPropertyFromWidget(String sSrcProperty, Object oDestWidget, String
            sDestWidgetProperty
            The value of sDestWidgetProperty on oDestWidget will always reflect the value of
            sSrcProperty on this widget - oDestWidget is either a widget or a property of this
            widget that holds a widget
        </text>
    </object>
    <object>
        <id>1034</id>
        <text>renderWidget
            Widget::renderWidget(Writer out)
            Renders the widget w
        </text>
    </object>
    <object>
        <id>1035</id>
        <text>setWidgetProperty
            void Widget::setWidgetProperty(String sPropertyName, Object oValue)
            Set the property sPropertyName of this widget to the value oValue
        </text>
    </object>
    <object>
        <id>1036</id>
        <text>operations_worklist
        </text>
    </object>
    <object>
        <id>1037</id>
        <text>addWorkEntry
            void WorkEntryList::addWorkEntry(int index, WorkEntry workEntry)
            Insert a WorkEntry into the WorkEntryList at the specified index
        </text>
    </object>
    <object>
        <id>1038</id>
        <text>getEntryFromWorkEntry
            Entry WorkEntry::getEntryFromWorkEntry()
            Get the Entry held by this WorkEntry
        </text>
    </object>
    <object>
        <id>1039</id>
        <text>getIndexesOfEntriesHavingState
            Map WorkEntryList::getIndexesOfEntriesHavingState(String state)
            Get the current indexes of the worklist entries having a particular state
        </text>
    </object>
    <object>
        <id>1040</id>
        <text>getMarkedEntries
            EntrySet WorkEntryList::getMarkedEntries([start, end])
            Return an entry set containing the marked entries in this work entry list - with indexes
            between start and end -
        </text>
    </object>
    <object>
        <id>1041</id>
        <text>getWorkEntryAt
            WorkEntry WorkEntryList::getWorkEntryAt(int i)
            Get the WorkEntry for the specified index in the WorkEntryList
        </text>
    </object>
    <object>
        <id>1042</id>
        <text>getWorkEntryListSize
            Integer WorkEntryList::getWorkEntryListSize()
            Gets the size of this work entry list
        </text>
    </object>
    <object>
        <id>1043</id>
        <text>getWorkEntryState
            String WorkEntry::getWorkEntryState()
            Get the current state of this WorkEntry
        </text>
    </object>
    <object>
        <id>1044</id>
        <text>isWorkEntryMarked
            Boolean WorkEntry::isWorkEntryMarked()
            Is the current WorkEntry marked
        </text>
    </object>
    <object>
        <id>1045</id>
        <text>isWorkEntryMarkedNew
            Boolean WorkEntry::isWorkEntryMarkedNew()
            Is the current WorkEntry marked new
        </text>
    </object>
    <object>
        <id>1046</id>
        <text>markWorkEntryDirty
            void WorkEntry::markWorkEntryDirty()
            Mark this WorkEntry as being dirty
        </text>
    </object>
    <object>
        <id>1047</id>
        <text>new$WorkEntry
            new WorkEntry(Entry entry, [Boolean markAsNew])
            Creates a workentry for a given entry
        </text>
    </object>
    <object>
        <id>1048</id>
        <text>new$WorkEntryList
            new WorkEntryList(ctgOrSelection, [sortingNodeId], [sortingOrder])
            Create a new work entry list from a catalog or a selection
        </text>
    </object>
    <object>
        <id>1049</id>
        <text>removeWorkEntry
            void WorkEntryList::removeWorkEntry(int index)
            Removes the WorkEntry at the specified index from the WorkEntryList
        </text>
    </object>
    <object>
        <id>1050</id>
        <text>saveMarkedEntries
            WorkEntryList::saveMarkedEntries(workList, [start, end, [colArea, path,
            comment]])
            Save the set of marked entries for this work entry list - with indexes between start and
            end - - for entries in the step specified by path in the collaboration area colArea with
            given comment.
        </text>
    </object>
    <object>
        <id>1051</id>
        <text>setWorkEntryMarked
            void WorkEntry::setWorkEntryMarked(Boolean mark)
            Marks/unmarks this WorkEntry
        </text>
    </object>
    <object>
        <id>1052</id>
        <text>syncWorkEntryAt
            void WorkEntryList::syncWorkEntryAt(int i)
            Sync the work entry at the specified index with it's database picture
        </text>
    </object>
    <object>
        <id>1053</id>
        <text>other
        </text>
    </object>
    <object>
        <id>1054</id>
        <text>getAribaAttribute
            String getAribaAttribute(String attribName)
            Gets Ariba's constant attribute names. Valid attribute names are PAYLOADID,
            TIMESTAMP, SHAREDSECRET, AUSTINDUNS
        </text>
    </object>
    <object>
        <id>1055</id>
        <text>setBypassApproval
            void setBypassApproval(Boolean bypassApproval)
            If an approval workflow is setup, use this to bypass the approval process
        </text>
    </object>
    <object>
        <id>1056</id>
        <text>sleep
            void sleep(String)
            Sleeps for the given number of milliseconds.
        </text>
    </object>
    <object>
        <id>1057</id>
        <text>page_layout
        </text>
    </object>
    <object>
        <id>1058</id>
        <text>getPageLayoutByName
            PageLayout getPageLayoutByName(String sPageLayoutName)
            Returns the page layout object with the corresponding name
        </text>
    </object>
    <object>
        <id>1059</id>
        <text>new$PageLayout
            new PageLayout(String sPageLayoutName)
            Returns a new page layout with the given name
        </text>
    </object>
    <object>
        <id>1060</id>
        <text>savePageLayout
            void PageLayout::savePageLayout()
            Saves the current page layout
        </text>
    </object>
    <object>
        <id>1061</id>
        <text>re
        </text>
    </object>
    <object>
        <id>1062</id>
        <text>buildRE
            new RE(String pattern, Integer matchFlags )
            Returns a regular expression corresponding to the given pattern. Match flags are
        </text>
    </object>
    <object>
        <id>1063</id>
        <text>match
            String[] RE::match(String str)
            Return the contents of the parenthesized subexpressions after a successful match
        </text>
    </object>
    <object>
        <id>1064</id>
        <text>new$RE
            new RE(String pattern, Integer matchFlags )
            Returns a regular expression corresponding to the given pattern. Optional match
            flags are 0=caseSensitive, 1=ignoreCase, 2=matchMultiline (new lines match as ^
            and $, 4=matchSingleLine (treat multiple lines as one line). Flags are additive.
        </text>
    </object>
    <object>
        <id>1065</id>
        <text>substitute
            String RE::substitute(String substituteIn, String substitution)
            Substitutes a string for this regular expression in another string. This method works
            like the Perl function of the same name. Given a regular expression of "a*b", a String
            to substituteIn of "aaaabfooaaabgarplyaaabwackyb" and the substitution String "-",
            the resulting String returned by subst would be "-foo-garply-wacky-". Returns: The
            string substituteIn with zero or more occurrences of the current regular expression
            replaced with the substitution String (if this regular expression object doesn't match at
            any position, the original String is returned unchanged).
        </text>
    </object>
    <object>
        <id>1066</id>
        <text>reader
        </text>
    </object>
    <object>
        <id>1067</id>
        <text>forEachLine
            forEachLine(BufferedReader in, String line) { statements }
            Executes the statements for each line read from in
        </text>
    </object>
    <object>
        <id>1068</id>
        <text>forEachXMLNode
            forEachXMLNode([XMLNode rootNode], String xPath [, XMLNode node]) {
            statements }
            Executes the statements for each XML node having the relative path xPath - paths in
            the block are relative to xPath. If the node variable is passed in as an argument, it is
            populated with the XMLNode that is being operated on in each iteration of
            forEachXMLNode. If the rootNode is specified, the path is relative to the path of
        </text>
    </object>
    <object>
        <id>1069</id>
        <text>rootNode.
        </text>
    </object>
    <object>
        <id>1070</id>
        <text>getCurrentLine
            String getCurrentLine()
            Returns the current line
        </text>
    </object>
    <object>
        <id>1071</id>
        <text>new$CSVParser
            new CSVParser(BufferedReader reader)
            Returns a comma separated parser given the buffered reader
        </text>
    </object>
    <object>
        <id>1072</id>
        <text>new$DelimParser
            new DelimParser(BufferedReader reader, String delimiter)
            Returns a delimiter parser which parses, based on the given delimiter
        </text>
    </object>
    <object>
        <id>1073</id>
        <text>new$FixedWidthParser
            new FixedWidthParser(BufferedReader reader)
            Returns a new fixed width parser given the buffered reader
        </text>
    </object>
    <object>
        <id>1074</id>
        <text>new$Reader
            new Reader(String documentPath [, String charsetName])
            Returns the buffered reader for the document specified by the path. If the document
            path starts with "file://", then the reader will read the file system file given by the
            specified path. You may optionally specify a charset that differs from the one stored
            with the document in the doc store.
        </text>
    </object>
    <object>
        <id>1075</id>
        <text>newCSVParser
            CSVParser newCSVParser(BufferedReader input)
            Returns a Comma Separated Parser using the given buffered reader input
        </text>
    </object>
    <object>
        <id>1076</id>
        <text>newDelimParser
            DelimiterParser newDelimParser(BufferedReader input, String delim)
            Returns a parser which parses based on the delimiter provided
        </text>
    </object>
    <object>
        <id>1077</id>
        <text>newFixedWidthParser
            FixedWidthParser newFixedWidthParser(BufferedReader input, [Integer
            fieldPos1, Integer fieldPos2, ..., Integer fieldPosN])
            Returns a fixed width parser given the buffered reader input. fieldPos are optional
            parameters which indicate the positions of the fields.
        </text>
    </object>
    <object>
        <id>1078</id>
        <text>nextLine
            String nextLine (BufferedReader in)
            Returns the next line from the reader
        </text>
    </object>
    <object>
        <id>1079</id>
        <text>parseXMLNode
            String parseXMLNode (String sXMLSubPath)
            Deprecated: Returns the value given by the sXMLSubPath XPath in the current XML
            document
        </text>
    </object>
    <object>
        <id>1080</id>
        <text>parseXMLNodeWithNameSpace
            String parseXMLNodeWithNameSpace (String sXMLSubPath)
            Returns the value given by the sXMLSubPath XPath in the current XML document.
            When specify the XPath value, the user has the choice to specifying a namespace uri
            qualified path or using literal path matching specified when using the parseXMLNode
            script operation
        </text>
    </object>
    <object>
        <id>1081</id>
        <text>splitLine
            String[] Parser::splitLine()
            Returns an array of tokens obtained by breaking the line using this parser (e.g. CSV
            parser, fixed width parser)
        </text>
    </object>
    <object>
        <id>1082</id>
        <text>reflect
        </text>
    </object>
    <object>
        <id>1083</id>
        <text>createJavaArray
            Object createJavaArray(String typeName, Integer dim0 [,Integer dim1......Integer
            dim9])
            Create an array of type typeName. The number of dims specified indicates the
            number of dimensions that the array will be created with. The value of these numbers
            indicates the number of elements in that dimension. e.g supplying 1 and 4 as the
            dims would indicate that a 2 dimensional array will be created; the first dimension
            containing 1 element, the second containing 4 elements.If an array of primitives is to
            be created, supply the type as the java primitive keyword such as "int" or "boolean". If
            the type is a class name, it should be fully qualified and should not be an interface.
        </text>
    </object>
    <object>
        <id>1084</id>
        <text>createJavaConstructor
            Constructor createJavaConstructor(String className [,String type0,String
            type1......String type9])
            Create a java.reflect.Constructor Object by reflection using a className and optional
            types. If the constuctor you wish to target contains primitive arguments, supply those
            arguments with type the java primitive keyword such as "int" or "boolean". The
            className should be fully qualified and should not be an interface.. className
            should not be a primitive class (i.e. Class literal names such as int.class or int.TYPE
            are not accepted). In order to pass an array type use [] for one dimentional arrays and
            multiple []s for multiple dimention arrays. e.g. to target a 2 dimension array of ints
            pass "int[][]" to target a 1 dimensional array of Strings pass "java.lang.String[]".
        </text>
    </object>
    <object>
        <id>1085</id>
        <text>createJavaMethod
            Method createJavaMethod(String className,String methodName [,String
            type0,String type1......String type9])
            Create a java.reflect.Method Object by reflection using a className, methodName
            and optional types. className and methodName should not be null. The className
            should be fully qualified. The className may be a fully qualified interface name. If
            the method you wish to target contains primitive arguments, those arguments should
            be supplied with the java primitive keyword such as "int","boolean".The className
            should not be primitive classes (i.e. Class literal names such as int.class or int.TYPE
            ). In order to pass an array type use [] for one dimentional arrays and multiple []s for
            multiple dimension arrays. e.g. to target a 2 dimension array of ints pass "int[][]" to
            target a 1 dimensional array of Strings pass "java.lang.String[]".
        </text>
    </object>
    <object>
        <id>1086</id>
        <text>javaArrayFromScriptArray
            Object javaArrayFromScriptArray(Array scriptArray, String type)
            Transforms the provided scriptArray into a java array holding the same elements in
            the same order. If scriptArray is null, returns null. The user must provide the type (or
            subtype) of the array's elements. The types can be primitive java data types (int, char,
            byte, float, boolean, long, double, short) or any valid java class (eg. java.lang.String ,
            java.lang.Integer). Type can also be a multidimentional array of
            elements(primitive/non primitive) with the brackets intact ( eg int[],
            java.lang.Integer[][]). A fully qualified name is to be provided whenever using a class
            as type
        </text>
    </object>
    <object>
        <id>1087</id>
        <text>runJavaConstructor
            Object runJavaConstructor(Constructor constructor [,Object arg0,Object
            arg1......Object arg9])
            Run the supplied Constructor (which can be created using a createConstructor call).
            Run the constructor using the supplied objects as parameters. The supplied
            constructor should not be null. The supplied parameters should match the number
            and types associated with the Constructor. If the Constructor parameters contain
            primitives, then these parameters should not be supplied as null Objects and should
            be supplied as the appropriate wrapper primitive object (such as instances of
        </text>
    </object>
    <object>
        <id>1088</id>
        <text>java.lang.Integer).
        </text>
    </object>
    <object>
        <id>1089</id>
        <text>runJavaMethod
            Object runJavaMethod(Object obj, Method method [,Object arg0,Object
            arg1......Object arg9])
            Run the supplied Method (which was created using a previous createJavaMethod
            call). If the Method is not static, then it is invoked on the supplied object using the
            supplied parameters. For static methods the supplied obj is ignored. The supplied
            Method should not be null. For instance methods the supplied object should not be
            null. The number of supplied parameters should match the number and types
            associated with the Method. If the Method parameters contain primitives, then these
            parameters should not be supplied as null Objects and should be supplied as the
            appropriate wrapper primitive object (such as instances of java.lang.Integer).
        </text>
    </object>
    <object>
        <id>1090</id>
        <text>scriptArrayFromJavaArray
            Object scriptArrayFromJavaArray(OneDimensionalJavaArray)
            Transforms a 1 dimensional java array into a script array holding the same elements
            in the same order. If OneDimensionalJavaArray is not a 1 dimensional array or is null
            then null is returned. 1 dimension arrays of primitives can be supplied as the
            parameter.
        </text>
    </object>
    <object>
        <id>1091</id>
        <text>scripting
        </text>
    </object>
    <object>
        <id>1092</id>
        <text>setScriptProgress
            void ::setScriptProgress(number percent)
            Sets the percentage completed value in the context of a running script. This script is
            applicable in scripts running as part of jobs like import, export, report etc.
        </text>
    </object>
    <object>
        <id>1093</id>
        <text>setScriptStatsDeletedCnt
            void ::setScriptStatsDeletedCnt(number count)
            Sets the count of items deleted in the context of a running script
        </text>
    </object>
    <object>
        <id>1094</id>
        <text>security
        </text>
    </object>
    <object>
        <id>1095</id>
        <text>authenticateWPCUser
            Boolean authenticateWPCUser(String sUserName, String sPassword, String
            sCmpCode [, Boolean bEncodedPassword)
            Provides authentication for a WPC user. Optional parameter bEncodedPassword
            indicates if the password is being passed already encoded. Default is false.
        </text>
    </object>
    <object>
        <id>1096</id>
        <text>cloneUser
            User cloneUser(String original_username, String username, String firstname,
            String lastname, String email, Boolean enabled, String password[, Category
            organization[, HashMap roles]])
            Clones an existing user info into a new user. Password field is required. The optional
            roles and organization fields, when specified, override the roles and/or organization of
            the existing user.
        </text>
    </object>
    <object>
        <id>1097</id>
        <text>createAccessControlGroup
            ACG createAccessControlGroup(String sACGName, [String sACGDesc])
            Creates an access control group object with the specified acg name and an optional
            acg description.
        </text>
    </object>
    <object>
        <id>1098</id>
        <text>createRole
            Role createRole(String sRoleName, [String sRoleDesc])
            Creates a role object with the specified rolename and an optional role description.
        </text>
    </object>
    <object>
        <id>1099</id>
        <text>createUser
            User ::createUser(String username, String firstname, String lastname, String
            email, Boolean enabled, String password, HashMap roles, Category
            organization [, Boolean encryptPassword, Boolean enableLdap, String
            nameAttr, String serverUrl])
            Creates an user with the specified parameters. Enabled, Password, Roles, and
            organization parameters are required. encryptPassword exists for the purpose of
            migrating environments so that encrypted passwords exported from one environment
            can be loaded into another environment without encrypting them again and that there
            is no possibility of knowing what the password was. EnableLdap marks the user as
            LDAP enabled and allows the provision of extra LDAP parameters, the LDAP name
            attribute and the LDAP Server URL
        </text>
    </object>
    <object>
        <id>1100</id>
        <text>getAccessControlGroupByName
            ACG getAccessControlGroupByName(String sACGName)
            Returns a access control group object for the specified acg name
        </text>
    </object>
    <object>
        <id>1101</id>
        <text>getAccessControlGroupName
            String ACG::getAccessControlGroupName()
            Return the name of the access control group
        </text>
    </object>
    <object>
        <id>1102</id>
        <text>getAccessControlGroupPrivsForRole
            String[] Role::getAccessControlGroupPrivsForRole(String acgName)
            Gets the access control group privileges for the gvien access control group and the
            given role. The return parameter is an array of privileges (which are defined in the
            format: Catalog__list, Selection__list, SelectionMembers__view_items etc.).
        </text>
    </object>
    <object>
        <id>1103</id>
        <text>getAccessControlGroupsForRole
            String[] Role::getAccessControlGroupsForRole()
            Gets the access control groups for the given role.
        </text>
    </object>
    <object>
        <id>1104</id>
        <text>getAllUsers
            User[] getAllUsers()
            Returns all users
        </text>
    </object>
    <object>
        <id>1105</id>
        <text>getCompanyCode
            String getCompanyCode()
            Returns the company code of this company.
        </text>
    </object>
    <object>
        <id>1106</id>
        <text>getCompanyName
            String getCompanyName()
            Returns the name of this company.
        </text>
    </object>
    <object>
        <id>1107</id>
        <text>getCurrentUserName
            String getCurrentUserName()
            Returns the name of the current user
        </text>
    </object>
    <object>
        <id>1108</id>
        <text>getLdapEntryDn
            String User::getLdapEntryDn()
            Returns the distinguished name field associated with an LDAP authenticated User.
        </text>
    </object>
    <object>
        <id>1109</id>
        <text>getLdapServerUrl
            String User::getLdapServerUrl()
            Return the URL of the server providing this users' LDAP authentication.
        </text>
    </object>
    <object>
        <id>1110</id>
        <text>getLocalesForRole
            String Role::getLocalesForRole()
            Gets the locales that this role has access to for all containers
        </text>
    </object>
    <object>
        <id>1111</id>
        <text>getLoginString
            String getLoginString(String sUrl, Date dExpirationDate, [String sUserName])
            Returns the url string needed for login automatically to the given url as the current
            user. If you are an admin, you can generate a login string for another user by passing
            the username as an extra parameter. Note that the url should not include the server
            name/port and should start with '/'. If an error occur, a null string is returned.
        </text>
    </object>
    <object>
        <id>1112</id>
        <text>getRoleByName
            Role getRoleByName(String sRoleName)
            Returns a role object for the specified role
        </text>
    </object>
    <object>
        <id>1113</id>
        <text>getRoleDescription
            String Role::getRoleDescription()
            Return the description of the role
        </text>
    </object>
    <object>
        <id>1114</id>
        <text>getRoleName
            String Role::getRoleName()
            Return the name of the role
        </text>
    </object>
    <object>
        <id>1115</id>
        <text>getRoles
            Role[] getRoles()
            Returns all roles for the current company
        </text>
    </object>
    <object>
        <id>1116</id>
        <text>getRolesForCompany
            Role[] getRolesForCompany(String sCmpCode)
            Returns all roles of the given company
        </text>
    </object>
    <object>
        <id>1117</id>
        <text>getUserAddress
            String User::getUserAddress()
            Return the User's Address
        </text>
    </object>
    <object>
        <id>1118</id>
        <text>getUserByUsername
            User getUserByUsername(String sUserName, [String sCmpCode])
            Returns the User object for the given User Name and sCmpCode. If sCmpCode is
            not given, company code is taken from the current context of script execution
        </text>
    </object>
    <object>
        <id>1119</id>
        <text>getUserCompanyCode
            String User::getUserCompanyCode()
            Return the User's Company Code
        </text>
    </object>
    <object>
        <id>1120</id>
        <text>getUserCompanyName
            String User::getUserCompanyName()
            Return the User's Company Name
        </text>
    </object>
    <object>
        <id>1121</id>
        <text>getUserEmail
            String User::getUserEmail()
            Return the User's Email Address
        </text>
    </object>
    <object>
        <id>1122</id>
        <text>getUserEnabled
            boolean User::getUserEnabled()
            Returns if the User is enabled or not.
        </text>
    </object>
    <object>
        <id>1123</id>
        <text>getUserFax
            String User::getUserFax()
            Return the User's Fax Number
        </text>
    </object>
    <object>
        <id>1124</id>
        <text>getUserFirstName
            String User::getUserFirstName()
            Return the User's First Name
        </text>
    </object>
    <object>
        <id>1125</id>
        <text>getUserLastName
            String User::getUserLastName()
            Return the User's Last Name
        </text>
    </object>
    <object>
        <id>1126</id>
        <text>getUserLdapEnabled
            boolean User::getUserEnabled()
            Returns if the User is a LDAP user or not.
        </text>
    </object>
    <object>
        <id>1127</id>
        <text>getUserName
            String User::getUserName()
            Return the User Name
        </text>
    </object>
    <object>
        <id>1128</id>
        <text>getUserOrganizations
            Category[] User::getUserOrganizations()
            Return the User's Organizations
        </text>
    </object>
    <object>
        <id>1129</id>
        <text>getUserPhone
            String User::getUserPhone()
            Return the User's Phone Number
        </text>
    </object>
    <object>
        <id>1130</id>
        <text>getUserRoles
            String[] User::getUserRoles()
            Return the User's Roles
        </text>
    </object>
    <object>
        <id>1131</id>
        <text>getUsers
            User[] getUsers()
            Returns all Users for the current company
        </text>
    </object>
    <object>
        <id>1132</id>
        <text>getUsersFromRole
            User[] Role::getUsersFromRole()
            Returns all users within the Role
        </text>
    </object>
    <object>
        <id>1133</id>
        <text>getUserTitle
            String User::getUserTitle()
            Return the User's Title
        </text>
    </object>
    <object>
        <id>1134</id>
        <text>populateSecurityContext
            AustinContext ::populateSecurityContext(User user[, String[] roleNames,
            InitialLdapContext ldapContext, ICategory organization])
            Returns the context for the given user by assigning the access privileges for the roles
            passed in roleNames. It has no effect on the current users context.If ldapContext is
            present then a handle of the context will be set in the returned context. If the user is
            not already present in WPC a new user will be created in the organization specified
            otherwise in the default organization of default organization hierarchy.
        </text>
    </object>
    <object>
        <id>1135</id>
        <text>saveUser
            ValidationError[] User::saveUser()
            Save the User's Profile. Returns null if the save was successful, otherwise returns an
            array of ValidationErrors.
        </text>
    </object>
    <object>
        <id>1136</id>
        <text>setAccessControlGroupForRole
            Boolean Role::setAccessControlGroupForRole(String acgName, String[] privs)
            Sets an access control group with the given set of privileges for the role. The
            parameter privs is an array of privileges (which are picked from the strings in the
            format: Catalog__list, Selection__list, SelectionMembers__view_items etc.). Please
            note the the page privileges like PAGE_OBJ_CTG_CONSOLE__view,
            PAGE_OBJ_CAT_CREATE__view are stored only in the "Default" ACG.
        </text>
    </object>
    <object>
        <id>1137</id>
        <text>setAccessControlGroupForRoleMigration
            Boolean Role::setAccessControlGroupForRoleMigration(String acgName,
            String[] privs)
            Script operation for migrating the old priv names to the new ones. Its exactly the
            same as setAccessControlGroupForRole operations except it has a mapping of old
            priv name to new ones.
        </text>
    </object>
    <object>
        <id>1138</id>
        <text>setAllAccessControlGroupForRole
            void Role::setAllAccessControlGroupForRole(String acgName, [String[]
            privExclusions])
            Sets access control group acgName with all privileges except for the ones in
            privExclusions.
        </text>
    </object>
    <object>
        <id>1139</id>
        <text>setLdapEntryDn
            void User::setLdapEntryDn(String sEntryDN)
            Sets the distinguished name field associated with an LDAP authenticated User
        </text>
    </object>
    <object>
        <id>1140</id>
        <text>setLdapServerUrl
            void User::setLdapServerUrl(String sServerUrl)
            Sets the URL of the server providing this users' LDAP authentication.
        </text>
    </object>
    <object>
        <id>1141</id>
        <text>setLocalesForRole
            void Role::setLocalesForRole(String localesCSVString)
            Sets the locales that this role has access to for all containers
        </text>
    </object>
    <object>
        <id>1142</id>
        <text>setUserAddress
            void User::setUserAddress(String str)
            Set the User's Address
        </text>
    </object>
    <object>
        <id>1143</id>
        <text>setUserEmail
            void User::setUserEmail(String str)
            Set the User's Email Address
        </text>
    </object>
    <object>
        <id>1144</id>
        <text>setUserFax
            void User::setUserFax(String str)
            Set the User's Fax Number
        </text>
    </object>
    <object>
        <id>1145</id>
        <text>setUserFirstName
            void User::setUserFirstName(String str)
            Set the User's First Name
        </text>
    </object>
    <object>
        <id>1146</id>
        <text>setUserLastName
            void User::setUserLastName(String str)
            Set the User's Last Name
        </text>
    </object>
    <object>
        <id>1147</id>
        <text>setUserLdapEnabled
            void User::setUserLdapEnabled(boolean)
            Sets the user as a LDAP user.
        </text>
    </object>
    <object>
        <id>1148</id>
        <text>setUsername
            void User::setUsername(String sUsername)
            Sets the name of the current user
        </text>
    </object>
    <object>
        <id>1149</id>
        <text>setUserPhone
            void User::setUserPhone(String str)
            Set the User's Phone Number
        </text>
    </object>
    <object>
        <id>1150</id>
        <text>setUserRoles
            Boolean User::setUserRoles(Role[] roles)
        </text>
    </object>
    <object>
        <id>1151</id>
        <text>Sets the roles for a user
        </text>
    </object>
    <object>
        <id>1152</id>
        <text>setUserTitle
            void User::setUserTitle(String str)
            Set the User's Title
        </text>
    </object>
    <object>
        <id>1153</id>
        <text>validateUser
            boolean validateUser(String sUserName, String sPassword, String sCmpCode)
            Confirms if the combination of User name, password and company id represent a
            valid and enabled WPC user. Returns true if the user could logon to WPC otherwise
            false.
        </text>
    </object>
    <object>
        <id>1154</id>
        <text>set
        </text>
    </object>
    <object>
        <id>1155</id>
        <text>containsKey
            Boolean HashMap::containsKey(Object key)
            Returns true if key exists.
        </text>
    </object>
    <object>
        <id>1156</id>
        <text>containsValue
            Boolean HashMap::containsValue(Object val)
            Returns true if value exists.
        </text>
    </object>
    <object>
        <id>1157</id>
        <text>forEachHmElement
            forEachHmElement(HashMap hm, Object oKey, Object oValue) { statements }
            Executes the statements for each (oKey, oValue) map in hm
        </text>
    </object>
    <object>
        <id>1158</id>
        <text>intersectValues
            HashMap intersectValues(HashMap hm1, HashMap hm2, ...)
            Return the set-intersection of hm1, hm2, ... (only values are considered)
        </text>
    </object>
    <object>
        <id>1159</id>
        <text>keyForValue
            Object HashMap::keyForValue(Object valueToSearch)
            Returns a key mapped to valueToSearch in hm or null
        </text>
    </object>
    <object>
        <id>1160</id>
        <text>mergeValues
            HashMap mergeValues(HashMap hm1, HashMap hm2, ...)
            Return the set-union of hm1, hm2, ... (only values are considered)
        </text>
    </object>
    <object>
        <id>1161</id>
        <text>size
            Integer Object::size()
            Returns the size of an object of type array, HashMap, or SearchResultSet.
        </text>
    </object>
    <object>
        <id>1162</id>
        <text>sort
            Array Array::sort()
            Return the array sorted
        </text>
    </object>
    <object>
        <id>1163</id>
        <text>string
        </text>
    </object>
    <object>
        <id>1164</id>
        <text>buildCSV
            String buildCSV (String str1, String str2, ..., String strN)
            Takes a variable number of arguments, and returns a string with the arguments
            concatenated in csv format
        </text>
    </object>
    <object>
        <id>1165</id>
        <text>buildDelim
            String buildDelim (String delimiter, String qualifier, String str1, String str2, ...,
            String strN)
            Takes a variable number of arguments, and returns a string with the arguments
        </text>
    </object>
    <object>
        <id>1166</id>
        <text>concatenated in delim format, using the qualifier to enclose strings that contain the
            delimiter.
        </text>
    </object>
    <object>
        <id>1167</id>
        <text>buildFixedWidth
            String buildFixedWidth (String str1, Integer len1, String strN, Integer lenN)
            Takes a variable number of arguments, and returns a string with the arguments
            concatenated in fixed width format.
        </text>
    </object>
    <object>
        <id>1168</id>
        <text>checkDouble
            Double checkDouble(String str, Double defaultValue)
            If the input string is null or empty, the default value is returned. Otherwise the original
            value parsed as an Double is returned.
        </text>
    </object>
    <object>
        <id>1169</id>
        <text>checkInt
            Integer checkInt(String str, Integer defaultValue)
            If the input string is null or empty, the default value is returned. Otherwise the original
            value parsed as an Integer is returned.
        </text>
    </object>
    <object>
        <id>1170</id>
        <text>checkString
            String checkString (String str, String defaultValue [, Boolean trim])
            If the input string is null or empty, the default value is returned, otherwise the original
            value is returned. The input string will be trimmed of all leading and trailing spaces,
            unless a value of false for the optional TRIM parameter.
        </text>
    </object>
    <object>
        <id>1171</id>
        <text>concat
            String concat (String str1, String str2, ..., String strN)
            Takes a variable number of arguments, and returns a string with the arguments
            concatenated in the order given
        </text>
    </object>
    <object>
        <id>1172</id>
        <text>contains
            Boolean String::contains (String match)
            Tests if this string contains an occurence of the match substring
        </text>
    </object>
    <object>
        <id>1173</id>
        <text>decodeUsingCharset
            String String::decodeUsingCharset(String charset)
            Returns a string by decoding the string using the named charset
        </text>
    </object>
    <object>
        <id>1174</id>
        <text>encodeUsingCharset
            String String::encodeUsingCharset(String charset)
            Encodes the string using the named charset
        </text>
    </object>
    <object>
        <id>1175</id>
        <text>endsWith
            Boolean String::endsWith (String match)
            Tests if this string ends with an occurence of the match substring
        </text>
    </object>
    <object>
        <id>1176</id>
        <text>escapeForCSV
            String escapeForCSV(String s)
            Escape for CSV
        </text>
    </object>
    <object>
        <id>1177</id>
        <text>escapeForHTML
            String escapeForHTML(String s[,boolean isAscii])
            Escape for HTML.By default isAscii is true. When isAscii is false the characters will
            be escaped with html entities
        </text>
    </object>
    <object>
        <id>1178</id>
        <text>escapeForJS
            String escapeForJS(String s)
            Escape for JavaScript
        </text>
    </object>
    <object>
        <id>1179</id>
        <text>escapeWithHTMLEntities
        </text>
    </object>
    <object>
        <id>1180</id>
        <text>String escapeWithHTMLEntities(String str, Integer beg, Integer end)
            Translates all character with HTML character codes less than beg or greater than end
            to HTML character codes
        </text>
    </object>
    <object>
        <id>1181</id>
        <text>getNameFromPath
            String getNameFromPath(String str[, String delimiter])
            if str contains / returns the substring of str after the last / char exclusively, otherwise
            returns the original string
        </text>
    </object>
    <object>
        <id>1182</id>
        <text>getParentPath
            String getParentPath(String str)
            if str contains / returns the substring of str up to the last / char exclusively, otherwise
            returns the empty string
        </text>
    </object>
    <object>
        <id>1183</id>
        <text>getRidOfRootName
            String getRidOfRootName(String str)
            if str contains '/', gets rid of all preceding first '/' inclusive
        </text>
    </object>
    <object>
        <id>1184</id>
        <text>indexOf
            Integer String::indexOf (String match)
            Returns the index within this string of the first occurrence of the specified match
            substring
        </text>
    </object>
    <object>
        <id>1185</id>
        <text>isLowerCase
            Boolean String::isLowerCase ()
            Checks if all the characters in this string are lower case using the rules of the default
            locale
        </text>
    </object>
    <object>
        <id>1186</id>
        <text>isStringSingleByte
            Boolean isStringSingleByte(String s)
            For SHIFT_JIS encoding, this returns true if the string is made of single byte
            characters only. False is returned otherwise
        </text>
    </object>
    <object>
        <id>1187</id>
        <text>isUpperCase
            Boolean String::isUpperCase ()
            Checks if all the characters in this string are upper case using the rules of the default
            locale
        </text>
    </object>
    <object>
        <id>1188</id>
        <text>lastIndexOf
            Integer String::lastIndexOf (String match)
            Returns the index within this string of the rightmost occurrence of the specified match
            substring
        </text>
    </object>
    <object>
        <id>1189</id>
        <text>length
            Integer String::length ()
            Returns the length of this string
        </text>
    </object>
    <object>
        <id>1190</id>
        <text>parseCSV
            String[] String::parseCSV () | String String::parserCSV(Integer field)
            Returns an array of each token, as parsed by the CSV parser. If a field number is
            provided, just the corresponding token substring is returned. A nullpointer exception
            is thrown if the string to be parsed is null.
        </text>
    </object>
    <object>
        <id>1191</id>
        <text>parseDelim
            String[] String::parseDelim (String delimeter) | String String::parseDelim (String
            delimeter, Integer iField)
            Returns an array of each token, as parsed by the Delim parser. If a field number is
            provided, just the corresponding token substring is returned.
        </text>
    </object>
    <object>
        <id>1192</id>
        <text>parseFixedWidth
            String String::parseFixedWidth (Integer beginIndex, Integer endIndex)
            Returns the corresponding token substring between the two indexes
        </text>
    </object>
    <object>
        <id>1193</id>
        <text>removeHTML
            String removeHTML (String str)
            Returns a new string resulting from removing all html tags from the original string
        </text>
    </object>
    <object>
        <id>1194</id>
        <text>replace
            String replace (String str, String match, String replacement)
            Returns a new string resulting from replacing all occurrences of the match substring
            in this string with the replacement substring
        </text>
    </object>
    <object>
        <id>1195</id>
        <text>replaceCharsNotInDecRangeWithHex
            String replaceCharsNotInDecRangeWithHex (String str, Integer
            iStartDecRange, Integer iEndDecRange, String sEncoding, String sQualifier)
            Does the replace where iStartDecRange and iEndDecRange are inclusive
        </text>
    </object>
    <object>
        <id>1196</id>
        <text>replaceString
            String replaceString (String str, String match, String replacement)
            Returns a new string resulting from replacing all occurrences of the match substring
            in this string with the replacement substring
        </text>
    </object>
    <object>
        <id>1197</id>
        <text>resizeString
            String resizeString (String str, Integer finalLength, Character padChar, Boolean
            padToTheRight)
            Use to increase the size of a string to the finalLength by applying the appropriate
            padding to the left or right of the string with the given padChar.
        </text>
    </object>
    <object>
        <id>1198</id>
        <text>startsWith
            Boolean String::startsWith (String match)
            Tests if this string begins with an occurence of the match substring
        </text>
    </object>
    <object>
        <id>1199</id>
        <text>stripOutNonASCII
            String stripOutNonASCII (String str)
            Returns a new string resulting from removing all non-ASCII characters in this string
        </text>
    </object>
    <object>
        <id>1200</id>
        <text>substring
            String substring (String str, Integer beginIndex [, Integer endIndex])
            Returns a new string that is a substring of this string. The beginIndex is inclusive but
            endIndex is not.
        </text>
    </object>
    <object>
        <id>1201</id>
        <text>toLowerCase
            String toLowerCase (String str)
            Converts all of the characters in this string to lower case using the rules of the default
            locale
        </text>
    </object>
    <object>
        <id>1202</id>
        <text>toTitleCase
            String toTitleCase (String str)
            Converts the first alphabet of all the words in a string to upper case
        </text>
    </object>
    <object>
        <id>1203</id>
        <text>toUpperCase
            String toUpperCase (String str)
            Converts all of the characters in this string to upper case using the rules of the default
            locale
        </text>
    </object>
    <object>
        <id>1204</id>
        <text>trim
            String trim (String str)
            Removes white space from both ends of this string
        </text>
    </object>
    <object>
        <id>1205</id>
        <text>unescapeHTMLEntities
            String urlEncode(String str)
            Translates all character escaped with HTML character codes to corresponding
            characters
        </text>
    </object>
    <object>
        <id>1206</id>
        <text>urlEncode
            String urlEncode(String str)
            Translates a string into x-www-form-urlencoded format
        </text>
    </object>
    <object>
        <id>1207</id>
        <text>system
        </text>
    </object>
    <object>
        <id>1208</id>
        <text>dumpContext
            String dumpContext([Logger l])
            Return the script context in a string (and dumps it to the logger l if specified)
        </text>
    </object>
    <object>
        <id>1209</id>
        <text>dumpSystemLog
            String dumpSystemLog(String sName, int nbLines)
            Return the last nLines of the system log sName
        </text>
    </object>
    <object>
        <id>1210</id>
        <text>getFunctionByName
            FunctionObject ScriptObject::getFunctionByName(String sFunctionName)
            Build the function object for the function sFunctionName in this script object
        </text>
    </object>
    <object>
        <id>1211</id>
        <text>getLogger
            Logger getLogger(String s)
            Returns a logger (loggers are in the system log directory with the given name). "s" is
            a category name defined in log.xml ("com.ibm.ccd.wpc_user_scripting." is prepended
            automatically to "s".. Logger descriptions are stored in corresponding log files as
            specified in appender-ref in logs.xml for respective category name. If the name is not
            present in log.xml then by default logger descriptions are stored in default.log file
            under respective service directory.
        </text>
    </object>
    <object>
        <id>1212</id>
        <text>getMemorySummary
            String getMemorySummary()
            Invokes the garbage collector, sleeps for 5 seconds and then returns a string
            summarizing memory usage.
        </text>
    </object>
    <object>
        <id>1213</id>
        <text>getPageURL
            String getPageURL(String pageName, Object[] requiredObject)
            Return the URL for the page requested. The required objects are defined by the page
            itself which is limited to the following choices (Including their requirements):
            ITEM_LIST (Catalog, Category, CategoryTree) : displays all items in category. ITEM
            (Catalog, ItemId/PrimaryKey) : displays item. SEARCH (Catalog) : display rich search
            for the catalog. COLAREA_STEP (CollaborationArea, StepPath): displays all
            items/categories in step. COLAREA_ENTRY (CollaborationArea, StepPath,
            Item/Category PrimaryKey): displays item/category in step.
        </text>
    </object>
    <object>
        <id>1214</id>
        <text>getProductCenterURL
            Returns the property trigo_web_url defined in common.properties (which holds
            the fully-qualified URL, including port number, of the web site where users
            should point their browsers to access this instance of Product Center
            Return the current script execution mode
        </text>
    </object>
    <object>
        <id>1215</id>
        <text>getScriptByPath
            ScriptObject getScriptByPath(String sScriptPath)
            Build the script object for the script stored at sScriptPath in the DocStore. If the string
            starts with "file://" then the script will be loaded from the file system according to the
        </text>
    </object>
    <object>
        <id>1216</id>
        <text>specified path
        </text>
    </object>
    <object>
        <id>1217</id>
        <text>getScriptContextValue
            Object getScriptContextValue(String sVariableName)
            Return the value of the variable named sVariableName
        </text>
    </object>
    <object>
        <id>1218</id>
        <text>getScriptExecutionMode
            String getScriptExecutionMode()
            Return the current script execution mode
        </text>
    </object>
    <object>
        <id>1219</id>
        <text>getSystemDefaultEncoding
            String getSystemDefaultEncoding()
            Return the value of the system's default encoding
        </text>
    </object>
    <object>
        <id>1220</id>
        <text>invoke
            Object FunctionObject::invoke(Object arg1, Object arg2, etc)
            Invoke this function object with the arguments arg1, arg2, etc
        </text>
    </object>
    <object>
        <id>1221</id>
        <text>loggerDebug
            void Logger::loggerDebug(String s)
            Write s to this logger
        </text>
    </object>
    <object>
        <id>1222</id>
        <text>loggerError
            void Logger::loggerError(String s)
            Write s to this logger
        </text>
    </object>
    <object>
        <id>1223</id>
        <text>loggerFatal
            void Logger::loggerFatal(String s)
            Write s to this logger
        </text>
    </object>
    <object>
        <id>1224</id>
        <text>loggerInfo
            void Logger::loggerInfo(String s)
            Write s to this logger
        </text>
    </object>
    <object>
        <id>1225</id>
        <text>loggerWarn
            void Logger::loggerWarn(String s)
            Write s to this logger
        </text>
    </object>
    <object>
        <id>1226</id>
        <text>runScript
            void ScriptObject::runScript(HashMap hmContext)
            Run this script
        </text>
    </object>
    <object>
        <id>1227</id>
        <text>setScriptContextValue
            void setScriptContextValue(String sVariableName, Object oVariableValue)
            Set the value of the variable named sVariableName. This is a way of defining a
            variable within a script but this must be used with caution. There are already a
            number of implicit system-defined variables and this script op should not be used to
            redefine any of these implicit variables. If an implicit variable is redefined the results
            may be unpredictable. Note that there are a number of implict variables which whose
            names start with a $ sign. This script op must not be used to define any variables
            whose name starts with a $ sign. Again, the results may be unpredictable if a variable
            whose name starts with a dollar sign is defined. The following is a list of the implicit
            variables (not including those whose name starts with a $ sign):
            all_itemset_fetch_linked_item, all_itemset_readonly, attribute_group,
            bypass_approval_workflow, catalog, category, category_tree, colArea,
            collaboration_area, container, destination_attribute, entry, entrynode, entrySet, err,
            err_lines, http_request, in, inputs, invoking_user, item, job, lkpTable, location,
            location_tree, locationRootEntryNode, logger, lookup_table, message,
            msg_attachments, multi_request, node, organization, organization_type,
        </text>
    </object>
    <object>
        <id>1228</id>
        <text>original_doc_folder,out, outs, page, page_layout, queueid, request, res
            run_rule_per_occurence, save_event, sequence, soapFaultCode, soapFaultMsg,
            soapIncomingAttachments, soapMessage, SoapOperationName,
            soapOutgoingAttachments, soapParams, spec, spec_map, special_outs,
            specmap_script_dest_attrib, step, stepPath, this, top, val, workflow, workIndex,
            workList, wrn.
        </text>
    </object>
    <object>
        <id>1229</id>
        <text>startTransaction
            startTransaction { statements }
            Executes the statements in a transaction, rollback takes place if an error occurs.
            Does not do anything if a transaction is already open
        </text>
    </object>
    <object>
        <id>1230</id>
        <text>useTransaction
            useTransaction { statements }
            Executes the statements in a transaction, rollback takes place if an error occurs
        </text>
    </object>
    <object>
        <id>1231</id>
        <text>timezone
        </text>
    </object>
    <object>
        <id>1232</id>
        <text>getTimeZoneDesc
            String getTimeZoneDesc(int offsetInMinutes,Locale locale)
            Get the time zone's description with the offset value in minutes.
        </text>
    </object>
    <object>
        <id>1233</id>
        <text>getTimeZoneOffsetFromDBValue
            Number getTimeZoneOffsetFromDBValue(String dbValue)
            Get time zone from the db value and return the offset from GMT in minutes.
        </text>
    </object>
    <object>
        <id>1234</id>
        <text>getUserTimeZoneDesc
            String getUserTimeZoneDesc()
            Get the user setting time zone's description in native language.
        </text>
    </object>
    <object>
        <id>1235</id>
        <text>getUserTimeZoneOffset
            Number getUserTimeZoneOffset()
            Get user setting time zone's offset from GMT in minutes.
        </text>
    </object>
    <object>
        <id>1236</id>
        <text>parseTimeZoneToDBValue
            String parseTimeZoneToDBValue(String srcStr)
            Parse the string to time zone then return the db value.
        </text>
    </object>
    <object>
        <id>1237</id>
        <text>setUserTimeZone
            void setUserTimeZone(int offset)
            Change user setting's time zone with the offset value in minutes.
        </text>
    </object>
    <object>
        <id>1238</id>
        <text>writer
        </text>
    </object>
    <object>
        <id>1239</id>
        <text>close
            void Writer::close([String path])
            Close this writer, and stores its content in the doc store location specified by path, or
            if the string starts with "file://", on the file system according to the specified path
        </text>
    </object>
    <object>
        <id>1240</id>
        <text>createOtherOut
            Writer createOtherOut(String name, [String charset])
            Returns a new writer with the given name and an optional charset value. If the string
            starts with "file://" then the writer will write into the file system file given by the
            specified path
        </text>
    </object>
    <object>
        <id>1241</id>
        <text>print
            void Writer::print(Object o)
        </text>
    </object>
    <object>
        <id>1242</id>
        <text>Writes o as a string into this writer
        </text>
    </object>
    <object>
        <id>1243</id>
        <text>println
            void Writer::println(Object o)
            Writes o as a string and appends a new line to it into this writer
        </text>
    </object>
    <object>
        <id>1244</id>
        <text>printXML
            void Writer::printXML(String sTagName, String sValue [, String sAttributes] [,
            boolean escape])
            Writes an XML tag with the text value sValue, the tag name sTagName and the
            attributes sAttributes. The value of escape if given as true, will print the tag with angle
            brackets surrounding it, converted to escape characters.
        </text>
    </object>
    <object>
        <id>1245</id>
        <text>save
            Doc Writer::save(String documentPath)
            Creates an Doc object with the content in the Writer and saves it in the specified
            documentPath
        </text>
    </object>
    <object>
        <id>1246</id>
        <text>setOutputAttribute
            void Writer::setOutputAttribute(String sAttributeName, String sAttribueValue)
            Set an attribute of this writer - which becomes an attribute of the document this writer
            is flushed into, if any
        </text>
    </object>
    <object>
        <id>1247</id>
        <text>setOutputName
            void Writer::setOutputName(String sName)
            Set the name of this writer - which becomes the name of the document this writer is
            flushed into, if any
        </text>
    </object>
    <object>
        <id>1248</id>
        <text>write
            void Writer::write(Object o)
            Writes o as a string into this writer
        </text>
    </object>
    <object>
        <id>1249</id>
        <text>writeBinaryFile
            void writeBinaryFile(String sDestFileName, String sOrigFilePath)
            Pipes the docstore file represented by sOrigFilePath into a new Doc of name
            sDestFileName in the directory of the current transaction instance
        </text>
    </object>
    <object>
        <id>1250</id>
        <text>writeDoc
            void Writer::writeDoc(Doc doc)
            Appends doc as a string into this writer
        </text>
    </object>
    <object>
        <id>1251</id>
        <text>writeFile
            void Writer::writeFile(String sFilePath)
            Pipes the dostore file represented sFilePath into this writer
        </text>
    </object>
    <object>
        <id>1252</id>
        <text>writeFileUsingOut
            void Writer::writeFileUsingOut(Writer w)
            Pipes w into this writer
        </text>
    </object>
    <object>
        <id>1253</id>
        <text>writeFileUsingReader
            void Writer::writeFileUsingReader(Reader r)
            Pipes r into this writer
        </text>
    </object>
    <object>
        <id>1254</id>
        <text>writeln
            void Writer::writeln(Object o)
            Writes o as a string and appends a new line to it into this writer
        </text>
    </object>
    <object>
        <id>1255</id>
        <text>zip
        </text>
    </object>
    <object>
        <id>1256</id>
        <text>unzip
            Boolean unzip(String srcPath, String dstPath)
            Unzip zip file given by srcPath into directory given by dstPath
        </text>
    </object>
    <object>
        <id>1257</id>
        <text>zip (function)
            Boolean zip(String srcPath, String dstPath[,Stiring[] filesList)
            Zips files under directory given by srcPath and creates zip file given by dstPath
        </text>
    </object>
    <object>
        <id>1258</id>
        <text>zip_archive
        </text>
    </object>
    <object>
        <id>1259</id>
        <text>addCtgFile
            Boolean ZipArchive::addCtgFile(String sFileName [, Boolean
            bUpperCaseName])
            Use to add a supplier ctg file (including images) to a zip archive
        </text>
    </object>
    <object>
        <id>1260</id>
        <text>closeZipArchive
            void ZipArchive::closeZipArchive([Boolean deleteAfterDistribution])
            Use to close a zip archive and upload to the docstore for future distributions. By
            default, the archive is deleted after the distribution, unless 'deleteAfterDistribution' is
            false.
        </text>
    </object>
    <object>
        <id>1261</id>
        <text>getCtgFileDiffStatus
            Boolean getCtgFileDiffStatus(String sFileName)
            Returns true or false to indicate whether or not the file was modified between the two
            versions selected for differences syndication
        </text>
    </object>
    <object>
        <id>1262</id>
        <text>getCtgFileExists
            Boolean getCtgFileExists(String sFileName)
            Returns true or false to indicate whether the physical file really exists
        </text>
    </object>
</data-objects>
